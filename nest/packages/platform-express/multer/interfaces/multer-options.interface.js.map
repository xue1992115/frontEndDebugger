{"version":3,"file":"multer-options.interface.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/platform-express/","sources":["multer/interfaces/multer-options.interface.ts"],"names":[],"mappings":"","sourcesContent":["/**\n * @see https://github.com/expressjs/multer\n */\nexport interface MulterOptions {\n  dest?: string;\n  /** The storage engine to use for uploaded files. */\n  storage?: any;\n  /**\n   * An object specifying the size limits of the following optional properties. This object is passed to busboy\n   * directly, and the details of properties can be found on https://github.com/mscdex/busboy#busboy-methods\n   */\n  limits?: {\n    /** Max field name size (Default: 100 bytes) */\n    fieldNameSize?: number;\n    /** Max field value size (Default: 1MB) */\n    fieldSize?: number;\n    /** Max number of non- file fields (Default: Infinity) */\n    fields?: number;\n    /** For multipart forms, the max file size (in bytes)(Default: Infinity) */\n    fileSize?: number;\n    /** For multipart forms, the max number of file fields (Default: Infinity) */\n    files?: number;\n    /** For multipart forms, the max number of parts (fields + files)(Default: Infinity) */\n    parts?: number;\n    /** For multipart forms, the max number of header key=> value pairs to parse Default: 2000(same as node's http). */\n    headerPairs?: number;\n  };\n\n  /** Keep the full path of files instead of just the base name (Default: false) */\n  preservePath?: boolean;\n\n  fileFilter?(\n    req: any,\n    file: {\n      /** Field name specified in the form */\n      fieldname: string;\n      /** Name of the file on the user's computer */\n      originalname: string;\n      /** Encoding type of the file */\n      encoding: string;\n      /** Mime type of the file */\n      mimetype: string;\n      /** Size of the file in bytes */\n      size: number;\n      /** The folder to which the file has been saved (DiskStorage) */\n      destination: string;\n      /** The name of the file within the destination (DiskStorage) */\n      filename: string;\n      /** Location of the uploaded file (DiskStorage) */\n      path: string;\n      /** A Buffer of the entire file (MemoryStorage) */\n      buffer: Buffer;\n    },\n    callback: (error: Error | null, acceptFile: boolean) => void,\n  ): void;\n}\n\nexport interface MulterField {\n  /** The field name. */\n  name: string;\n  /** Optional maximum number of files per field to accept. */\n  maxCount?: number;\n}\n"]}