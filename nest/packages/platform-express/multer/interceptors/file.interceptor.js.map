{"version":3,"file":"file.interceptor.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/platform-express/","sources":["multer/interceptors/file.interceptor.ts"],"names":[],"mappings":";;;;AAAA,2CAQwB;AACxB,iCAAiC;AAEjC,wDAA2D;AAG3D,yDAA4D;AAI5D,SAAgB,eAAe,CAC7B,SAAiB,EACjB,YAA4B;IAE5B,IAAM,gBAAgB,GAAtB,MAAM,gBAAgB;QAGpB,YAGE,UAA+B,EAAE;YAEjC,IAAI,CAAC,MAAM,GAAI,MAAc,iCACxB,OAAO,GACP,YAAY,EACf,CAAC;QACL,CAAC;QAED,KAAK,CAAC,SAAS,CACb,OAAyB,EACzB,IAAiB;YAEjB,MAAM,GAAG,GAAG,OAAO,CAAC,YAAY,EAAE,CAAC;YAEnC,MAAM,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE,CAC1C,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAC3B,GAAG,CAAC,UAAU,EAAE,EAChB,GAAG,CAAC,WAAW,EAAE,EACjB,CAAC,GAAQ,EAAE,EAAE;gBACX,IAAI,GAAG,EAAE;oBACP,MAAM,KAAK,GAAG,IAAA,iCAAkB,EAAC,GAAG,CAAC,CAAC;oBACtC,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC;iBACtB;gBACD,OAAO,EAAE,CAAC;YACZ,CAAC,CACF,CACF,CAAC;YACF,OAAO,IAAI,CAAC,MAAM,EAAE,CAAC;QACvB,CAAC;KACF,CAAA;IAnCK,gBAAgB;QAIjB,mBAAA,IAAA,iBAAQ,GAAE,CAAA;QACV,mBAAA,IAAA,eAAM,EAAC,uCAAqB,CAAC,CAAA;;OAL5B,gBAAgB,CAmCrB;IACD,MAAM,WAAW,GAAG,IAAA,cAAK,EAAC,gBAAgB,CAAC,CAAC;IAC5C,OAAO,WAAW,CAAC;AACrB,CAAC;AA1CD,0CA0CC","sourcesContent":["import {\n  CallHandler,\n  ExecutionContext,\n  Inject,\n  mixin,\n  NestInterceptor,\n  Optional,\n  Type,\n} from '@nestjs/common';\nimport * as multer from 'multer';\nimport { Observable } from 'rxjs';\nimport { MULTER_MODULE_OPTIONS } from '../files.constants';\nimport { MulterModuleOptions } from '../interfaces';\nimport { MulterOptions } from '../interfaces/multer-options.interface';\nimport { transformException } from '../multer/multer.utils';\n\ntype MulterInstance = any;\n\nexport function FileInterceptor(\n  fieldName: string,\n  localOptions?: MulterOptions,\n): Type<NestInterceptor> {\n  class MixinInterceptor implements NestInterceptor {\n    protected multer: MulterInstance;\n\n    constructor(\n      @Optional()\n      @Inject(MULTER_MODULE_OPTIONS)\n      options: MulterModuleOptions = {},\n    ) {\n      this.multer = (multer as any)({\n        ...options,\n        ...localOptions,\n      });\n    }\n\n    async intercept(\n      context: ExecutionContext,\n      next: CallHandler,\n    ): Promise<Observable<any>> {\n      const ctx = context.switchToHttp();\n\n      await new Promise<void>((resolve, reject) =>\n        this.multer.single(fieldName)(\n          ctx.getRequest(),\n          ctx.getResponse(),\n          (err: any) => {\n            if (err) {\n              const error = transformException(err);\n              return reject(error);\n            }\n            resolve();\n          },\n        ),\n      );\n      return next.handle();\n    }\n  }\n  const Interceptor = mixin(MixinInterceptor);\n  return Interceptor;\n}\n"]}