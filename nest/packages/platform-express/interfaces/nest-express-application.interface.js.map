{"version":3,"file":"nest-express-application.interface.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/platform-express/","sources":["interfaces/nest-express-application.interface.ts"],"names":[],"mappings":"","sourcesContent":["import { Server } from 'http';\nimport { INestApplication } from '@nestjs/common';\nimport { NestExpressBodyParserOptions } from './nest-express-body-parser-options.interface';\nimport { ServeStaticOptions } from './serve-static-options.interface';\nimport { NestExpressBodyParserType } from './nest-express-body-parser.interface';\n\n/**\n * Interface describing methods on NestExpressApplication.\n *\n * @see [Platform](https://docs.nestjs.com/first-steps#platform)\n *\n * @publicApi\n */\nexport interface NestExpressApplication extends INestApplication {\n  /**\n   * Starts the application.\n   *\n   * @param {number|string} port\n   * @param {string} [hostname]\n   * @param {Function} [callback] Optional callback\n   * @returns {Promise} A Promise that, when resolved, is a reference to the underlying HttpServer.\n   */\n  listen(port: number | string, callback?: () => void): Promise<Server>;\n  listen(\n    port: number | string,\n    hostname: string,\n    callback?: () => void,\n  ): Promise<Server>;\n\n  /**\n   * A wrapper function around native `express.set()` method.\n   *\n   * @example\n   * app.set('trust proxy', 'loopback')\n   *\n   * @returns {this}\n   */\n  set(...args: any[]): this;\n\n  /**\n   * A wrapper function around native `express.engine()` method.\n   * @example\n   * app.engine('mustache', mustacheExpress())\n   *\n   * @returns {this}\n   */\n  engine(...args: any[]): this;\n\n  /**\n   * A wrapper function around native `express.enable()` method.\n   * @example\n   * app.enable('x-powered-by')\n   *\n   * @returns {this}\n   */\n  enable(...args: any[]): this;\n\n  /**\n   * A wrapper function around native `express.disable()` method.\n   *\n   * @example\n   * app.disable('x-powered-by')\n   *\n   * @returns {this}\n   */\n  disable(...args: any[]): this;\n\n  useStaticAssets(options: ServeStaticOptions): this;\n  /**\n   * Sets a base directory for public assets.\n   * @example\n   * app.useStaticAssets('public')\n   *\n   * @returns {this}\n   */\n  useStaticAssets(path: string, options?: ServeStaticOptions): this;\n\n  /**\n   * Register Express body parsers on the fly. Will respect\n   * the application's `rawBody` option.\n   *\n   * @example\n   * const app = await NestFactory.create<NestExpressApplication>(\n   *   AppModule,\n   *   { rawBody: true }\n   * );\n   * app.useBodyParser('json', { limit: '50mb' });\n   *\n   * @returns {this}\n   */\n  useBodyParser<Options = NestExpressBodyParserOptions>(\n    parser: NestExpressBodyParserType,\n    options?: Omit<Options, 'verify'>,\n  ): this;\n\n  /**\n   * Sets one or multiple base directories for templates (views).\n   *\n   * @example\n   * app.setBaseViewsDir('views')\n   *\n   * @returns {this}\n   */\n  setBaseViewsDir(path: string | string[]): this;\n\n  /**\n   * Sets a view engine for templates (views).\n   * @example\n   * app.setViewEngine('pug')\n   *\n   * @returns {this}\n   */\n  setViewEngine(engine: string): this;\n\n  /**\n   * Sets app-level globals for view templates.\n   *\n   * @example\n   * app.setLocal('title', 'My Site')\n   *\n   * @see https://expressjs.com/en/4x/api.html#app.locals\n   *\n   * @returns {this}\n   */\n  setLocal(key: string, value: any): this;\n}\n"]}