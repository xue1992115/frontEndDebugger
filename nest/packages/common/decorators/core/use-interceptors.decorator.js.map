{"version":3,"file":"use-interceptors.decorator.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/common/","sources":["decorators/core/use-interceptors.decorator.ts"],"names":[],"mappings":";;;AAAA,+CAAwD;AAExD,2EAAuE;AACvE,2DAAsD;AACtD,uEAA8D;AAE9D;;;;;;;;;;;;;;;;;;;;GAoBG;AACH,SAAgB,eAAe,CAC7B,GAAG,YAA4C;IAE/C,OAAO,CACL,MAAW,EACX,GAAqB,EACrB,UAAyC,EACzC,EAAE;QACF,MAAM,kBAAkB,GAAG,CACzB,WAAc,EACd,EAAE,CACF,WAAW;YACX,CAAC,IAAA,yBAAU,EAAC,WAAW,CAAC;gBACtB,IAAA,yBAAU,EAAE,WAAmC,CAAC,SAAS,CAAC,CAAC,CAAC;QAEhE,IAAI,UAAU,EAAE;YACd,IAAA,iCAAY,EACV,MAAM,CAAC,WAAW,EAClB,YAAY,EACZ,kBAAkB,EAClB,kBAAkB,EAClB,aAAa,CACd,CAAC;YACF,IAAA,0CAAmB,EACjB,iCAAqB,EACrB,YAAY,EACZ,UAAU,CAAC,KAAK,CACjB,CAAC;YACF,OAAO,UAAU,CAAC;SACnB;QACD,IAAA,iCAAY,EACV,MAAM,EACN,YAAY,EACZ,kBAAkB,EAClB,kBAAkB,EAClB,aAAa,CACd,CAAC;QACF,IAAA,0CAAmB,EAAC,iCAAqB,EAAE,YAAY,EAAE,MAAM,CAAC,CAAC;QACjE,OAAO,MAAM,CAAC;IAChB,CAAC,CAAC;AACJ,CAAC;AAxCD,0CAwCC","sourcesContent":["import { INTERCEPTORS_METADATA } from '../../constants';\nimport { NestInterceptor } from '../../interfaces';\nimport { extendArrayMetadata } from '../../utils/extend-metadata.util';\nimport { isFunction } from '../../utils/shared.utils';\nimport { validateEach } from '../../utils/validate-each.util';\n\n/**\n * Decorator that binds interceptors to the scope of the controller or method,\n * depending on its context.\n *\n * When `@UseInterceptors` is used at the controller level, the interceptor will\n * be applied to every handler (method) in the controller.\n *\n * When `@UseInterceptors` is used at the individual handler level, the interceptor\n * will apply only to that specific method.\n *\n * @param interceptors a single interceptor instance or class, or a list of\n * interceptor instances or classes.\n *\n * @see [Interceptors](https://docs.nestjs.com/interceptors)\n *\n * @usageNotes\n * Interceptors can also be set up globally for all controllers and routes\n * using `app.useGlobalInterceptors()`.  [See here for details](https://docs.nestjs.com/interceptors#binding-interceptors)\n *\n * @publicApi\n */\nexport function UseInterceptors(\n  ...interceptors: (NestInterceptor | Function)[]\n): MethodDecorator & ClassDecorator {\n  return (\n    target: any,\n    key?: string | symbol,\n    descriptor?: TypedPropertyDescriptor<any>,\n  ) => {\n    const isInterceptorValid = <T extends Function | Record<string, any>>(\n      interceptor: T,\n    ) =>\n      interceptor &&\n      (isFunction(interceptor) ||\n        isFunction((interceptor as Record<string, any>).intercept));\n\n    if (descriptor) {\n      validateEach(\n        target.constructor,\n        interceptors,\n        isInterceptorValid,\n        '@UseInterceptors',\n        'interceptor',\n      );\n      extendArrayMetadata(\n        INTERCEPTORS_METADATA,\n        interceptors,\n        descriptor.value,\n      );\n      return descriptor;\n    }\n    validateEach(\n      target,\n      interceptors,\n      isInterceptorValid,\n      '@UseInterceptors',\n      'interceptor',\n    );\n    extendArrayMetadata(INTERCEPTORS_METADATA, interceptors, target);\n    return target;\n  };\n}\n"]}