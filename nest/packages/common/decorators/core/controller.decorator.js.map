{"version":3,"file":"controller.decorator.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/common/","sources":["decorators/core/controller.decorator.ts"],"names":[],"mappings":";;;AAAA,+CAMyB;AAEzB,2DAAiE;AA4GjE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiCG;AACH,SAAgB,UAAU,CACxB,eAAuD;IAEvD,MAAM,WAAW,GAAG,GAAG,CAAC;IAExB,MAAM,CAAC,IAAI,EAAE,IAAI,EAAE,YAAY,EAAE,cAAc,CAAC,GAAG,IAAA,0BAAW,EAC5D,eAAe,CAChB;QACC,CAAC,CAAC,CAAC,WAAW,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;QAChD,CAAC,CAAC,IAAA,uBAAQ,EAAC,eAAe,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,eAAe,CAAC;YAC7D,CAAC,CAAC,CAAC,eAAe,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;YACpD,CAAC,CAAC;gBACE,eAAe,CAAC,IAAI,IAAI,WAAW;gBACnC,eAAe,CAAC,IAAI;gBACpB,EAAE,KAAK,EAAE,eAAe,CAAC,KAAK,EAAE,OAAO,EAAE,eAAe,CAAC,OAAO,EAAE;gBAClE,KAAK,CAAC,OAAO,CAAC,eAAe,CAAC,OAAO,CAAC;oBACpC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;oBAC9C,CAAC,CAAC,eAAe,CAAC,OAAO;aAC5B,CAAC;IAEN,OAAO,CAAC,MAAc,EAAE,EAAE;QACxB,OAAO,CAAC,cAAc,CAAC,gCAAoB,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;QAC3D,OAAO,CAAC,cAAc,CAAC,yBAAa,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;QACpD,OAAO,CAAC,cAAc,CAAC,yBAAa,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;QACpD,OAAO,CAAC,cAAc,CAAC,kCAAsB,EAAE,YAAY,EAAE,MAAM,CAAC,CAAC;QACrE,OAAO,CAAC,cAAc,CAAC,4BAAgB,EAAE,cAAc,EAAE,MAAM,CAAC,CAAC;IACnE,CAAC,CAAC;AACJ,CAAC;AA3BD,gCA2BC","sourcesContent":["import {\n  CONTROLLER_WATERMARK,\n  HOST_METADATA,\n  PATH_METADATA,\n  SCOPE_OPTIONS_METADATA,\n  VERSION_METADATA,\n} from '../../constants';\nimport { ScopeOptions, VersionOptions } from '../../interfaces';\nimport { isString, isUndefined } from '../../utils/shared.utils';\n\n/**\n * Interface defining options that can be passed to `@Controller()` decorator\n *\n * @publicApi\n */\nexport interface ControllerOptions extends ScopeOptions, VersionOptions {\n  /**\n   * Specifies an optional `route path prefix`.  The prefix is pre-pended to the\n   * path specified in any request decorator in the class.\n   *\n   * Supported only by HTTP-based applications (does not apply to non-HTTP microservices).\n   *\n   * @see [Routing](https://docs.nestjs.com/controllers#routing)\n   */\n  path?: string | string[];\n\n  /**\n   * Specifies an optional HTTP Request host filter.  When configured, methods\n   * within the controller will only be routed if the request host matches the\n   * specified value.\n   *\n   * @see [Routing](https://docs.nestjs.com/controllers#routing)\n   */\n  host?: string | RegExp | Array<string | RegExp>;\n}\n\n/**\n * Decorator that marks a class as a Nest controller that can receive inbound\n * requests and produce responses.\n *\n * An HTTP Controller responds to inbound HTTP Requests and produces HTTP Responses.\n * It defines a class that provides the context for one or more related route\n * handlers that correspond to HTTP request methods and associated routes\n * for example `GET /api/profile`, `POST /users/resume`.\n *\n * A Microservice Controller responds to requests as well as events, running over\n * a variety of transports [(read more here)](https://docs.nestjs.com/microservices/basics).\n * It defines a class that provides a context for one or more message or event\n * handlers.\n *\n * @see [Controllers](https://docs.nestjs.com/controllers)\n * @see [Microservices](https://docs.nestjs.com/microservices/basics#request-response)\n *\n * @publicApi\n */\nexport function Controller(): ClassDecorator;\n\n/**\n * Decorator that marks a class as a Nest controller that can receive inbound\n * requests and produce responses.\n *\n * An HTTP Controller responds to inbound HTTP Requests and produces HTTP Responses.\n * It defines a class that provides the context for one or more related route\n * handlers that correspond to HTTP request methods and associated routes\n * for example `GET /api/profile`, `POST /users/resume`.\n *\n * A Microservice Controller responds to requests as well as events, running over\n * a variety of transports [(read more here)](https://docs.nestjs.com/microservices/basics).\n * It defines a class that provides a context for one or more message or event\n * handlers.\n *\n * @param {string|Array} prefix string that defines a `route path prefix`.  The prefix\n * is pre-pended to the path specified in any request decorator in the class.\n *\n * @see [Routing](https://docs.nestjs.com/controllers#routing)\n * @see [Controllers](https://docs.nestjs.com/controllers)\n * @see [Microservices](https://docs.nestjs.com/microservices/basics#request-response)\n *\n * @publicApi\n */\nexport function Controller(prefix: string | string[]): ClassDecorator;\n\n/**\n * Decorator that marks a class as a Nest controller that can receive inbound\n * requests and produce responses.\n *\n * An HTTP Controller responds to inbound HTTP Requests and produces HTTP Responses.\n * It defines a class that provides the context for one or more related route\n * handlers that correspond to HTTP request methods and associated routes\n * for example `GET /api/profile`, `POST /users/resume`.\n *\n * A Microservice Controller responds to requests as well as events, running over\n * a variety of transports [(read more here)](https://docs.nestjs.com/microservices/basics).\n * It defines a class that provides a context for one or more message or event\n * handlers.\n *\n * @param {object} options configuration object specifying:\n *\n * - `scope` - symbol that determines the lifetime of a Controller instance.\n * [See Scope](https://docs.nestjs.com/fundamentals/injection-scopes#usage) for\n * more details.\n * - `prefix` - string that defines a `route path prefix`.  The prefix\n * is pre-pended to the path specified in any request decorator in the class.\n * - `version` - string, array of strings, or Symbol that defines the version\n * of all routes in the class. [See Versioning](https://docs.nestjs.com/techniques/versioning)\n * for more details.\n *\n * @see [Routing](https://docs.nestjs.com/controllers#routing)\n * @see [Controllers](https://docs.nestjs.com/controllers)\n * @see [Microservices](https://docs.nestjs.com/microservices/basics#request-response)\n * @see [Versioning](https://docs.nestjs.com/techniques/versioning)\n *\n * @publicApi\n */\nexport function Controller(options: ControllerOptions): ClassDecorator;\n\n/**\n * Decorator that marks a class as a Nest controller that can receive inbound\n * requests and produce responses.\n *\n * An HTTP Controller responds to inbound HTTP Requests and produces HTTP Responses.\n * It defines a class that provides the context for one or more related route\n * handlers that correspond to HTTP request methods and associated routes\n * for example `GET /api/profile`, `POST /users/resume`\n *\n * A Microservice Controller responds to requests as well as events, running over\n * a variety of transports [(read more here)](https://docs.nestjs.com/microservices/basics).\n * It defines a class that provides a context for one or more message or event\n * handlers.\n *\n * @param prefixOrOptions a `route path prefix` or a `ControllerOptions` object.\n * A `route path prefix` is pre-pended to the path specified in any request decorator\n * in the class. `ControllerOptions` is an options configuration object specifying:\n * - `scope` - symbol that determines the lifetime of a Controller instance.\n * [See Scope](https://docs.nestjs.com/fundamentals/injection-scopes#usage) for\n * more details.\n * - `prefix` - string that defines a `route path prefix`.  The prefix\n * is pre-pended to the path specified in any request decorator in the class.\n * - `version` - string, array of strings, or Symbol that defines the version\n * of all routes in the class. [See Versioning](https://docs.nestjs.com/techniques/versioning)\n * for more details.\n *\n * @see [Routing](https://docs.nestjs.com/controllers#routing)\n * @see [Controllers](https://docs.nestjs.com/controllers)\n * @see [Microservices](https://docs.nestjs.com/microservices/basics#request-response)\n * @see [Scope](https://docs.nestjs.com/fundamentals/injection-scopes#usage)\n * @see [Versioning](https://docs.nestjs.com/techniques/versioning)\n *\n * @publicApi\n */\nexport function Controller(\n  prefixOrOptions?: string | string[] | ControllerOptions,\n): ClassDecorator {\n  const defaultPath = '/';\n\n  const [path, host, scopeOptions, versionOptions] = isUndefined(\n    prefixOrOptions,\n  )\n    ? [defaultPath, undefined, undefined, undefined]\n    : isString(prefixOrOptions) || Array.isArray(prefixOrOptions)\n    ? [prefixOrOptions, undefined, undefined, undefined]\n    : [\n        prefixOrOptions.path || defaultPath,\n        prefixOrOptions.host,\n        { scope: prefixOrOptions.scope, durable: prefixOrOptions.durable },\n        Array.isArray(prefixOrOptions.version)\n          ? Array.from(new Set(prefixOrOptions.version))\n          : prefixOrOptions.version,\n      ];\n\n  return (target: object) => {\n    Reflect.defineMetadata(CONTROLLER_WATERMARK, true, target);\n    Reflect.defineMetadata(PATH_METADATA, path, target);\n    Reflect.defineMetadata(HOST_METADATA, host, target);\n    Reflect.defineMetadata(SCOPE_OPTIONS_METADATA, scopeOptions, target);\n    Reflect.defineMetadata(VERSION_METADATA, versionOptions, target);\n  };\n}\n"]}