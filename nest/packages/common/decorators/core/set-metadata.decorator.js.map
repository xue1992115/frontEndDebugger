{"version":3,"file":"set-metadata.decorator.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/common/","sources":["decorators/core/set-metadata.decorator.ts"],"names":[],"mappings":";;;AAKA;;;;;;;;;;;;;;;GAeG;AACI,MAAM,WAAW,GAAG,CACzB,WAAc,EACd,aAAgB,EACI,EAAE;IACtB,MAAM,gBAAgB,GAAG,CAAC,MAAc,EAAE,GAAS,EAAE,UAAgB,EAAE,EAAE;QACvE,IAAI,UAAU,EAAE;YACd,OAAO,CAAC,cAAc,CAAC,WAAW,EAAE,aAAa,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC;YACrE,OAAO,UAAU,CAAC;SACnB;QACD,OAAO,CAAC,cAAc,CAAC,WAAW,EAAE,aAAa,EAAE,MAAM,CAAC,CAAC;QAC3D,OAAO,MAAM,CAAC;IAChB,CAAC,CAAC;IACF,gBAAgB,CAAC,GAAG,GAAG,WAAW,CAAC;IACnC,OAAO,gBAAgB,CAAC;AAC1B,CAAC,CAAC;AAdW,QAAA,WAAW,eActB","sourcesContent":["export type CustomDecorator<TKey = string> = MethodDecorator &\n  ClassDecorator & {\n    KEY: TKey;\n  };\n\n/**\n * Decorator that assigns metadata to the class/function using the\n * specified `key`.\n *\n * Requires two parameters:\n * - `key` - a value defining the key under which the metadata is stored\n * - `value` - metadata to be associated with `key`\n *\n * This metadata can be reflected using the `Reflector` class.\n *\n * Example: `@SetMetadata('roles', ['admin'])`\n *\n * @see [Reflection](https://docs.nestjs.com/guards#reflection)\n *\n * @publicApi\n */\nexport const SetMetadata = <K = string, V = any>(\n  metadataKey: K,\n  metadataValue: V,\n): CustomDecorator<K> => {\n  const decoratorFactory = (target: object, key?: any, descriptor?: any) => {\n    if (descriptor) {\n      Reflect.defineMetadata(metadataKey, metadataValue, descriptor.value);\n      return descriptor;\n    }\n    Reflect.defineMetadata(metadataKey, metadataValue, target);\n    return target;\n  };\n  decoratorFactory.KEY = metadataKey;\n  return decoratorFactory;\n};\n"]}