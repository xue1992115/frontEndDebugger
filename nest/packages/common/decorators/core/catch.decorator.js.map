{"version":3,"file":"catch.decorator.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/common/","sources":["decorators/core/catch.decorator.ts"],"names":[],"mappings":";;;AAAA,+CAA2E;AAG3E;;;;;;;;;;;;;;;;GAgBG;AACH,SAAgB,KAAK,CACnB,GAAG,UAA4C;IAE/C,OAAO,CAAC,MAAc,EAAE,EAAE;QACxB,OAAO,CAAC,cAAc,CAAC,2BAAe,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;QACtD,OAAO,CAAC,cAAc,CAAC,mCAAuB,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC;IACtE,CAAC,CAAC;AACJ,CAAC;AAPD,sBAOC","sourcesContent":["import { CATCH_WATERMARK, FILTER_CATCH_EXCEPTIONS } from '../../constants';\nimport { Type, Abstract } from '../../interfaces';\n\n/**\n * Decorator that marks a class as a Nest exception filter. An exception filter\n * handles exceptions thrown by or not handled by your application code.\n *\n * The decorated class must implement the `ExceptionFilter` interface.\n *\n * @param exceptions one or more exception *types* specifying\n * the exceptions to be caught and handled by this filter.\n *\n * @see [Exception Filters](https://docs.nestjs.com/exception-filters)\n *\n * @usageNotes\n * Exception filters are applied using the `@UseFilters()` decorator, or (globally)\n * with `app.useGlobalFilters()`.\n *\n * @publicApi\n */\nexport function Catch(\n  ...exceptions: Array<Type<any> | Abstract<any>>\n): ClassDecorator {\n  return (target: object) => {\n    Reflect.defineMetadata(CATCH_WATERMARK, true, target);\n    Reflect.defineMetadata(FILTER_CATCH_EXCEPTIONS, exceptions, target);\n  };\n}\n"]}