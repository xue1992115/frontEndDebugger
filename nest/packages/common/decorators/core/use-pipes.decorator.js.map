{"version":3,"file":"use-pipes.decorator.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/common/","sources":["decorators/core/use-pipes.decorator.ts"],"names":[],"mappings":";;;AAAA,+CAAiD;AAEjD,2EAAuE;AACvE,2DAAsD;AACtD,uEAA8D;AAE9D;;;;;;;;;;;;;;;;;;;;GAoBG;AAEH,SAAgB,QAAQ,CACtB,GAAG,KAAmC;IAEtC,OAAO,CACL,MAAW,EACX,GAAqB,EACrB,UAAyC,EACzC,EAAE;QACF,MAAM,WAAW,GAAG,CAA2C,IAAO,EAAE,EAAE,CACxE,IAAI;YACJ,CAAC,IAAA,yBAAU,EAAC,IAAI,CAAC,IAAI,IAAA,yBAAU,EAAE,IAA4B,CAAC,SAAS,CAAC,CAAC,CAAC;QAE5E,IAAI,UAAU,EAAE;YACd,IAAA,0CAAmB,EAAC,0BAAc,EAAE,KAAK,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC;YAC7D,OAAO,UAAU,CAAC;SACnB;QACD,IAAA,iCAAY,EAAC,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,WAAW,EAAE,MAAM,CAAC,CAAC;QAC9D,IAAA,0CAAmB,EAAC,0BAAc,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;QACnD,OAAO,MAAM,CAAC;IAChB,CAAC,CAAC;AACJ,CAAC;AApBD,4BAoBC","sourcesContent":["import { PIPES_METADATA } from '../../constants';\nimport { PipeTransform } from '../../interfaces/index';\nimport { extendArrayMetadata } from '../../utils/extend-metadata.util';\nimport { isFunction } from '../../utils/shared.utils';\nimport { validateEach } from '../../utils/validate-each.util';\n\n/**\n * Decorator that binds pipes to the scope of the controller or method,\n * depending on its context.\n *\n * When `@UsePipes` is used at the controller level, the pipe will be\n * applied to every handler (method) in the controller.\n *\n * When `@UsePipes` is used at the individual handler level, the pipe\n * will apply only to that specific method.\n *\n * @param pipes a single pipe instance or class, or a list of pipe instances or\n * classes.\n *\n * @see [Pipes](https://docs.nestjs.com/pipes)\n *\n * @usageNotes\n * Pipes can also be set up globally for all controllers and routes\n * using `app.useGlobalPipes()`.  [See here for details](https://docs.nestjs.com/pipes#class-validator)\n *\n * @publicApi\n */\n\nexport function UsePipes(\n  ...pipes: (PipeTransform | Function)[]\n): ClassDecorator & MethodDecorator {\n  return (\n    target: any,\n    key?: string | symbol,\n    descriptor?: TypedPropertyDescriptor<any>,\n  ) => {\n    const isPipeValid = <T extends Function | Record<string, any>>(pipe: T) =>\n      pipe &&\n      (isFunction(pipe) || isFunction((pipe as Record<string, any>).transform));\n\n    if (descriptor) {\n      extendArrayMetadata(PIPES_METADATA, pipes, descriptor.value);\n      return descriptor;\n    }\n    validateEach(target, pipes, isPipeValid, '@UsePipes', 'pipe');\n    extendArrayMetadata(PIPES_METADATA, pipes, target);\n    return target;\n  };\n}\n"]}