{"version":3,"file":"inject.decorator.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/common/","sources":["decorators/core/inject.decorator.ts"],"names":[],"mappings":";;;AAAA,+CAGyB;AACzB,2DAAuD;AAEvD;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4BG;AACH,SAAgB,MAAM,CAAU,KAAS;IACvC,OAAO,CAAC,MAAc,EAAE,GAAgC,EAAE,KAAc,EAAE,EAAE;QAC1E,MAAM,IAAI,GAAG,KAAK,IAAI,OAAO,CAAC,WAAW,CAAC,aAAa,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC;QAEtE,IAAI,CAAC,IAAA,0BAAW,EAAC,KAAK,CAAC,EAAE;YACvB,IAAI,YAAY,GACd,OAAO,CAAC,WAAW,CAAC,uCAA2B,EAAE,MAAM,CAAC,IAAI,EAAE,CAAC;YAEjE,YAAY,GAAG,CAAC,GAAG,YAAY,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;YACzD,OAAO,CAAC,cAAc,CAAC,uCAA2B,EAAE,YAAY,EAAE,MAAM,CAAC,CAAC;YAC1E,OAAO;SACR;QACD,IAAI,UAAU,GACZ,OAAO,CAAC,WAAW,CAAC,kCAAsB,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;QAExE,UAAU,GAAG,CAAC,GAAG,UAAU,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;QAC5C,OAAO,CAAC,cAAc,CACpB,kCAAsB,EACtB,UAAU,EACV,MAAM,CAAC,WAAW,CACnB,CAAC;IACJ,CAAC,CAAC;AACJ,CAAC;AAtBD,wBAsBC","sourcesContent":["import {\n  PROPERTY_DEPS_METADATA,\n  SELF_DECLARED_DEPS_METADATA,\n} from '../../constants';\nimport { isUndefined } from '../../utils/shared.utils';\n\n/**\n * Decorator that marks a constructor parameter as a target for\n * [Dependency Injection (DI)](https://docs.nestjs.com/providers#dependency-injection).\n *\n * Any injected provider must be visible within the module scope (loosely\n * speaking, the containing module) of the class it is being injected into. This\n * can be done by:\n *\n * - defining the provider in the same module scope\n * - exporting the provider from one module scope and importing that module into the\n *   module scope of the class being injected into\n * - exporting the provider from a module that is marked as global using the\n *   `@Global()` decorator\n *\n * #### Injection tokens\n * Can be *types* (class names), *strings* or *symbols*. This depends on how the\n * provider with which it is associated was defined. Providers defined with the\n * `@Injectable()` decorator use the class name. Custom Providers may use strings\n * or symbols as the injection token.\n *\n * @param token lookup key for the provider to be injected (assigned to the constructor\n * parameter).\n *\n * @see [Providers](https://docs.nestjs.com/providers)\n * @see [Custom Providers](https://docs.nestjs.com/fundamentals/custom-providers)\n * @see [Injection Scopes](https://docs.nestjs.com/fundamentals/injection-scopes)\n *\n * @publicApi\n */\nexport function Inject<T = any>(token?: T) {\n  return (target: object, key: string | symbol | undefined, index?: number) => {\n    const type = token || Reflect.getMetadata('design:type', target, key);\n\n    if (!isUndefined(index)) {\n      let dependencies =\n        Reflect.getMetadata(SELF_DECLARED_DEPS_METADATA, target) || [];\n\n      dependencies = [...dependencies, { index, param: type }];\n      Reflect.defineMetadata(SELF_DECLARED_DEPS_METADATA, dependencies, target);\n      return;\n    }\n    let properties =\n      Reflect.getMetadata(PROPERTY_DEPS_METADATA, target.constructor) || [];\n\n    properties = [...properties, { key, type }];\n    Reflect.defineMetadata(\n      PROPERTY_DEPS_METADATA,\n      properties,\n      target.constructor,\n    );\n  };\n}\n"]}