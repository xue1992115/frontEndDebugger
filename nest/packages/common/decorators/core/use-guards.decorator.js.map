{"version":3,"file":"use-guards.decorator.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/common/","sources":["decorators/core/use-guards.decorator.ts"],"names":[],"mappings":";;;AAAA,+CAAkD;AAElD,2EAAuE;AACvE,2DAAsD;AACtD,uEAA8D;AAE9D;;;;;;;;;;;;;;;;;;;;GAoBG;AACH,SAAgB,SAAS,CACvB,GAAG,MAAkC;IAErC,OAAO,CACL,MAAW,EACX,GAAqB,EACrB,UAAyC,EACzC,EAAE;QACF,MAAM,YAAY,GAAG,CAA2C,KAAQ,EAAE,EAAE,CAC1E,KAAK;YACL,CAAC,IAAA,yBAAU,EAAC,KAAK,CAAC;gBAChB,IAAA,yBAAU,EAAE,KAA6B,CAAC,WAAW,CAAC,CAAC,CAAC;QAE5D,IAAI,UAAU,EAAE;YACd,IAAA,iCAAY,EACV,MAAM,CAAC,WAAW,EAClB,MAAM,EACN,YAAY,EACZ,YAAY,EACZ,OAAO,CACR,CAAC;YACF,IAAA,0CAAmB,EAAC,2BAAe,EAAE,MAAM,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC;YAC/D,OAAO,UAAU,CAAC;SACnB;QACD,IAAA,iCAAY,EAAC,MAAM,EAAE,MAAM,EAAE,YAAY,EAAE,YAAY,EAAE,OAAO,CAAC,CAAC;QAClE,IAAA,0CAAmB,EAAC,2BAAe,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;QACrD,OAAO,MAAM,CAAC;IAChB,CAAC,CAAC;AACJ,CAAC;AA5BD,8BA4BC","sourcesContent":["import { GUARDS_METADATA } from '../../constants';\nimport { CanActivate } from '../../interfaces';\nimport { extendArrayMetadata } from '../../utils/extend-metadata.util';\nimport { isFunction } from '../../utils/shared.utils';\nimport { validateEach } from '../../utils/validate-each.util';\n\n/**\n * Decorator that binds guards to the scope of the controller or method,\n * depending on its context.\n *\n * When `@UseGuards` is used at the controller level, the guard will be\n * applied to every handler (method) in the controller.\n *\n * When `@UseGuards` is used at the individual handler level, the guard\n * will apply only to that specific method.\n *\n * @param guards a single guard instance or class, or a list of guard instances\n * or classes.\n *\n * @see [Guards](https://docs.nestjs.com/guards)\n *\n * @usageNotes\n * Guards can also be set up globally for all controllers and routes\n * using `app.useGlobalGuards()`.  [See here for details](https://docs.nestjs.com/guards#binding-guards)\n *\n * @publicApi\n */\nexport function UseGuards(\n  ...guards: (CanActivate | Function)[]\n): MethodDecorator & ClassDecorator {\n  return (\n    target: any,\n    key?: string | symbol,\n    descriptor?: TypedPropertyDescriptor<any>,\n  ) => {\n    const isGuardValid = <T extends Function | Record<string, any>>(guard: T) =>\n      guard &&\n      (isFunction(guard) ||\n        isFunction((guard as Record<string, any>).canActivate));\n\n    if (descriptor) {\n      validateEach(\n        target.constructor,\n        guards,\n        isGuardValid,\n        '@UseGuards',\n        'guard',\n      );\n      extendArrayMetadata(GUARDS_METADATA, guards, descriptor.value);\n      return descriptor;\n    }\n    validateEach(target, guards, isGuardValid, '@UseGuards', 'guard');\n    extendArrayMetadata(GUARDS_METADATA, guards, target);\n    return target;\n  };\n}\n"]}