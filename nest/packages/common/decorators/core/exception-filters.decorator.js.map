{"version":3,"file":"exception-filters.decorator.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/common/","sources":["decorators/core/exception-filters.decorator.ts"],"names":[],"mappings":";;;AAAA,4DAA4D;AAC5D,+CAA6D;AAE7D,2EAAuE;AACvE,2DAAsD;AACtD,uEAA8D;AAE9D;;;;;;;;;;;;;;;;;;;;GAoBG;AAEI,MAAM,UAAU,GAAG,CAAC,GAAG,OAAuC,EAAE,EAAE,CACvE,2BAA2B,CAAC,GAAG,OAAO,CAAC,CAAC;AAD7B,QAAA,UAAU,cACmB;AAE1C,SAAS,2BAA2B,CAClC,GAAG,OAAuC;IAE1C,OAAO,CACL,MAAW,EACX,GAAqB,EACrB,UAAyC,EACzC,EAAE;QACF,MAAM,aAAa,GAAG,CACpB,MAAS,EACT,EAAE,CACF,MAAM;YACN,CAAC,IAAA,yBAAU,EAAC,MAAM,CAAC,IAAI,IAAA,yBAAU,EAAE,MAA8B,CAAC,KAAK,CAAC,CAAC,CAAC;QAE5E,IAAI,UAAU,EAAE;YACd,IAAA,iCAAY,EACV,MAAM,CAAC,WAAW,EAClB,OAAO,EACP,aAAa,EACb,aAAa,EACb,QAAQ,CACT,CAAC;YACF,IAAA,0CAAmB,EACjB,sCAA0B,EAC1B,OAAO,EACP,UAAU,CAAC,KAAK,CACjB,CAAC;YACF,OAAO,UAAU,CAAC;SACnB;QACD,IAAA,iCAAY,EAAC,MAAM,EAAE,OAAO,EAAE,aAAa,EAAE,aAAa,EAAE,QAAQ,CAAC,CAAC;QACtE,IAAA,0CAAmB,EAAC,sCAA0B,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;QACjE,OAAO,MAAM,CAAC;IAChB,CAAC,CAAC;AACJ,CAAC","sourcesContent":["/* eslint-disable @typescript-eslint/no-use-before-define */\nimport { EXCEPTION_FILTERS_METADATA } from '../../constants';\nimport { ExceptionFilter } from '../../index';\nimport { extendArrayMetadata } from '../../utils/extend-metadata.util';\nimport { isFunction } from '../../utils/shared.utils';\nimport { validateEach } from '../../utils/validate-each.util';\n\n/**\n * Decorator that binds exception filters to the scope of the controller or\n * method, depending on its context.\n *\n * When `@UseFilters` is used at the controller level, the filter will be\n * applied to every handler (method) in the controller.\n *\n * When `@UseFilters` is used at the individual handler level, the filter\n * will apply only to that specific method.\n *\n * @param filters exception filter instance or class, or a list of exception\n * filter instances or classes.\n *\n * @see [Exception filters](https://docs.nestjs.com/exception-filters)\n *\n * @usageNotes\n * Exception filters can also be set up globally for all controllers and routes\n * using `app.useGlobalFilters()`.  [See here for details](https://docs.nestjs.com/exception-filters#binding-filters)\n *\n * @publicApi\n */\n\nexport const UseFilters = (...filters: (ExceptionFilter | Function)[]) =>\n  addExceptionFiltersMetadata(...filters);\n\nfunction addExceptionFiltersMetadata(\n  ...filters: (Function | ExceptionFilter)[]\n): MethodDecorator & ClassDecorator {\n  return (\n    target: any,\n    key?: string | symbol,\n    descriptor?: TypedPropertyDescriptor<any>,\n  ) => {\n    const isFilterValid = <T extends Function | Record<string, any>>(\n      filter: T,\n    ) =>\n      filter &&\n      (isFunction(filter) || isFunction((filter as Record<string, any>).catch));\n\n    if (descriptor) {\n      validateEach(\n        target.constructor,\n        filters,\n        isFilterValid,\n        '@UseFilters',\n        'filter',\n      );\n      extendArrayMetadata(\n        EXCEPTION_FILTERS_METADATA,\n        filters,\n        descriptor.value,\n      );\n      return descriptor;\n    }\n    validateEach(target, filters, isFilterValid, '@UseFilters', 'filter');\n    extendArrayMetadata(EXCEPTION_FILTERS_METADATA, filters, target);\n    return target;\n  };\n}\n"]}