{"version":3,"file":"route-params.decorator.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/common/","sources":["decorators/http/route-params.decorator.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  RESPONSE_PASSTHROUGH_METADATA,\n  ROUTE_ARGS_METADATA,\n} from '../../constants';\nimport { RouteParamtypes } from '../../enums/route-paramtypes.enum';\nimport { PipeTransform } from '../../index';\nimport { Type } from '../../interfaces';\nimport { isNil, isString } from '../../utils/shared.utils';\n\n/**\n * The `@Response()`/`@Res` parameter decorator options.\n */\nexport interface ResponseDecoratorOptions {\n  /**\n   * Determines whether the response will be sent manually within the route handler,\n   * with the use of native response handling methods exposed by the platform-specific response object,\n   * or if it should passthrough Nest response processing pipeline.\n   *\n   * @default false\n   */\n  passthrough: boolean;\n}\n\nexport type ParamData = object | string | number;\nexport interface RouteParamMetadata {\n  index: number;\n  data?: ParamData;\n}\n\nexport function assignMetadata<TParamtype = any, TArgs = any>(\n  args: TArgs,\n  paramtype: TParamtype,\n  index: number,\n  data?: ParamData,\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\n) {\n  return {\n    ...args,\n    [`${paramtype}:${index}`]: {\n      index,\n      data,\n      pipes,\n    },\n  };\n}\n\nfunction createRouteParamDecorator(paramtype: RouteParamtypes) {\n  return (data?: ParamData): ParameterDecorator =>\n    (target, key, index) => {\n      const args =\n        Reflect.getMetadata(ROUTE_ARGS_METADATA, target.constructor, key) || {};\n      Reflect.defineMetadata(\n        ROUTE_ARGS_METADATA,\n        assignMetadata<RouteParamtypes, Record<number, RouteParamMetadata>>(\n          args,\n          paramtype,\n          index,\n          data,\n        ),\n        target.constructor,\n        key,\n      );\n    };\n}\n\nconst createPipesRouteParamDecorator =\n  (paramtype: RouteParamtypes) =>\n  (\n    data?: any,\n    ...pipes: (Type<PipeTransform> | PipeTransform)[]\n  ): ParameterDecorator =>\n  (target, key, index) => {\n    const args =\n      Reflect.getMetadata(ROUTE_ARGS_METADATA, target.constructor, key) || {};\n    const hasParamData = isNil(data) || isString(data);\n    const paramData = hasParamData ? data : undefined;\n    const paramPipes = hasParamData ? pipes : [data, ...pipes];\n\n    Reflect.defineMetadata(\n      ROUTE_ARGS_METADATA,\n      assignMetadata(args, paramtype, index, paramData, ...paramPipes),\n      target.constructor,\n      key,\n    );\n  };\n\n/**\n * Route handler parameter decorator. Extracts the `Request`\n * object from the underlying platform and populates the decorated\n * parameter with the value of `Request`.\n *\n * Example: `logout(@Request() req)`\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n *\n * @publicApi\n */\nexport const Request: () => ParameterDecorator = createRouteParamDecorator(\n  RouteParamtypes.REQUEST,\n);\n\n/**\n * Route handler parameter decorator. Extracts the `Response`\n * object from the underlying platform and populates the decorated\n * parameter with the value of `Response`.\n *\n * Example: `logout(@Response() res)`\n *\n * @publicApi\n */\nexport const Response: (\n  options?: ResponseDecoratorOptions,\n) => ParameterDecorator =\n  (options?: ResponseDecoratorOptions) => (target, key, index) => {\n    if (options?.passthrough) {\n      Reflect.defineMetadata(\n        RESPONSE_PASSTHROUGH_METADATA,\n        options?.passthrough,\n        target.constructor,\n        key,\n      );\n    }\n    return createRouteParamDecorator(RouteParamtypes.RESPONSE)()(\n      target,\n      key,\n      index,\n    );\n  };\n\n/**\n * Route handler parameter decorator. Extracts reference to the `Next` function\n * from the underlying platform and populates the decorated\n * parameter with the value of `Next`.\n *\n * @publicApi\n */\nexport const Next: () => ParameterDecorator = createRouteParamDecorator(\n  RouteParamtypes.NEXT,\n);\n\n/**\n * Route handler parameter decorator. Extracts the `Ip` property\n * from the `req` object and populates the decorated\n * parameter with the value of `ip`.\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n *\n * @publicApi\n */\nexport const Ip: () => ParameterDecorator = createRouteParamDecorator(\n  RouteParamtypes.IP,\n);\n\n/**\n * Route handler parameter decorator. Extracts the `Session` object\n * from the underlying platform and populates the decorated\n * parameter with the value of `Session`.\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n *\n * @publicApi\n */\nexport const Session: () => ParameterDecorator = createRouteParamDecorator(\n  RouteParamtypes.SESSION,\n);\n\n/**\n * Route handler parameter decorator. Extracts the `file` object\n * and populates the decorated parameter with the value of `file`.\n * Used in conjunction with\n * [multer middleware](https://github.com/expressjs/multer) for Express-based applications.\n *\n * For example:\n * ```typescript\n * uploadFile(@UploadedFile() file) {\n *   console.log(file);\n * }\n * ```\n * @see [Request object](https://docs.nestjs.com/techniques/file-upload)\n *\n * @publicApi\n */\nexport function UploadedFile(): ParameterDecorator;\n/**\n * Route handler parameter decorator. Extracts the `file` object\n * and populates the decorated parameter with the value of `file`.\n * Used in conjunction with\n * [multer middleware](https://github.com/expressjs/multer) for Express-based applications.\n *\n * For example:\n * ```typescript\n * uploadFile(@UploadedFile() file) {\n *   console.log(file);\n * }\n * ```\n * @see [Request object](https://docs.nestjs.com/techniques/file-upload)\n *\n * @publicApi\n */\nexport function UploadedFile(\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\n): ParameterDecorator;\n\n/**\n * Route handler parameter decorator. Extracts the `file` object\n * and populates the decorated parameter with the value of `file`.\n * Used in conjunction with\n * [multer middleware](https://github.com/expressjs/multer) for Express-based applications.\n *\n * For example:\n * ```typescript\n * uploadFile(@UploadedFile() file) {\n *   console.log(file);\n * }\n * ```\n * @see [Request object](https://docs.nestjs.com/techniques/file-upload)\n *\n * @publicApi\n */\nexport function UploadedFile(\n  fileKey?: string,\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\n): ParameterDecorator;\n/**\n * Route handler parameter decorator. Extracts the `file` object\n * and populates the decorated parameter with the value of `file`.\n * Used in conjunction with\n * [multer middleware](https://github.com/expressjs/multer) for Express-based applications.\n *\n * For example:\n * ```typescript\n * uploadFile(@UploadedFile() file) {\n *   console.log(file);\n * }\n * ```\n * @see [Request object](https://docs.nestjs.com/techniques/file-upload)\n *\n * @publicApi\n */\nexport function UploadedFile(\n  fileKey?: string | (Type<PipeTransform> | PipeTransform),\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\n): ParameterDecorator {\n  return createPipesRouteParamDecorator(RouteParamtypes.FILE)(\n    fileKey,\n    ...pipes,\n  );\n}\n\n/**\n * Route handler parameter decorator. Extracts the `files` object\n * and populates the decorated parameter with the value of `files`.\n * Used in conjunction with\n * [multer middleware](https://github.com/expressjs/multer) for Express-based applications.\n *\n * For example:\n * ```typescript\n * uploadFile(@UploadedFiles() files) {\n *   console.log(files);\n * }\n * ```\n * @see [Request object](https://docs.nestjs.com/techniques/file-upload)\n *\n * @publicApi\n */\nexport function UploadedFiles(): ParameterDecorator;\n/**\n * Route handler parameter decorator. Extracts the `files` object\n * and populates the decorated parameter with the value of `files`.\n * Used in conjunction with\n * [multer middleware](https://github.com/expressjs/multer) for Express-based applications.\n *\n * For example:\n * ```typescript\n * uploadFile(@UploadedFiles() files) {\n *   console.log(files);\n * }\n * ```\n * @see [Request object](https://docs.nestjs.com/techniques/file-upload)\n *\n * @publicApi\n */\nexport function UploadedFiles(\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\n): ParameterDecorator;\n/**\n * Route handler parameter decorator. Extracts the `files` object\n * and populates the decorated parameter with the value of `files`.\n * Used in conjunction with\n * [multer middleware](https://github.com/expressjs/multer) for Express-based applications.\n *\n * For example:\n * ```typescript\n * uploadFile(@UploadedFiles() files) {\n *   console.log(files);\n * }\n * ```\n * @see [Request object](https://docs.nestjs.com/techniques/file-upload)\n *\n * @publicApi\n */\nexport function UploadedFiles(\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\n): ParameterDecorator {\n  return createPipesRouteParamDecorator(RouteParamtypes.FILES)(\n    undefined,\n    ...pipes,\n  );\n}\n\n/**\n * Route handler parameter decorator. Extracts the `headers`\n * property from the `req` object and populates the decorated\n * parameter with the value of `headers`.\n *\n * For example: `async update(@Headers('Cache-Control') cacheControl: string)`\n *\n * @param property name of single header property to extract.\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n *\n * @publicApi\n */\nexport const Headers: (property?: string) => ParameterDecorator =\n  createRouteParamDecorator(RouteParamtypes.HEADERS);\n\n/**\n * Route handler parameter decorator. Extracts the `query`\n * property from the `req` object and populates the decorated\n * parameter with the value of `query`. May also apply pipes to the bound\n * query parameter.\n *\n * For example:\n * ```typescript\n * async find(@Query('user') user: string)\n * ```\n *\n * @param property name of single property to extract from the `query` object\n * @param pipes one or more pipes to apply to the bound query parameter\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n *\n * @publicApi\n */\nexport function Query(): ParameterDecorator;\n/**\n * Route handler parameter decorator. Extracts the `query`\n * property from the `req` object and populates the decorated\n * parameter with the value of `query`. May also apply pipes to the bound\n * query parameter.\n *\n * For example:\n * ```typescript\n * async find(@Query('user') user: string)\n * ```\n *\n * @param property name of single property to extract from the `query` object\n * @param pipes one or more pipes to apply to the bound query parameter\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n *\n * @publicApi\n */\nexport function Query(\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\n): ParameterDecorator;\n/**\n * Route handler parameter decorator. Extracts the `query`\n * property from the `req` object and populates the decorated\n * parameter with the value of `query`. May also apply pipes to the bound\n * query parameter.\n *\n * For example:\n * ```typescript\n * async find(@Query('user') user: string)\n * ```\n *\n * @param property name of single property to extract from the `query` object\n * @param pipes one or more pipes to apply to the bound query parameter\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n *\n * @publicApi\n */\nexport function Query(\n  property: string,\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\n): ParameterDecorator;\n/**\n * Route handler parameter decorator. Extracts the `query`\n * property from the `req` object and populates the decorated\n * parameter with the value of `query`. May also apply pipes to the bound\n * query parameter.\n *\n * For example:\n * ```typescript\n * async find(@Query('user') user: string)\n * ```\n *\n * @param property name of single property to extract from the `query` object\n * @param pipes one or more pipes to apply to the bound query parameter\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n *\n * @publicApi\n */\nexport function Query(\n  property?: string | (Type<PipeTransform> | PipeTransform),\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\n): ParameterDecorator {\n  return createPipesRouteParamDecorator(RouteParamtypes.QUERY)(\n    property,\n    ...pipes,\n  );\n}\n\n/**\n * Route handler parameter decorator. Extracts the entire `body`\n * object from the `req` object and populates the decorated\n * parameter with the value of `body`.\n *\n * For example:\n * ```typescript\n * async create(@Body() createDto: CreateCatDto)\n * ```\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n *\n * @publicApi\n */\nexport function Body(): ParameterDecorator;\n\n/**\n * Route handler parameter decorator. Extracts the entire `body`\n * object from the `req` object and populates the decorated\n * parameter with the value of `body`. Also applies the specified\n * pipes to that parameter.\n *\n * For example:\n * ```typescript\n * async create(@Body(new ValidationPipe()) createDto: CreateCatDto)\n * ```\n *\n * @param pipes one or more pipes - either instances or classes - to apply to\n * the bound body parameter.\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n * @see [Working with pipes](https://docs.nestjs.com/custom-decorators#working-with-pipes)\n *\n * @publicApi\n */\nexport function Body(\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\n): ParameterDecorator;\n\n/**\n * Route handler parameter decorator. Extracts a single property from\n * the `body` object property of the `req` object and populates the decorated\n * parameter with the value of that property. Also applies pipes to the bound\n * body parameter.\n *\n * For example:\n * ```typescript\n * async create(@Body('role', new ValidationPipe()) role: string)\n * ```\n *\n * @param property name of single property to extract from the `body` object\n * @param pipes one or more pipes - either instances or classes - to apply to\n * the bound body parameter.\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n * @see [Working with pipes](https://docs.nestjs.com/custom-decorators#working-with-pipes)\n *\n * @publicApi\n */\nexport function Body(\n  property: string,\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\n): ParameterDecorator;\n\n/**\n * Route handler parameter decorator. Extracts the entire `body` object\n * property, or optionally a named property of the `body` object, from\n * the `req` object and populates the decorated parameter with that value.\n * Also applies pipes to the bound body parameter.\n *\n * For example:\n * ```typescript\n * async create(@Body('role', new ValidationPipe()) role: string)\n * ```\n *\n * @param property name of single property to extract from the `body` object\n * @param pipes one or more pipes - either instances or classes - to apply to\n * the bound body parameter.\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n * @see [Working with pipes](https://docs.nestjs.com/custom-decorators#working-with-pipes)\n *\n * @publicApi\n */\nexport function Body(\n  property?: string | (Type<PipeTransform> | PipeTransform),\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\n): ParameterDecorator {\n  return createPipesRouteParamDecorator(RouteParamtypes.BODY)(\n    property,\n    ...pipes,\n  );\n}\n\n/**\n * Route handler parameter decorator. Extracts the `params`\n * property from the `req` object and populates the decorated\n * parameter with the value of `params`. May also apply pipes to the bound\n * parameter.\n *\n * For example, extracting all params:\n * ```typescript\n * findOne(@Param() params: string[])\n * ```\n *\n * For example, extracting a single param:\n * ```typescript\n * findOne(@Param('id') id: string)\n * ```\n * @param property name of single property to extract from the `req` object\n * @param pipes one or more pipes - either instances or classes - to apply to\n * the bound parameter.\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n * @see [Working with pipes](https://docs.nestjs.com/custom-decorators#working-with-pipes)\n *\n * @publicApi\n */\nexport function Param(): ParameterDecorator;\n/**\n * Route handler parameter decorator. Extracts the `params`\n * property from the `req` object and populates the decorated\n * parameter with the value of `params`. May also apply pipes to the bound\n * parameter.\n *\n * For example, extracting all params:\n * ```typescript\n * findOne(@Param() params: string[])\n * ```\n *\n * For example, extracting a single param:\n * ```typescript\n * findOne(@Param('id') id: string)\n * ```\n * @param property name of single property to extract from the `req` object\n * @param pipes one or more pipes - either instances or classes - to apply to\n * the bound parameter.\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n * @see [Working with pipes](https://docs.nestjs.com/custom-decorators#working-with-pipes)\n *\n * @publicApi\n */\nexport function Param(\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\n): ParameterDecorator;\n/**\n * Route handler parameter decorator. Extracts the `params`\n * property from the `req` object and populates the decorated\n * parameter with the value of `params`. May also apply pipes to the bound\n * parameter.\n *\n * For example, extracting all params:\n * ```typescript\n * findOne(@Param() params: string[])\n * ```\n *\n * For example, extracting a single param:\n * ```typescript\n * findOne(@Param('id') id: string)\n * ```\n * @param property name of single property to extract from the `req` object\n * @param pipes one or more pipes - either instances or classes - to apply to\n * the bound parameter.\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n * @see [Working with pipes](https://docs.nestjs.com/custom-decorators#working-with-pipes)\n *\n * @publicApi\n */\nexport function Param(\n  property: string,\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\n): ParameterDecorator;\n/**\n * Route handler parameter decorator. Extracts the `params`\n * property from the `req` object and populates the decorated\n * parameter with the value of `params`. May also apply pipes to the bound\n * parameter.\n *\n * For example, extracting all params:\n * ```typescript\n * findOne(@Param() params: string[])\n * ```\n *\n * For example, extracting a single param:\n * ```typescript\n * findOne(@Param('id') id: string)\n * ```\n * @param property name of single property to extract from the `req` object\n * @param pipes one or more pipes - either instances or classes - to apply to\n * the bound parameter.\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n * @see [Working with pipes](https://docs.nestjs.com/custom-decorators#working-with-pipes)\n *\n * @publicApi\n */\nexport function Param(\n  property?: string | (Type<PipeTransform> | PipeTransform),\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\n): ParameterDecorator {\n  return createPipesRouteParamDecorator(RouteParamtypes.PARAM)(\n    property,\n    ...pipes,\n  );\n}\n\n/**\n * Route handler parameter decorator. Extracts the `hosts`\n * property from the `req` object and populates the decorated\n * parameter with the value of `hosts`. May also apply pipes to the bound\n * parameter.\n *\n * For example, extracting all params:\n * ```typescript\n * findOne(@HostParam() params: string[])\n * ```\n *\n * For example, extracting a single param:\n * ```typescript\n * findOne(@HostParam('id') id: string)\n * ```\n * @param property name of single property to extract from the `req` object\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n *\n * @publicApi\n */\nexport function HostParam(): ParameterDecorator;\n/**\n * Route handler parameter decorator. Extracts the `hosts`\n * property from the `req` object and populates the decorated\n * parameter with the value of `hosts`. May also apply pipes to the bound\n * parameter.\n *\n * For example, extracting all params:\n * ```typescript\n * findOne(@HostParam() params: string[])\n * ```\n *\n * For example, extracting a single param:\n * ```typescript\n * findOne(@HostParam('id') id: string)\n * ```\n * @param property name of single property to extract from the `req` object\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n *\n * @publicApi\n */\nexport function HostParam(property: string): ParameterDecorator;\n/**\n * Route handler parameter decorator. Extracts the `hosts`\n * property from the `req` object and populates the decorated\n * parameter with the value of `params`. May also apply pipes to the bound\n * parameter.\n *\n * For example, extracting all params:\n * ```typescript\n * findOne(@HostParam() params: string[])\n * ```\n *\n * For example, extracting a single param:\n * ```typescript\n * findOne(@HostParam('id') id: string)\n * ```\n * @param property name of single property to extract from the `req` object\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n *\n * @publicApi\n */\nexport function HostParam(\n  property?: string | (Type<PipeTransform> | PipeTransform),\n): ParameterDecorator {\n  return createRouteParamDecorator(RouteParamtypes.HOST)(property);\n}\n\nexport const Req = Request;\nexport const Res = Response;\n"]}