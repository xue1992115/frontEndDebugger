{"version":3,"file":"create-route-param-metadata.decorator.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/common/","sources":["decorators/http/create-route-param-metadata.decorator.ts"],"names":[],"mappings":";;;AAAA,6BAA0B;AAC1B,+CAAsD;AAItD,yFAAwF;AACxF,2DAA6D;AAI7D;;;;;;GAMG;AACH,SAAgB,oBAAoB,CAKlC,OAAqE,EACrE,YAAsC,EAAE;IAIxC,MAAM,SAAS,GAAG,IAAA,SAAG,EAAC,EAAE,CAAC,CAAC;IAC1B,OAAO,CACH,IAAK,EACL,GAAG,KAA4D,EAC3C,EAAE,CACxB,CAAC,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE;QACrB,MAAM,IAAI,GACR,OAAO,CAAC,WAAW,CAAC,+BAAmB,EAAE,MAAM,CAAC,WAAW,EAAE,GAAG,CAAC,IAAI,EAAE,CAAC;QAE1E,MAAM,MAAM,GAAG,CAAC,IAAS,EAAE,EAAE,CAC3B,IAAI;YACJ,CAAC,CAAC,IAAA,yBAAU,EAAC,IAAI,CAAC;gBAChB,IAAI,CAAC,SAAS;gBACd,IAAA,yBAAU,EAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;gBACrC,IAAA,yBAAU,EAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;QAEhC,MAAM,YAAY,GAAG,IAAA,oBAAK,EAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAClD,MAAM,SAAS,GAAG,YAAY,CAAC,CAAC,CAAE,IAAY,CAAC,CAAC,CAAC,SAAS,CAAC;QAC3D,MAAM,UAAU,GAAG,YAAY,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,GAAG,KAAK,CAAC,CAAC;QAE3D,OAAO,CAAC,cAAc,CACpB,+BAAmB,EACnB,IAAA,2DAA6B,EAC3B,IAAI,EACJ,SAAS,EACT,KAAK,EACL,OAAO,EACP,SAAS,EACT,GAAI,UAA8B,CACnC,EACD,MAAM,CAAC,WAAW,EAClB,GAAG,CACJ,CAAC;QACF,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,MAAM,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC;IAClD,CAAC,CAAC;AACN,CAAC;AA7CD,oDA6CC","sourcesContent":["import { uid } from 'uid';\nimport { ROUTE_ARGS_METADATA } from '../../constants';\nimport { PipeTransform } from '../../index';\nimport { Type } from '../../interfaces';\nimport { CustomParamFactory } from '../../interfaces/features/custom-route-param-factory.interface';\nimport { assignCustomParameterMetadata } from '../../utils/assign-custom-metadata.util';\nimport { isFunction, isNil } from '../../utils/shared.utils';\n\nexport type ParamDecoratorEnhancer = ParameterDecorator;\n\n/**\n * Defines HTTP route param decorator\n *\n * @param factory\n *\n * @publicApi\n */\nexport function createParamDecorator<\n  FactoryData = any,\n  FactoryInput = any,\n  FactoryOutput = any,\n>(\n  factory: CustomParamFactory<FactoryData, FactoryInput, FactoryOutput>,\n  enhancers: ParamDecoratorEnhancer[] = [],\n): (\n  ...dataOrPipes: (Type<PipeTransform> | PipeTransform | FactoryData)[]\n) => ParameterDecorator {\n  const paramtype = uid(21);\n  return (\n      data?,\n      ...pipes: (Type<PipeTransform> | PipeTransform | FactoryData)[]\n    ): ParameterDecorator =>\n    (target, key, index) => {\n      const args =\n        Reflect.getMetadata(ROUTE_ARGS_METADATA, target.constructor, key) || {};\n\n      const isPipe = (pipe: any) =>\n        pipe &&\n        ((isFunction(pipe) &&\n          pipe.prototype &&\n          isFunction(pipe.prototype.transform)) ||\n          isFunction(pipe.transform));\n\n      const hasParamData = isNil(data) || !isPipe(data);\n      const paramData = hasParamData ? (data as any) : undefined;\n      const paramPipes = hasParamData ? pipes : [data, ...pipes];\n\n      Reflect.defineMetadata(\n        ROUTE_ARGS_METADATA,\n        assignCustomParameterMetadata(\n          args,\n          paramtype,\n          index,\n          factory,\n          paramData,\n          ...(paramPipes as PipeTransform[]),\n        ),\n        target.constructor,\n        key,\n      );\n      enhancers.forEach(fn => fn(target, key, index));\n    };\n}\n"]}