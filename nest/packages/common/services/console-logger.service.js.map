{"version":3,"file":"console-logger.service.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/common/","sources":["services/console-logger.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Optional } from '../decorators/core';\nimport { clc, yellow } from '../utils/cli-colors.util';\nimport {\n  isFunction,\n  isPlainObject,\n  isString,\n  isUndefined,\n} from '../utils/shared.utils';\nimport { LoggerService, LogLevel } from './logger.service';\nimport { isLogLevelEnabled } from './utils';\n\nexport interface ConsoleLoggerOptions {\n  /**\n   * Enabled log levels.\n   */\n  logLevels?: LogLevel[];\n  /**\n   * If enabled, will print timestamp (time difference) between current and previous log message.\n   */\n  timestamp?: boolean;\n}\n\nconst DEFAULT_LOG_LEVELS: LogLevel[] = [\n  'log',\n  'error',\n  'warn',\n  'debug',\n  'verbose',\n];\n\nconst dateTimeFormatter = new Intl.DateTimeFormat(undefined, {\n  year: 'numeric',\n  hour: 'numeric',\n  minute: 'numeric',\n  second: 'numeric',\n  day: '2-digit',\n  month: '2-digit',\n});\n\n@Injectable()\nexport class ConsoleLogger implements LoggerService {\n  private static lastTimestampAt?: number;\n  private originalContext?: string;\n\n  constructor();\n  constructor(context: string);\n  constructor(context: string, options: ConsoleLoggerOptions);\n  constructor(\n    @Optional()\n    protected context?: string,\n    @Optional()\n    protected options: ConsoleLoggerOptions = {},\n  ) {\n    if (!options.logLevels) {\n      options.logLevels = DEFAULT_LOG_LEVELS;\n    }\n    if (context) {\n      this.originalContext = context;\n    }\n  }\n\n  /**\n   * Write a 'log' level log, if the configured level allows for it.\n   * Prints to `stdout` with newline.\n   */\n  log(message: any, context?: string): void;\n  log(message: any, ...optionalParams: [...any, string?]): void;\n  log(message: any, ...optionalParams: any[]) {\n    if (!this.isLevelEnabled('log')) {\n      return;\n    }\n    const { messages, context } = this.getContextAndMessagesToPrint([\n      message,\n      ...optionalParams,\n    ]);\n    this.printMessages(messages, context, 'log');\n  }\n\n  /**\n   * Write an 'error' level log, if the configured level allows for it.\n   * Prints to `stderr` with newline.\n   */\n  error(message: any, stack?: string, context?: string): void;\n  error(message: any, ...optionalParams: [...any, string?, string?]): void;\n  error(message: any, ...optionalParams: any[]) {\n    if (!this.isLevelEnabled('error')) {\n      return;\n    }\n    const { messages, context, stack } =\n      this.getContextAndStackAndMessagesToPrint([message, ...optionalParams]);\n\n    this.printMessages(messages, context, 'error', 'stderr');\n    this.printStackTrace(stack);\n  }\n\n  /**\n   * Write a 'warn' level log, if the configured level allows for it.\n   * Prints to `stdout` with newline.\n   */\n  warn(message: any, context?: string): void;\n  warn(message: any, ...optionalParams: [...any, string?]): void;\n  warn(message: any, ...optionalParams: any[]) {\n    if (!this.isLevelEnabled('warn')) {\n      return;\n    }\n    const { messages, context } = this.getContextAndMessagesToPrint([\n      message,\n      ...optionalParams,\n    ]);\n    this.printMessages(messages, context, 'warn');\n  }\n\n  /**\n   * Write a 'debug' level log, if the configured level allows for it.\n   * Prints to `stdout` with newline.\n   */\n  debug(message: any, context?: string): void;\n  debug(message: any, ...optionalParams: [...any, string?]): void;\n  debug(message: any, ...optionalParams: any[]) {\n    if (!this.isLevelEnabled('debug')) {\n      return;\n    }\n    const { messages, context } = this.getContextAndMessagesToPrint([\n      message,\n      ...optionalParams,\n    ]);\n    this.printMessages(messages, context, 'debug');\n  }\n\n  /**\n   * Write a 'verbose' level log, if the configured level allows for it.\n   * Prints to `stdout` with newline.\n   */\n  verbose(message: any, context?: string): void;\n  verbose(message: any, ...optionalParams: [...any, string?]): void;\n  verbose(message: any, ...optionalParams: any[]) {\n    if (!this.isLevelEnabled('verbose')) {\n      return;\n    }\n    const { messages, context } = this.getContextAndMessagesToPrint([\n      message,\n      ...optionalParams,\n    ]);\n    this.printMessages(messages, context, 'verbose');\n  }\n\n  /**\n   * Set log levels\n   * @param levels log levels\n   */\n  setLogLevels(levels: LogLevel[]) {\n    if (!this.options) {\n      this.options = {};\n    }\n    this.options.logLevels = levels;\n  }\n\n  /**\n   * Set logger context\n   * @param context context\n   */\n  setContext(context: string) {\n    this.context = context;\n  }\n\n  /**\n   * Resets the logger context to the value that was passed in the constructor.\n   */\n  resetContext() {\n    this.context = this.originalContext;\n  }\n\n  isLevelEnabled(level: LogLevel): boolean {\n    const logLevels = this.options?.logLevels;\n    return isLogLevelEnabled(level, logLevels);\n  }\n\n  protected getTimestamp(): string {\n    return dateTimeFormatter.format(Date.now());\n  }\n\n  protected printMessages(\n    messages: unknown[],\n    context = '',\n    logLevel: LogLevel = 'log',\n    writeStreamType?: 'stdout' | 'stderr',\n  ) {\n    messages.forEach(message => {\n      const pidMessage = this.formatPid(process.pid);\n      const contextMessage = this.formatContext(context);\n      const timestampDiff = this.updateAndGetTimestampDiff();\n      const formattedLogLevel = logLevel.toUpperCase().padStart(7, ' ');\n      const formattedMessage = this.formatMessage(\n        logLevel,\n        message,\n        pidMessage,\n        formattedLogLevel,\n        contextMessage,\n        timestampDiff,\n      );\n\n      process[writeStreamType ?? 'stdout'].write(formattedMessage);\n    });\n  }\n\n  protected formatPid(pid: number) {\n    return `[Nest] ${pid}  - `;\n  }\n\n  protected formatContext(context: string): string {\n    return context ? yellow(`[${context}] `) : '';\n  }\n\n  protected formatMessage(\n    logLevel: LogLevel,\n    message: unknown,\n    pidMessage: string,\n    formattedLogLevel: string,\n    contextMessage: string,\n    timestampDiff: string,\n  ) {\n    const output = this.stringifyMessage(message, logLevel);\n    pidMessage = this.colorize(pidMessage, logLevel);\n    formattedLogLevel = this.colorize(formattedLogLevel, logLevel);\n    return `${pidMessage}${this.getTimestamp()} ${formattedLogLevel} ${contextMessage}${output}${timestampDiff}\\n`;\n  }\n\n  protected stringifyMessage(message: unknown, logLevel: LogLevel) {\n    // If the message is a function, call it and re-resolve its value.\n    return isFunction(message)\n      ? this.stringifyMessage(message(), logLevel)\n      : isPlainObject(message) || Array.isArray(message)\n      ? `${this.colorize('Object:', logLevel)}\\n${JSON.stringify(\n          message,\n          (key, value) =>\n            typeof value === 'bigint' ? value.toString() : value,\n          2,\n        )}\\n`\n      : this.colorize(message as string, logLevel);\n  }\n\n  protected colorize(message: string, logLevel: LogLevel) {\n    const color = this.getColorByLogLevel(logLevel);\n    return color(message);\n  }\n\n  protected printStackTrace(stack: string) {\n    if (!stack) {\n      return;\n    }\n    process.stderr.write(`${stack}\\n`);\n  }\n\n  protected updateAndGetTimestampDiff(): string {\n    const includeTimestamp =\n      ConsoleLogger.lastTimestampAt && this.options?.timestamp;\n    const result = includeTimestamp\n      ? this.formatTimestampDiff(Date.now() - ConsoleLogger.lastTimestampAt)\n      : '';\n    ConsoleLogger.lastTimestampAt = Date.now();\n    return result;\n  }\n\n  protected formatTimestampDiff(timestampDiff: number) {\n    return yellow(` +${timestampDiff}ms`);\n  }\n\n  private getContextAndMessagesToPrint(args: unknown[]) {\n    if (args?.length <= 1) {\n      return { messages: args, context: this.context };\n    }\n    const lastElement = args[args.length - 1];\n    const isContext = isString(lastElement);\n    if (!isContext) {\n      return { messages: args, context: this.context };\n    }\n    return {\n      context: lastElement as string,\n      messages: args.slice(0, args.length - 1),\n    };\n  }\n\n  private getContextAndStackAndMessagesToPrint(args: unknown[]) {\n    const { messages, context } = this.getContextAndMessagesToPrint(args);\n    if (messages?.length <= 1) {\n      return { messages, context };\n    }\n    const lastElement = messages[messages.length - 1];\n    const isStack = isString(lastElement);\n    // https://github.com/nestjs/nest/issues/11074#issuecomment-1421680060\n    if (!isStack && !isUndefined(lastElement)) {\n      return { messages, context };\n    }\n    return {\n      stack: lastElement as string,\n      messages: messages.slice(0, messages.length - 1),\n      context,\n    };\n  }\n\n  private getColorByLogLevel(level: LogLevel) {\n    switch (level) {\n      case 'debug':\n        return clc.magentaBright;\n      case 'warn':\n        return clc.yellow;\n      case 'error':\n        return clc.red;\n      case 'verbose':\n        return clc.cyanBright;\n      default:\n        return clc.green;\n    }\n  }\n}\n"]}