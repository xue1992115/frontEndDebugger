{"version":3,"file":"service-unavailable.exception.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/common/","sources":["exceptions/service-unavailable.exception.ts"],"names":[],"mappings":";;;AAAA,gEAAuD;AACvD,qDAAuE;AAEvE;;;;;;GAMG;AACH,MAAa,2BAA4B,SAAQ,8BAAa;IAC5D;;;;;;;;;;;;;;;;;;;;;;;OAuBG;IACH,YACE,aAAqC,EACrC,uBAAsD,qBAAqB;QAE3E,MAAM,EAAE,WAAW,EAAE,oBAAoB,EAAE,GACzC,8BAAa,CAAC,gCAAgC,CAAC,oBAAoB,CAAC,CAAC;QAEvE,KAAK,CACH,8BAAa,CAAC,UAAU,CACtB,aAAa,EACb,WAAW,EACX,6BAAU,CAAC,mBAAmB,CAC/B,EACD,6BAAU,CAAC,mBAAmB,EAC9B,oBAAoB,CACrB,CAAC;IACJ,CAAC;CACF;AA1CD,kEA0CC","sourcesContent":["import { HttpStatus } from '../enums/http-status.enum';\nimport { HttpException, HttpExceptionOptions } from './http.exception';\n\n/**\n * Defines an HTTP exception for *Service Unavailable* type errors.\n *\n * @see [Built-in HTTP exceptions](https://docs.nestjs.com/exception-filters#built-in-http-exceptions)\n *\n * @publicApi\n */\nexport class ServiceUnavailableException extends HttpException {\n  /**\n   * Instantiate a `ServiceUnavailableException` Exception.\n   *\n   * @example\n   * `throw new ServiceUnavailableException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 503.\n   * - The `objectOrError` argument defines the JSON response body or the message string.\n   * - The `descriptionOrOptions` argument contains either a short description of the HTTP error or an options object used to provide an underlying error cause.\n   *\n   * By default, the JSON response body contains two properties:\n   * - `statusCode`: this will be the value 503.\n   * - `message`: the string `'Service Unavailable'` by default; override this by supplying\n   * a string in the `objectOrError` parameter.\n   *\n   * If the parameter `objectOrError` is a string, the response body will contain an\n   * additional property, `error`, with a short description of the HTTP error. To override the\n   * entire JSON response body, pass an object instead. Nest will serialize the object\n   * and return it as the JSON response body.\n   *\n   * @param objectOrError string or object describing the error condition.\n   * @param descriptionOrOptions either a short description of the HTTP error or an options object used to provide an underlying error cause\n   */\n  constructor(\n    objectOrError?: string | object | any,\n    descriptionOrOptions: string | HttpExceptionOptions = 'Service Unavailable',\n  ) {\n    const { description, httpExceptionOptions } =\n      HttpException.extractDescriptionAndOptionsFrom(descriptionOrOptions);\n\n    super(\n      HttpException.createBody(\n        objectOrError,\n        description,\n        HttpStatus.SERVICE_UNAVAILABLE,\n      ),\n      HttpStatus.SERVICE_UNAVAILABLE,\n      httpExceptionOptions,\n    );\n  }\n}\n"]}