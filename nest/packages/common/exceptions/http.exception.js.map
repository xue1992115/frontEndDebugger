{"version":3,"file":"http.exception.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/common/","sources":["exceptions/http.exception.ts"],"names":[],"mappings":"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","sourcesContent":["import { Logger } from '../services';\nimport { isObject, isString } from '../utils/shared.utils';\n\nexport interface HttpExceptionOptions {\n  cause?: Error;\n  description?: string;\n}\n\nexport interface DescriptionAndOptions {\n  description?: string;\n  httpExceptionOptions?: HttpExceptionOptions;\n}\n\n/**\n * Defines the base Nest HTTP exception, which is handled by the default\n * Exceptions Handler.\n *\n * @see [Built-in HTTP exceptions](https://docs.nestjs.com/exception-filters#built-in-http-exceptions)\n *\n * @publicApi\n */\nexport class HttpException extends Error {\n  /**\n   * Instantiate a plain HTTP Exception.\n   *\n   * @example\n   * throw new HttpException()\n   * throw new HttpException('message', HttpStatus.BAD_REQUEST)\n   * throw new HttpException({ reason: 'this can be a human readable reason' }, HttpStatus.BAD_REQUEST)\n   * throw new HttpException(new Error('Cause Error'), HttpStatus.BAD_REQUEST)\n   * throw new HttpException('custom message', HttpStatus.BAD_REQUEST, {\n   *  cause: new Error('Cause Error'),\n   * })\n   *\n   *\n   * @usageNotes\n   * The constructor arguments define the response and the HTTP response status code.\n   * - The `response` argument (required) defines the JSON response body. alternatively, it can also be\n   *  an error object that is used to define an error [cause](https://nodejs.org/en/blog/release/v16.9.0/#error-cause).\n   * - The `status` argument (required) defines the HTTP Status Code.\n   * - The `options` argument (optional) defines additional error options. Currently, it supports the `cause` attribute,\n   *  and can be used as an alternative way to specify the error cause: `const error = new HttpException('description', 400, { cause: new Error() });`\n   *\n   * By default, the JSON response body contains two properties:\n   * - `statusCode`: the Http Status Code.\n   * - `message`: a short description of the HTTP error by default; override this\n   * by supplying a string in the `response` parameter.\n   *\n   * To override the entire JSON response body, pass an object to the `createBody`\n   * method. Nest will serialize the object and return it as the JSON response body.\n   *\n   * The `status` argument is required, and should be a valid HTTP status code.\n   * Best practice is to use the `HttpStatus` enum imported from `nestjs/common`.\n   *\n   * @param response string, object describing the error condition or the error cause.\n   * @param status HTTP response status code.\n   * @param options An object used to add an error cause.\n   */\n  constructor(\n    private readonly response: string | Record<string, any>,\n    private readonly status: number,\n    private readonly options?: HttpExceptionOptions,\n  ) {\n    super();\n    this.initMessage();\n    this.initName();\n    this.initCause();\n  }\n\n  public cause: Error | undefined;\n\n  /**\n   * Configures error chaining support\n   *\n   * See:\n   * - https://nodejs.org/en/blog/release/v16.9.0/#error-cause\n   * - https://github.com/microsoft/TypeScript/issues/45167\n   */\n  public initCause(): void {\n    if (this.options?.cause) {\n      this.cause = this.options.cause;\n      return;\n    }\n\n    if (this.response instanceof Error) {\n      Logger.warn(\n        'DEPRECATED! Passing the error cause as the first argument to HttpException constructor is deprecated. You should use the \"options\" parameter instead: new HttpException(\"message\", 400, { cause: new Error(\"Some Error\") }) ',\n      );\n      this.cause = this.response;\n    }\n  }\n\n  public initMessage() {\n    if (isString(this.response)) {\n      this.message = this.response;\n    } else if (\n      isObject(this.response) &&\n      isString((this.response as Record<string, any>).message)\n    ) {\n      this.message = (this.response as Record<string, any>).message;\n    } else if (this.constructor) {\n      this.message =\n        this.constructor.name.match(/[A-Z][a-z]+|[0-9]+/g)?.join(' ') ??\n        'Error';\n    }\n  }\n\n  public initName(): void {\n    this.name = this.constructor.name;\n  }\n\n  public getResponse(): string | object {\n    return this.response;\n  }\n\n  public getStatus(): number {\n    return this.status;\n  }\n\n  public static createBody(\n    objectOrErrorMessage: object | string,\n    description?: string,\n    statusCode?: number,\n  ) {\n    if (!objectOrErrorMessage) {\n      return { statusCode, message: description };\n    }\n    return isObject(objectOrErrorMessage) &&\n      !Array.isArray(objectOrErrorMessage)\n      ? objectOrErrorMessage\n      : { statusCode, message: objectOrErrorMessage, error: description };\n  }\n\n  public static getDescriptionFrom(\n    descriptionOrOptions: string | HttpExceptionOptions,\n  ): string {\n    return isString(descriptionOrOptions)\n      ? descriptionOrOptions\n      : descriptionOrOptions?.description;\n  }\n\n  public static getHttpExceptionOptionsFrom(\n    descriptionOrOptions: string | HttpExceptionOptions,\n  ): HttpExceptionOptions {\n    return isString(descriptionOrOptions) ? {} : descriptionOrOptions;\n  }\n\n  /**\n   * Utility method used to extract the error description and httpExceptionOptions from the given argument.\n   * This is used by inheriting classes to correctly parse both options.\n   * @returns the error description and the httpExceptionOptions as an object.\n   */\n  public static extractDescriptionAndOptionsFrom(\n    descriptionOrOptions: string | HttpExceptionOptions,\n  ): DescriptionAndOptions {\n    const description = isString(descriptionOrOptions)\n      ? descriptionOrOptions\n      : descriptionOrOptions?.description;\n\n    const httpExceptionOptions = isString(descriptionOrOptions)\n      ? {}\n      : descriptionOrOptions;\n\n    return {\n      description,\n      httpExceptionOptions,\n    };\n  }\n}\n"]}