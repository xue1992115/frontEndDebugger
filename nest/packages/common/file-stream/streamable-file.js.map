{"version":3,"file":"streamable-file.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/common/","sources":["file-stream/streamable-file.ts"],"names":[],"mappings":";;;AAAA,mCAAkC;AAClC,+BAA6B;AAC7B,oCAAsC;AACtC,wDAAmD;AAGnD;;;;GAIG;AACH,MAAa,cAAc;IAqBzB,YACE,kBAAyC,EAChC,UAAiC,EAAE;;;QAAnC,YAAO,GAAP,OAAO,CAA4B;QApBpC,gBAAW,GAGT,CAAC,GAAU,EAAE,GAAG,EAAE,EAAE;YAC9B,IAAI,GAAG,CAAC,SAAS,EAAE;gBACjB,OAAO;aACR;YACD,IAAI,GAAG,CAAC,WAAW,EAAE;gBACnB,GAAG,CAAC,GAAG,EAAE,CAAC;gBACV,OAAO;aACR;YAED,GAAG,CAAC,UAAU,GAAG,kBAAU,CAAC,WAAW,CAAC;YACxC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACxB,CAAC,CAAC;QAQA,IAAI,YAAK,CAAC,YAAY,CAAC,kBAAkB,CAAC,EAAE;YAC1C,IAAI,CAAC,MAAM,GAAG,IAAI,iBAAQ,EAAE,CAAC;YAC7B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;YACrC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACvB,YAAA,IAAI,CAAC,OAAO,EAAC,MAAM,uCAAN,MAAM,GAAK,kBAAkB,CAAC,MAAM,EAAC;SACnD;aAAM,IAAI,kBAAkB,CAAC,IAAI,IAAI,IAAA,yBAAU,EAAC,kBAAkB,CAAC,IAAI,CAAC,EAAE;YACzE,IAAI,CAAC,MAAM,GAAG,kBAAkB,CAAC;SAClC;IACH,CAAC;IAED,SAAS;QACP,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAED,UAAU;QACR,MAAM,EACJ,IAAI,GAAG,0BAA0B,EACjC,WAAW,GAAG,SAAS,EACvB,MAAM,GAAG,SAAS,GACnB,GAAG,IAAI,CAAC,OAAO,CAAC;QACjB,OAAO;YACL,IAAI;YACJ,WAAW;YACX,MAAM;SACP,CAAC;IACJ,CAAC;IAED,IAAI,YAAY;QAId,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAED,eAAe,CACb,OAAkE;QAElE,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC;QAC3B,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AAjED,wCAiEC","sourcesContent":["import { Readable } from 'stream';\nimport { types } from 'util';\nimport { HttpStatus } from '../enums';\nimport { isFunction } from '../utils/shared.utils';\nimport { StreamableFileOptions, StreamableHandlerResponse } from './interfaces';\n\n/**\n * @see [Streaming files](https://docs.nestjs.com/techniques/streaming-files)\n *\n * @publicApi\n */\nexport class StreamableFile {\n  private readonly stream: Readable;\n\n  protected handleError: (\n    err: Error,\n    response: StreamableHandlerResponse,\n  ) => void = (err: Error, res) => {\n    if (res.destroyed) {\n      return;\n    }\n    if (res.headersSent) {\n      res.end();\n      return;\n    }\n\n    res.statusCode = HttpStatus.BAD_REQUEST;\n    res.send(err.message);\n  };\n\n  constructor(buffer: Uint8Array, options?: StreamableFileOptions);\n  constructor(readable: Readable, options?: StreamableFileOptions);\n  constructor(\n    bufferOrReadStream: Uint8Array | Readable,\n    readonly options: StreamableFileOptions = {},\n  ) {\n    if (types.isUint8Array(bufferOrReadStream)) {\n      this.stream = new Readable();\n      this.stream.push(bufferOrReadStream);\n      this.stream.push(null);\n      this.options.length ??= bufferOrReadStream.length;\n    } else if (bufferOrReadStream.pipe && isFunction(bufferOrReadStream.pipe)) {\n      this.stream = bufferOrReadStream;\n    }\n  }\n\n  getStream(): Readable {\n    return this.stream;\n  }\n\n  getHeaders() {\n    const {\n      type = 'application/octet-stream',\n      disposition = undefined,\n      length = undefined,\n    } = this.options;\n    return {\n      type,\n      disposition,\n      length,\n    };\n  }\n\n  get errorHandler(): (\n    err: Error,\n    response: StreamableHandlerResponse,\n  ) => void {\n    return this.handleError;\n  }\n\n  setErrorHandler(\n    handler: (err: Error, response: StreamableHandlerResponse) => void,\n  ) {\n    this.handleError = handler;\n    return this;\n  }\n}\n"]}