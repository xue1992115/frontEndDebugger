{"version":3,"file":"cache-module.interface.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/common/","sources":["cache/interfaces/cache-module.interface.ts"],"names":[],"mappings":"","sourcesContent":["import { Provider, Type } from '../../interfaces';\nimport { ConfigurableModuleAsyncOptions } from '../../module-utils';\nimport { CacheManagerOptions } from './cache-manager.interface';\n\nexport type CacheModuleOptions<\n  StoreConfig extends Record<any, any> = Record<string, any>,\n> =\n  // Store-specific configuration takes precedence over cache module options due\n  // to how `createCacheManager` is implemented.\n  CacheManagerOptions &\n    StoreConfig & {\n      /**\n       * If \"true', register `CacheModule` as a global module.\n       */\n      isGlobal?: boolean;\n    };\n\n/**\n * Interface describing a `CacheOptionsFactory`.  Providers supplying configuration\n * options for the Cache module must implement this interface.\n *\n * @see [Async configuration](https://docs.nestjs.com/techniques/caching#async-configuration)\n *\n * @publicApi\n */\nexport interface CacheOptionsFactory<\n  StoreConfig extends Record<any, any> = Record<string, any>,\n> {\n  createCacheOptions():\n    | Promise<CacheModuleOptions<StoreConfig>>\n    | CacheModuleOptions<StoreConfig>;\n}\n\n/**\n * Options for dynamically configuring the Cache module.\n *\n * @see [Async configuration](https://docs.nestjs.com/techniques/caching#async-configuration)\n *\n * @publicApi\n */\nexport interface CacheModuleAsyncOptions<\n  StoreConfig extends Record<any, any> = Record<string, any>,\n> extends ConfigurableModuleAsyncOptions<\n    CacheModuleOptions<StoreConfig>,\n    keyof CacheOptionsFactory\n  > {\n  /**\n   * Injection token resolving to an existing provider. The provider must implement\n   * the `CacheOptionsFactory` interface.\n   */\n  useExisting?: Type<CacheOptionsFactory<StoreConfig>>;\n  /**\n   * Injection token resolving to a class that will be instantiated as a provider.\n   * The class must implement the `CacheOptionsFactory` interface.\n   */\n  useClass?: Type<CacheOptionsFactory<StoreConfig>>;\n  /**\n   * Function returning options (or a Promise resolving to options) to configure the\n   * cache module.\n   */\n  useFactory?: (\n    ...args: any[]\n  ) =>\n    | Promise<CacheModuleOptions<StoreConfig>>\n    | CacheModuleOptions<StoreConfig>;\n  /**\n   * Dependencies that a Factory may inject.\n   */\n  inject?: any[];\n  /**\n   * Extra providers to be registered within a scope of this module.\n   */\n  extraProviders?: Provider[];\n  /**\n   * If \"true', register `CacheModule` as a global module.\n   */\n  isGlobal?: boolean;\n}\n"]}