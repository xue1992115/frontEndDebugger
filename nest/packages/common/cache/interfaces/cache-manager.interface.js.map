{"version":3,"file":"cache-manager.interface.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/common/","sources":["cache/interfaces/cache-manager.interface.ts"],"names":[],"mappings":"","sourcesContent":["export interface LiteralObject {\n  [key: string]: any;\n}\n\n/**\n * Interface defining a cache store. Implement this interface to create a custom\n * cache store.\n *\n * @publicApi\n */\nexport interface CacheStore {\n  /**\n   * Create a key/value pair in the cache.\n   *\n   * @param key cache key\n   * @param value cache value\n   */\n  set<T>(\n    key: string,\n    value: T,\n    options?: CacheStoreSetOptions<T> | number,\n  ): Promise<void> | void;\n  /**\n   * Retrieve a key/value pair from the cache.\n   *\n   * @param key cache key\n   */\n  get<T>(key: string): Promise<T | undefined> | T | undefined;\n  /**\n   * Destroy a key/value pair from the cache.\n   *\n   * @param key cache key\n   */\n  del?(key: string): void | Promise<void>;\n}\n\nexport interface CacheStoreSetOptions<T> {\n  /**\n   * Time to live - amount of time in seconds that a response is cached before it\n   * is deleted. Defaults based on your cache manager settings.\n   */\n  ttl?: ((value: T) => number) | number;\n}\n\n/**\n * Interface defining a factory to create a cache store.\n *\n * @publicApi\n */\nexport type CacheStoreFactory =\n  | {\n      /**\n       * Return a configured cache store.\n       *\n       * @param args Cache manager options received from `CacheModule.register()`\n       * or `CacheModule.registerAsync()`\n       */\n      create(args: LiteralObject): CacheStore;\n    }\n  | ((args: LiteralObject) => CacheStore | Promise<CacheStore>);\n\n/**\n * Interface defining Cache Manager configuration options.\n *\n * @publicApi\n */\nexport interface CacheManagerOptions {\n  /**\n   * Cache storage manager.  Default is `'memory'` (in-memory store).  See\n   * [Different stores](https://docs.nestjs.com/techniques/caching#different-stores)\n   * for more info.\n   */\n  store?: string | CacheStoreFactory | CacheStore;\n  /**\n   * Time to live - amount of time that a response is cached before it\n   * is deleted. Subsequent request will call through the route handler and refresh\n   * the cache.  Defaults to 5 seconds. In `cache-manager@^4` this value is in seconds.\n   * In `cache-manager@^5` this value is in milliseconds.\n   */\n  ttl?: number;\n  /**\n   * Maximum number of responses to store in the cache.  Defaults to 100.\n   */\n  max?: number;\n  isCacheableValue?: (value: any) => boolean;\n}\n"]}