{"version":3,"file":"cache.interceptor.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/common/","sources":["cache/interceptors/cache.interceptor.ts"],"names":[],"mappings":";;;;AAAA,+BAAsC;AACtC,8CAAqC;AACrC,iDAAgE;AAChE,mDAAmD;AAOnD,kEAAuD;AACvD,qEAA4D;AAC5D,2DAA6D;AAC7D,wDAI4B;AAE5B,kBAAkB;AAClB,MAAM,iBAAiB,GAAG,iBAAiB,CAAC;AAE5C,kBAAkB;AAClB,MAAM,SAAS,GAAG,WAAW,CAAC;AAO9B;;;;;GAKG;AACH,IACa,gBAAgB,GAD7B,MACa,gBAAgB;IAS3B,YACyB,YAAoC,EACxC,SAAiC;QADV,iBAAY,GAAZ,YAAY,CAAK;QACrB,cAAS,GAAT,SAAS,CAAK;QAN5C,mBAAc,GAAG,CAAC,KAAK,CAAC,CAAC;QAQjC,iEAAiE;QACjE,iDAAiD;QACjD,MAAM,mBAAmB,GAAG,IAAA,+BAAW,EACrC,eAAe,EACf,aAAa,EACb,GAAG,EAAE,CAAC,OAAO,CAAC,eAAe,CAAC,CAC/B,CAAC;QACF,IAAI,CAAC,yBAAyB,GAAG,aAAa,IAAI,mBAAmB,CAAC;QAEtE,uBAAM,CAAC,IAAI,CACT,qLAAqL,CACtL,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,SAAS,CACb,OAAyB,EACzB,IAAiB;;QAEjB,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAClC,MAAM,iBAAiB,GACrB,MAAA,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,oCAAkB,EAAE,OAAO,CAAC,UAAU,EAAE,CAAC,mCAAI,IAAI,CAAC;QAEvE,IAAI,CAAC,GAAG,EAAE;YACR,OAAO,IAAI,CAAC,MAAM,EAAE,CAAC;SACtB;QACD,IAAI;YACF,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAC/C,IAAI,CAAC,IAAA,oBAAK,EAAC,KAAK,CAAC,EAAE;gBACjB,OAAO,IAAA,SAAE,EAAC,KAAK,CAAC,CAAC;aAClB;YACD,MAAM,GAAG,GAAG,IAAA,yBAAU,EAAC,iBAAiB,CAAC;gBACvC,CAAC,CAAC,MAAM,iBAAiB,CAAC,OAAO,CAAC;gBAClC,CAAC,CAAC,iBAAiB,CAAC;YAEtB,OAAO,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,CACvB,IAAA,eAAG,EAAC,KAAK,EAAC,QAAQ,EAAC,EAAE;gBACnB,IAAI,QAAQ,YAAY,4BAAc,EAAE;oBACtC,OAAO;iBACR;gBAED,MAAM,IAAI,GAAG,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;gBAC7B,IAAI,CAAC,IAAA,oBAAK,EAAC,GAAG,CAAC,EAAE;oBACf,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;iBAC3D;gBAED,IAAI;oBACF,MAAM,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC;iBACtC;gBAAC,OAAO,GAAG,EAAE;oBACZ,uBAAM,CAAC,KAAK,CACV,8CAA8C,GAAG,cAAc,QAAQ,GAAG,EAC1E,kBAAkB,CACnB,CAAC;iBACH;YACH,CAAC,CAAC,CACH,CAAC;SACH;QAAC,WAAM;YACN,OAAO,IAAI,CAAC,MAAM,EAAE,CAAC;SACtB;IACH,CAAC;IAES,OAAO,CAAC,OAAyB;QACzC,MAAM,WAAW,GAAG,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC;QACrD,MAAM,SAAS,GAAG,WAAW,IAAI,CAAC,CAAC,WAAW,CAAC,gBAAgB,CAAC;QAChE,MAAM,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CACtC,oCAAkB,EAClB,OAAO,CAAC,UAAU,EAAE,CACrB,CAAC;QAEF,IAAI,CAAC,SAAS,IAAI,aAAa,EAAE;YAC/B,OAAO,aAAa,CAAC;SACtB;QAED,MAAM,OAAO,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;QACzC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,EAAE;YACrC,OAAO,SAAS,CAAC;SAClB;QACD,OAAO,WAAW,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;IAC5C,CAAC;IAES,kBAAkB,CAAC,OAAyB;QACpD,MAAM,GAAG,GAAG,OAAO,CAAC,YAAY,EAAE,CAAC,UAAU,EAAE,CAAC;QAChD,OAAO,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IAClD,CAAC;CACF,CAAA;AA7FoB;IAFlB,IAAA,qBAAQ,GAAE;IACV,IAAA,mBAAM,EAAC,iBAAiB,CAAC;;yDAC0B;AAHzC,gBAAgB;IAD5B,IAAA,uBAAU,GAAE;IAWR,mBAAA,IAAA,mBAAM,EAAC,+BAAa,CAAC,CAAA;IACrB,mBAAA,IAAA,mBAAM,EAAC,SAAS,CAAC,CAAA;;GAXT,gBAAgB,CAgG5B;AAhGY,4CAAgB","sourcesContent":["import { Observable, of } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { Inject, Injectable, Optional } from '../../decorators';\nimport { StreamableFile } from '../../file-stream';\nimport {\n  CallHandler,\n  ExecutionContext,\n  HttpServer,\n  NestInterceptor,\n} from '../../interfaces';\nimport { Logger } from '../../services/logger.service';\nimport { loadPackage } from '../../utils/load-package.util';\nimport { isFunction, isNil } from '../../utils/shared.utils';\nimport {\n  CACHE_KEY_METADATA,\n  CACHE_MANAGER,\n  CACHE_TTL_METADATA,\n} from '../cache.constants';\n\n/** @deprecated */\nconst HTTP_ADAPTER_HOST = 'HttpAdapterHost';\n\n/** @deprecated */\nconst REFLECTOR = 'Reflector';\n\n/** @deprecated Import from the \"@nestjs/core\" instead. */\nexport interface HttpAdapterHost<T extends HttpServer = any> {\n  httpAdapter: T;\n}\n\n/**\n * @see [Caching](https://docs.nestjs.com/techniques/caching)\n *\n * @deprecated `CacheModule` (from the `@nestjs/common` package) is deprecated and will be removed in the next major release. Please, use the `@nestjs/cache-manager` package instead\n * @publicApi\n */\n@Injectable()\nexport class CacheInterceptor implements NestInterceptor {\n  @Optional()\n  @Inject(HTTP_ADAPTER_HOST)\n  protected readonly httpAdapterHost: HttpAdapterHost;\n\n  protected allowedMethods = ['GET'];\n\n  private cacheManagerIsv5OrGreater: boolean;\n\n  constructor(\n    @Inject(CACHE_MANAGER) protected readonly cacheManager: any,\n    @Inject(REFLECTOR) protected readonly reflector: any,\n  ) {\n    // We need to check if the cache-manager package is v5 or greater\n    // because the set method signature changed in v5\n    const cacheManagerPackage = loadPackage(\n      'cache-manager',\n      'CacheModule',\n      () => require('cache-manager'),\n    );\n    this.cacheManagerIsv5OrGreater = 'memoryStore' in cacheManagerPackage;\n\n    Logger.warn(\n      'DEPRECATED! \"CacheModule\" (from the \"@nestjs/common\" package) is deprecated and will be removed in the next major release. Please, use the \"@nestjs/cache-manager\" package instead.',\n    );\n  }\n\n  async intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Promise<Observable<any>> {\n    const key = this.trackBy(context);\n    const ttlValueOrFactory =\n      this.reflector.get(CACHE_TTL_METADATA, context.getHandler()) ?? null;\n\n    if (!key) {\n      return next.handle();\n    }\n    try {\n      const value = await this.cacheManager.get(key);\n      if (!isNil(value)) {\n        return of(value);\n      }\n      const ttl = isFunction(ttlValueOrFactory)\n        ? await ttlValueOrFactory(context)\n        : ttlValueOrFactory;\n\n      return next.handle().pipe(\n        tap(async response => {\n          if (response instanceof StreamableFile) {\n            return;\n          }\n\n          const args = [key, response];\n          if (!isNil(ttl)) {\n            args.push(this.cacheManagerIsv5OrGreater ? ttl : { ttl });\n          }\n\n          try {\n            await this.cacheManager.set(...args);\n          } catch (err) {\n            Logger.error(\n              `An error has occurred when inserting \"key: ${key}\", \"value: ${response}\"`,\n              'CacheInterceptor',\n            );\n          }\n        }),\n      );\n    } catch {\n      return next.handle();\n    }\n  }\n\n  protected trackBy(context: ExecutionContext): string | undefined {\n    const httpAdapter = this.httpAdapterHost.httpAdapter;\n    const isHttpApp = httpAdapter && !!httpAdapter.getRequestMethod;\n    const cacheMetadata = this.reflector.get(\n      CACHE_KEY_METADATA,\n      context.getHandler(),\n    );\n\n    if (!isHttpApp || cacheMetadata) {\n      return cacheMetadata;\n    }\n\n    const request = context.getArgByIndex(0);\n    if (!this.isRequestCacheable(context)) {\n      return undefined;\n    }\n    return httpAdapter.getRequestUrl(request);\n  }\n\n  protected isRequestCacheable(context: ExecutionContext): boolean {\n    const req = context.switchToHttp().getRequest();\n    return this.allowedMethods.includes(req.method);\n  }\n}\n"]}