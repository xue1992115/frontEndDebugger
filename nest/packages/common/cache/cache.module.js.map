{"version":3,"file":"cache.module.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/common/","sources":["cache/cache.module.ts"],"names":[],"mappings":";;;;AAAA,8CAAuC;AAEvC,uDAAkD;AAClD,uEAAoE;AACpE,uDAAuD;AAMvD;;;;;;GAMG;AAKH,IAAa,WAAW,GAAxB,MAAa,WAAY,SAAQ,iDAAuB;IACtD;;;;;;OAMG;IACH,MAAM,CAAC,QAAQ,CACb,UAA2C,EAAS;QAEpD,uBACE,MAAM,EAAE,OAAO,CAAC,QAAQ,IACrB,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,EAC1B;IACJ,CAAC;IAED;;;;;;;OAOG;IACH,MAAM,CAAC,aAAa,CAElB,OAA6C;QAC7C,MAAM,gBAAgB,GAAG,KAAK,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QAEtD,qCACE,MAAM,EAAE,OAAO,CAAC,QAAQ,IACrB,gBAAgB,KACnB,SAAS,EAAE,OAAO,CAAC,cAAc;gBAC/B,CAAC,CAAC,gBAAgB,CAAC,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC;gBAC3D,CAAC,CAAC,gBAAgB,CAAC,SAAS,IAC9B;IACJ,CAAC;CACF,CAAA;AAtCY,WAAW;IAJvB,IAAA,mBAAM,EAAC;QACN,SAAS,EAAE,CAAC,IAAA,oCAAkB,GAAE,CAAC;QACjC,OAAO,EAAE,CAAC,+BAAa,CAAC;KACzB,CAAC;GACW,WAAW,CAsCvB;AAtCY,kCAAW","sourcesContent":["import { Module } from '../decorators';\nimport { DynamicModule } from '../interfaces';\nimport { CACHE_MANAGER } from './cache.constants';\nimport { ConfigurableModuleClass } from './cache.module-definition';\nimport { createCacheManager } from './cache.providers';\nimport {\n  CacheModuleAsyncOptions,\n  CacheModuleOptions,\n} from './interfaces/cache-module.interface';\n\n/**\n * Module that provides Nest cache-manager.\n *\n * @see [Caching](https://docs.nestjs.com/techniques/caching)\n * @deprecated `CacheModule` (from the `@nestjs/common` package) is deprecated and will be removed in the next major release. Please, use the `@nestjs/cache-manager` package instead\n * @publicApi\n */\n@Module({\n  providers: [createCacheManager()],\n  exports: [CACHE_MANAGER],\n})\nexport class CacheModule extends ConfigurableModuleClass {\n  /**\n   * Configure the cache manager statically.\n   *\n   * @param options options to configure the cache manager\n   *\n   * @see [Customize caching](https://docs.nestjs.com/techniques/caching#customize-caching)\n   */\n  static register<StoreConfig extends Record<any, any> = Record<string, any>>(\n    options: CacheModuleOptions<StoreConfig> = {} as any,\n  ): DynamicModule {\n    return {\n      global: options.isGlobal,\n      ...super.register(options),\n    };\n  }\n\n  /**\n   * Configure the cache manager dynamically.\n   *\n   * @param options method for dynamically supplying cache manager configuration\n   * options\n   *\n   * @see [Async configuration](https://docs.nestjs.com/techniques/caching#async-configuration)\n   */\n  static registerAsync<\n    StoreConfig extends Record<any, any> = Record<string, any>,\n  >(options: CacheModuleAsyncOptions<StoreConfig>): DynamicModule {\n    const moduleDefinition = super.registerAsync(options);\n\n    return {\n      global: options.isGlobal,\n      ...moduleDefinition,\n      providers: options.extraProviders\n        ? moduleDefinition.providers.concat(options.extraProviders)\n        : moduleDefinition.providers,\n    };\n  }\n}\n"]}