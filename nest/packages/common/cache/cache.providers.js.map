{"version":3,"file":"cache.providers.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/common/","sources":["cache/cache.providers.ts"],"names":[],"mappings":";;;AACA,kEAAyD;AACzD,uDAAkD;AAClD,uEAAiE;AACjE,uDAAwD;AAMxD;;;;GAIG;AACH,SAAgB,kBAAkB;IAChC,OAAO;QACL,OAAO,EAAE,+BAAa;QACtB,UAAU,EAAE,KAAK,EAAE,OAA4B,EAAE,EAAE;YACjD,MAAM,YAAY,GAAG,IAAA,+BAAW,EAAC,eAAe,EAAE,aAAa,EAAE,GAAG,EAAE,CACpE,OAAO,CAAC,eAAe,CAAC,CACzB,CAAC;YACF,MAAM,yBAAyB,GAAG,aAAa,IAAI,YAAY,CAAC;YAChE,MAAM,cAAc,GAAG,KAAK,EAC1B,KAAmC,EACnC,OAA2C,EACb,EAAE;gBAChC,IAAI,CAAC,yBAAyB,EAAE;oBAC9B,OAAO,YAAY,CAAC,OAAO,iCACtB,qCAAmB,mCACd,OAAO,KAAE,KAAK,KACtB,CAAC;iBACJ;gBACD,IAAI,KAAK,GAAmC,QAAQ,CAAC;gBACrD,qCAAmB,CAAC,GAAG,IAAI,IAAI,CAAC;gBAChC,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;oBAC7B,IAAI,QAAQ,IAAI,KAAK,EAAE;wBACrB,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC;qBACtB;yBAAM;wBACL,KAAK,GAAG,KAAK,CAAC;qBACf;iBACF;qBAAM,IAAI,OAAO,KAAK,KAAK,UAAU,EAAE;oBACtC,KAAK,GAAG,KAAK,CAAC;iBACf;gBACD,OAAO,YAAY,CAAC,OAAO,CAAC,KAAK,kCAC5B,qCAAmB,GACnB,OAAO,EACV,CAAC;YACL,CAAC,CAAC;YAEF,OAAO,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC;gBAC3B,CAAC,CAAC,YAAY,CAAC,YAAY,CACvB,MAAM,OAAO,CAAC,GAAG,CACf,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,cAAc,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,CAC5D,CACF;gBACH,CAAC,CAAC,cAAc,CAAC,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QAC7C,CAAC;QACD,MAAM,EAAE,CAAC,8CAAoB,CAAC;KAC/B,CAAC;AACJ,CAAC;AA7CD,gDA6CC","sourcesContent":["import { Provider } from '../interfaces';\nimport { loadPackage } from '../utils/load-package.util';\nimport { CACHE_MANAGER } from './cache.constants';\nimport { MODULE_OPTIONS_TOKEN } from './cache.module-definition';\nimport { defaultCacheOptions } from './default-options';\nimport {\n  CacheManagerOptions,\n  CacheStore,\n} from './interfaces/cache-manager.interface';\n\n/**\n * Creates a CacheManager Provider.\n *\n * @publicApi\n */\nexport function createCacheManager(): Provider {\n  return {\n    provide: CACHE_MANAGER,\n    useFactory: async (options: CacheManagerOptions) => {\n      const cacheManager = loadPackage('cache-manager', 'CacheModule', () =>\n        require('cache-manager'),\n      );\n      const cacheManagerIsv5OrGreater = 'memoryStore' in cacheManager;\n      const cachingFactory = async (\n        store: CacheManagerOptions['store'],\n        options: Omit<CacheManagerOptions, 'store'>,\n      ): Promise<Record<string, any>> => {\n        if (!cacheManagerIsv5OrGreater) {\n          return cacheManager.caching({\n            ...defaultCacheOptions,\n            ...{ ...options, store },\n          });\n        }\n        let cache: string | Function | CacheStore = 'memory';\n        defaultCacheOptions.ttl *= 1000;\n        if (typeof store === 'object') {\n          if ('create' in store) {\n            cache = store.create;\n          } else {\n            cache = store;\n          }\n        } else if (typeof store === 'function') {\n          cache = store;\n        }\n        return cacheManager.caching(cache, {\n          ...defaultCacheOptions,\n          ...options,\n        });\n      };\n\n      return Array.isArray(options)\n        ? cacheManager.multiCaching(\n            await Promise.all(\n              options.map(option => cachingFactory(option.store, option)),\n            ),\n          )\n        : cachingFactory(options.store, options);\n    },\n    inject: [MODULE_OPTIONS_TOKEN],\n  };\n}\n"]}