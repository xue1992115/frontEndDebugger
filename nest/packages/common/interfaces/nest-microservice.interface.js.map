{"version":3,"file":"nest-microservice.interface.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/common/","sources":["interfaces/nest-microservice.interface.ts"],"names":[],"mappings":"","sourcesContent":["import { ExceptionFilter } from './exceptions/exception-filter.interface';\nimport { CanActivate } from './features/can-activate.interface';\nimport { NestInterceptor } from './features/nest-interceptor.interface';\nimport { PipeTransform } from './features/pipe-transform.interface';\nimport { INestApplicationContext } from './nest-application-context.interface';\nimport { WebSocketAdapter } from './websockets/web-socket-adapter.interface';\n\n/**\n * Interface describing Microservice Context.\n *\n * @publicApi\n */\nexport interface INestMicroservice extends INestApplicationContext {\n  /**\n   * Starts the microservice.\n   *\n   * @returns {void}\n   */\n  listen(): Promise<any>;\n\n  /**\n   * Register Ws Adapter which will be used inside Gateways.\n   * Use when you want to override default `socket.io` library.\n   *\n   * @param {WebSocketAdapter} adapter\n   * @returns {this}\n   */\n  useWebSocketAdapter(adapter: WebSocketAdapter): this;\n\n  /**\n   * Registers exception filters as global filters (will be used within every message pattern handler)\n   *\n   * @param {...ExceptionFilter} filters\n   */\n  useGlobalFilters(...filters: ExceptionFilter[]): this;\n\n  /**\n   * Registers pipes as global pipes (will be used within every message pattern handler)\n   *\n   * @param {...PipeTransform} pipes\n   */\n  useGlobalPipes(...pipes: PipeTransform<any>[]): this;\n\n  /**\n   * Registers interceptors as global interceptors (will be used within every message pattern handler)\n   *\n   * @param {...NestInterceptor} interceptors\n   */\n  useGlobalInterceptors(...interceptors: NestInterceptor[]): this;\n\n  /**\n   * Registers guards as global guards (will be used within every message pattern handler)\n   *\n   * @param {...CanActivate} guards\n   */\n  useGlobalGuards(...guards: CanActivate[]): this;\n\n  /**\n   * Terminates the application\n   *\n   * @returns {Promise<void>}\n   */\n  close(): Promise<void>;\n}\n"]}