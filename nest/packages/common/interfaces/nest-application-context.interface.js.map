{"version":3,"file":"nest-application-context.interface.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/common/","sources":["interfaces/nest-application-context.interface.ts"],"names":[],"mappings":"","sourcesContent":["import { ShutdownSignal } from '../enums/shutdown-signal.enum';\nimport { LoggerService, LogLevel } from '../services/logger.service';\nimport { DynamicModule } from './modules';\nimport { Type } from './type.interface';\n\nexport interface GetOrResolveOptions {\n  /**\n   * If enabled, lookup will only be performed in the host module.\n   * @default false\n   */\n  strict?: boolean;\n  /**\n   * If enabled, instead of returning a first instance registered under a given token,\n   * a list of instances will be returned.\n   * @default false\n   */\n  each?: boolean;\n}\n\n/**\n * Interface defining NestApplicationContext.\n *\n * @publicApi\n */\nexport interface INestApplicationContext {\n  /**\n   * Allows navigating through the modules tree, for example, to pull out a specific instance from the selected module.\n   * @returns {INestApplicationContext}\n   */\n  select<T>(module: Type<T> | DynamicModule): INestApplicationContext;\n\n  /**\n   * Retrieves an instance of either injectable or controller, otherwise, throws exception.\n   * @returns {TResult}\n   */\n  get<TInput = any, TResult = TInput>(\n    typeOrToken: Type<TInput> | Function | string | symbol,\n  ): TResult;\n  /**\n   * Retrieves an instance of either injectable or controller, otherwise, throws exception.\n   * @returns {TResult}\n   */\n  get<TInput = any, TResult = TInput>(\n    typeOrToken: Type<TInput> | Function | string | symbol,\n    options: { strict?: boolean; each?: undefined | false },\n  ): TResult;\n  /**\n   * Retrieves a list of instances of either injectables or controllers, otherwise, throws exception.\n   * @returns {Array<TResult>}\n   */\n  get<TInput = any, TResult = TInput>(\n    typeOrToken: Type<TInput> | Function | string | symbol,\n    options: { strict?: boolean; each: true },\n  ): Array<TResult>;\n  /**\n   * Retrieves an instance (or a list of instances) of either injectable or controller, otherwise, throws exception.\n   * @returns {TResult | Array<TResult>}\n   */\n  get<TInput = any, TResult = TInput>(\n    typeOrToken: Type<TInput> | Function | string | symbol,\n    options?: GetOrResolveOptions,\n  ): TResult | Array<TResult>;\n\n  /**\n   * Resolves transient or request-scoped instance of either injectable or controller, otherwise, throws exception.\n   * @returns {Array<TResult>}\n   */\n  resolve<TInput = any, TResult = TInput>(\n    typeOrToken: Type<TInput> | Function | string | symbol,\n  ): Promise<TResult>;\n  /**\n   * Resolves transient or request-scoped instance of either injectable or controller, otherwise, throws exception.\n   * @returns {Array<TResult>}\n   */\n  resolve<TInput = any, TResult = TInput>(\n    typeOrToken: Type<TInput> | Function | string | symbol,\n    contextId?: { id: number },\n  ): Promise<TResult>;\n  /**\n   * Resolves transient or request-scoped instance of either injectable or controller, otherwise, throws exception.\n   * @returns {Array<TResult>}\n   */\n  resolve<TInput = any, TResult = TInput>(\n    typeOrToken: Type<TInput> | Function | string | symbol,\n    contextId?: { id: number },\n    options?: { strict?: boolean; each?: undefined | false },\n  ): Promise<TResult>;\n  /**\n   * Resolves transient or request-scoped instances of either injectables or controllers, otherwise, throws exception.\n   * @returns {Array<TResult>}\n   */\n  resolve<TInput = any, TResult = TInput>(\n    typeOrToken: Type<TInput> | Function | string | symbol,\n    contextId?: { id: number },\n    options?: { strict?: boolean; each: true },\n  ): Promise<Array<TResult>>;\n  /**\n   * Resolves transient or request-scoped instance (or a list of instances) of either injectable or controller, otherwise, throws exception.\n   * @returns {Promise<TResult | Array<TResult>>}\n   */\n  resolve<TInput = any, TResult = TInput>(\n    typeOrToken: Type<TInput> | Function | string | symbol,\n    contextId?: { id: number },\n    options?: GetOrResolveOptions,\n  ): Promise<TResult | Array<TResult>>;\n\n  /**\n   * Registers the request/context object for a given context ID (DI container sub-tree).\n   * @returns {void}\n   */\n  registerRequestByContextId<T = any>(\n    request: T,\n    contextId: { id: number },\n  ): void;\n\n  /**\n   * Terminates the application\n   * @returns {Promise<void>}\n   */\n  close(): Promise<void>;\n\n  /**\n   * Sets custom logger service.\n   * Flushes buffered logs if auto flush is on.\n   * @returns {void}\n   */\n  useLogger(logger: LoggerService | LogLevel[] | false): void;\n\n  /**\n   * Prints buffered logs and detaches buffer.\n   * @returns {void}\n   */\n  flushLogs(): void;\n\n  /**\n   * Enables the usage of shutdown hooks. Will call the\n   * `onApplicationShutdown` function of a provider if the\n   * process receives a shutdown signal.\n   *\n   * @returns {this} The Nest application context instance\n   */\n  enableShutdownHooks(signals?: ShutdownSignal[] | string[]): this;\n\n  /**\n   * Initializes the Nest application.\n   * Calls the Nest lifecycle events.\n   * It isn't mandatory to call this method directly.\n   *\n   * @returns {Promise<this>} The NestApplicationContext instance as Promise\n   */\n  init(): Promise<this>;\n}\n"]}