{"version":3,"file":"version-options.interface.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/common/","sources":["interfaces/version-options.interface.ts"],"names":[],"mappings":";;;AAEA;;;;GAIG;AACU,QAAA,eAAe,GAAG,MAAM,CAAC,iBAAiB,CAAC,CAAC","sourcesContent":["import { VersioningType } from '../enums/version-type.enum';\n\n/**\n * Indicates that this will work for any version passed in the request, or no version.\n *\n * @publicApi\n */\nexport const VERSION_NEUTRAL = Symbol('VERSION_NEUTRAL');\n\n/**\n * @publicApi\n */\nexport type VersionValue =\n  | string\n  | typeof VERSION_NEUTRAL\n  | Array<string | typeof VERSION_NEUTRAL>;\n\n/**\n * @publicApi\n */\nexport interface VersionOptions {\n  /**\n   * Specifies an optional API Version. When configured, methods\n   * within the controller will only be routed if the request version\n   * matches the specified value.\n   *\n   * Supported only by HTTP-based applications (does not apply to non-HTTP microservices).\n   *\n   * @see [Versioning](https://docs.nestjs.com/techniques/versioning)\n   */\n  version?: VersionValue;\n}\n\n/**\n * @publicApi\n */\nexport interface HeaderVersioningOptions {\n  type: VersioningType.HEADER;\n  /**\n   * The name of the Request Header that contains the version.\n   */\n  header: string;\n}\n\n/**\n * @publicApi\n */\nexport interface UriVersioningOptions {\n  type: VersioningType.URI;\n  /**\n   * Optional prefix that will prepend the version within the URI.\n   *\n   * Defaults to `v`.\n   *\n   * Ex. Assuming a version of `1`, for `/api/v1/route`, `v` is the prefix.\n   */\n  prefix?: string | false;\n}\n\n/**\n * @publicApi\n */\nexport interface MediaTypeVersioningOptions {\n  type: VersioningType.MEDIA_TYPE;\n  /**\n   * The key within the Media Type Header to determine the version from.\n   *\n   * Ex. For `application/json;v=1`, the key is `v=`.\n   */\n  key: string;\n}\n\n/**\n * @publicApi\n */\nexport interface CustomVersioningOptions {\n  type: VersioningType.CUSTOM;\n\n  /**\n   * A function that accepts a request object (specific to the underlying platform, ie Express or Fastify)\n   * and returns a single version value or an ordered array of versions, in order from HIGHEST to LOWEST.\n   *\n   * Ex. Returned version array = ['3.1', '3.0', '2.5', '2', '1.9']\n   *\n   * Use type assertion or narrowing to identify the specific request type.\n   */\n  extractor: (request: unknown) => string | string[];\n}\n\n/**\n * @publicApi\n */\ninterface VersioningCommonOptions {\n  /**\n   * The default version to be used as a fallback when you did not provide some\n   * version to `@Controller()` nor `@Version()`.\n   */\n  defaultVersion?: VersionOptions['version'];\n}\n\n/**\n * @publicApi\n */\nexport type VersioningOptions = VersioningCommonOptions &\n  (\n    | HeaderVersioningOptions\n    | UriVersioningOptions\n    | MediaTypeVersioningOptions\n    | CustomVersioningOptions\n  );\n"]}