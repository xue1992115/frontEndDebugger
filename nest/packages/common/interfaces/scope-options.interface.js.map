{"version":3,"file":"scope-options.interface.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/common/","sources":["interfaces/scope-options.interface.ts"],"names":[],"mappings":";;;AAAA;;GAEG;AACH,IAAY,KAeX;AAfD,WAAY,KAAK;IACf;;;;OAIG;IACH,uCAAO,CAAA;IACP;;OAEG;IACH,2CAAS,CAAA;IACT;;OAEG;IACH,uCAAO,CAAA;AACT,CAAC,EAfW,KAAK,GAAL,aAAK,KAAL,aAAK,QAehB","sourcesContent":["/**\n * @publicApi\n */\nexport enum Scope {\n  /**\n   * The provider can be shared across multiple classes. The provider lifetime\n   * is strictly tied to the application lifecycle. Once the application has\n   * bootstrapped, all providers have been instantiated.\n   */\n  DEFAULT,\n  /**\n   * A new private instance of the provider is instantiated for every use\n   */\n  TRANSIENT,\n  /**\n   * A new instance is instantiated for each request processing pipeline\n   */\n  REQUEST,\n}\n\n/**\n * @publicApi\n *\n * @see [Injection Scopes](https://docs.nestjs.com/fundamentals/injection-scopes)\n */\nexport interface ScopeOptions {\n  /**\n   * Specifies the lifetime of an injected Provider or Controller.\n   */\n  scope?: Scope;\n  /**\n   * Flags provider as durable. This flag can be used in combination with custom context id\n   * factory strategy to construct lazy DI subtrees.\n   *\n   * This flag can be used only in conjunction with scope = Scope.REQUEST.\n   */\n  durable?: boolean;\n}\n"]}