{"version":3,"file":"pipe-transform.interface.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/common/","sources":["interfaces/features/pipe-transform.interface.ts"],"names":[],"mappings":"","sourcesContent":["import { Type } from '../type.interface';\nimport { Paramtype } from './paramtype.interface';\n\nexport type Transform<T = any> = (value: T, metadata: ArgumentMetadata) => any;\n\n/**\n * Interface describing a pipe implementation's `transform()` method metadata argument.\n *\n * @see [Pipes](https://docs.nestjs.com/pipes)\n *\n * @publicApi\n */\nexport interface ArgumentMetadata {\n  /**\n   * Indicates whether argument is a body, query, param, or custom parameter\n   */\n  readonly type: Paramtype;\n  /**\n   * Underlying base type (e.g., `String`) of the parameter, based on the type\n   * definition in the route handler.\n   */\n  readonly metatype?: Type<any> | undefined;\n  /**\n   * String passed as an argument to the decorator.\n   * Example: `@Body('userId')` would yield `userId`\n   */\n  readonly data?: string | undefined;\n}\n\n/**\n * Interface describing implementation of a pipe.\n *\n * @see [Pipes](https://docs.nestjs.com/pipes)\n *\n * @publicApi\n */\nexport interface PipeTransform<T = any, R = any> {\n  /**\n   * Method to implement a custom pipe.  Called with two parameters\n   *\n   * @param value argument before it is received by route handler method\n   * @param metadata contains metadata about the value\n   */\n  transform(value: T, metadata: ArgumentMetadata): R;\n}\n"]}