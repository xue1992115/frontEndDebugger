{"version":3,"file":"nest-interceptor.interface.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/common/","sources":["interfaces/features/nest-interceptor.interface.ts"],"names":[],"mappings":"","sourcesContent":["import { Observable } from 'rxjs';\nimport { ExecutionContext } from './execution-context.interface';\n\n/**\n * Interface providing access to the response stream.\n *\n * @see [Interceptors](https://docs.nestjs.com/interceptors)\n *\n * @publicApi\n */\nexport interface CallHandler<T = any> {\n  /**\n   * Returns an `Observable` representing the response stream from the route\n   * handler.\n   */\n  handle(): Observable<T>;\n}\n\n/**\n * Interface describing implementation of an interceptor.\n *\n * @see [Interceptors](https://docs.nestjs.com/interceptors)\n *\n * @publicApi\n */\n\nexport interface NestInterceptor<T = any, R = any> {\n  /**\n   * Method to implement a custom interceptor.\n   *\n   * @param context an `ExecutionContext` object providing methods to access the\n   * route handler and class about to be invoked.\n   * @param next a reference to the `CallHandler`, which provides access to an\n   * `Observable` representing the response stream from the route handler.\n   */\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler<T>,\n  ): Observable<R> | Promise<Observable<R>>;\n}\n"]}