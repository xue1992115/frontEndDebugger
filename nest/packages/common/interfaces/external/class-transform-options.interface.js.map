{"version":3,"file":"class-transform-options.interface.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/common/","sources":["interfaces/external/class-transform-options.interface.ts"],"names":[],"mappings":"","sourcesContent":["/**\n * Options to be passed during transformation.\n *\n * @see https://github.com/typestack/class-transformer\n *\n * @publicApi\n */\nexport interface ClassTransformOptions {\n  /**\n   * Exclusion strategy. By default exposeAll is used, which means that it will expose all properties that\n   * are transformed by default.\n   */\n  strategy?: 'excludeAll' | 'exposeAll';\n  /**\n   * Only properties with given groups will be transformed.\n   */\n  groups?: string[];\n  /**\n   * Only properties with \"since\" > version < \"until\" will be transformed.\n   */\n  version?: number;\n  /**\n   * Excludes properties with the given prefixes. For example, if you mark your private properties with \"_\" and \"__\"\n   * you can set this option's value to [\"_\", \"__\"] and all private properties will be skipped.\n   * This works only for \"exposeAll\" strategy.\n   */\n  excludePrefixes?: string[];\n  /**\n   * If set to true then class transformer will ignore all @Expose and @Exclude decorators and what's inside them.\n   * This option is useful if you want to \"clone\" your object but not apply decorators affects.\n   */\n  ignoreDecorators?: boolean;\n  /**\n   * Target maps allows to set a Types of the transforming object without using @Type decorator.\n   * This is useful when you are transforming external classes, or if you already have type metadata for\n   * objects and you don't want to set it up again.\n   */\n  targetMaps?: any[];\n  /**\n   * If set to true then class transformer will perform a circular check. (Circular check is turned off by default)\n   * This option is useful when you know for sure that your types might have a circular dependency.\n   */\n  enableCircularCheck?: boolean;\n  /**\n   * If set to true class-transformer will attempt conversion based on TS reflected type\n   */\n  enableImplicitConversion?: boolean;\n  /**\n   * If set to true class-transformer will exclude properties which are not part of the original class\n   * and exposing all class properties (with undefined, if nothing else is given)\n   */\n  excludeExtraneousValues?: boolean;\n  /**\n   * If set to true then class transformer will take default values for unprovided fields.\n   * This is useful when you convert a plain object to a class and have an optional field with a default value.\n   */\n  exposeDefaultValues?: boolean;\n  /**\n   * When set to true, fields with `undefined` as value will be included in class to plain transformation. Otherwise\n   * those fields will be omitted from the result.\n   *\n   * DEFAULT: `true`\n   */\n  exposeUnsetFields?: boolean;\n}\n"]}