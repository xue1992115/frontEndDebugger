{"version":3,"file":"nest-application.interface.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/common/","sources":["interfaces/nest-application.interface.ts"],"names":[],"mappings":"","sourcesContent":["import {\n  CorsOptions,\n  CorsOptionsDelegate,\n} from './external/cors-options.interface';\nimport { CanActivate } from './features/can-activate.interface';\nimport { NestInterceptor } from './features/nest-interceptor.interface';\nimport { GlobalPrefixOptions } from './global-prefix-options.interface';\nimport { HttpServer } from './http/http-server.interface';\nimport {\n  ExceptionFilter,\n  INestMicroservice,\n  NestHybridApplicationOptions,\n  PipeTransform,\n} from './index';\nimport { INestApplicationContext } from './nest-application-context.interface';\nimport { VersioningOptions } from './version-options.interface';\nimport { WebSocketAdapter } from './websockets/web-socket-adapter.interface';\n\n/**\n * Interface defining the core NestApplication object.\n *\n * @publicApi\n */\nexport interface INestApplication extends INestApplicationContext {\n  /**\n   * A wrapper function around HTTP adapter method: `adapter.use()`.\n   * Example `app.use(cors())`\n   *\n   * @returns {this}\n   */\n  use(...args: any[]): this;\n\n  /**\n   * Enables CORS (Cross-Origin Resource Sharing)\n   *\n   * @returns {void}\n   */\n  enableCors(options?: CorsOptions | CorsOptionsDelegate<any>): void;\n\n  /**\n   * Enables Versioning for the application.\n   * By default, URI-based versioning is used.\n   *\n   * @param {VersioningOptions} options\n   * @returns {this}\n   */\n  enableVersioning(options?: VersioningOptions): this;\n\n  /**\n   * Starts the application.\n   *\n   * @param {number|string} port\n   * @param {string} [hostname]\n   * @param {Function} [callback] Optional callback\n   * @returns {Promise} A Promise that, when resolved, is a reference to the underlying HttpServer.\n   */\n  listen(port: number | string, callback?: () => void): Promise<any>;\n  listen(\n    port: number | string,\n    hostname: string,\n    callback?: () => void,\n  ): Promise<any>;\n\n  /**\n   * Returns the url the application is listening at, based on OS and IP version. Returns as an IP value either in IPv6 or IPv4\n   *\n   * @returns {Promise<string>} The IP where the server is listening\n   */\n  getUrl(): Promise<string>;\n\n  /**\n   * Registers a prefix for every HTTP route path.\n   *\n   * @param {string} prefix The prefix for every HTTP route path (for example `/v1/api`)\n   * @param {GlobalPrefixOptions} options Global prefix options object\n   * @returns {this}\n   */\n  setGlobalPrefix(prefix: string, options?: GlobalPrefixOptions): this;\n\n  /**\n   * Register Ws Adapter which will be used inside Gateways.\n   * Use when you want to override default `socket.io` library.\n   *\n   * @param {WebSocketAdapter} adapter\n   * @returns {this}\n   */\n  useWebSocketAdapter(adapter: WebSocketAdapter): this;\n\n  /**\n   * Connects microservice to the NestApplication instance. Transforms application\n   * to a hybrid instance.\n   *\n   * @template {object} T\n   * @param {T} options Microservice options object\n   * @param {NestHybridApplicationOptions} hybridOptions Hybrid options object\n   * @returns {INestMicroservice}\n   */\n  connectMicroservice<T extends object = any>(\n    options: T,\n    hybridOptions?: NestHybridApplicationOptions,\n  ): INestMicroservice;\n\n  /**\n   * Returns array of the microservices connected to the NestApplication.\n   *\n   * @returns {INestMicroservice[]}\n   */\n  getMicroservices(): INestMicroservice[];\n\n  /**\n   * Returns the underlying native HTTP server.\n   *\n   * @returns {*}\n   */\n  getHttpServer(): any;\n\n  /**\n   * Returns the underlying HTTP adapter.\n   *\n   * @returns {HttpServer}\n   */\n  getHttpAdapter(): HttpServer;\n\n  /**\n   * Starts all connected microservices asynchronously.\n   *\n   * @returns {Promise}\n   */\n  startAllMicroservices(): Promise<this>;\n\n  /**\n   * Registers exception filters as global filters (will be used within\n   * every HTTP route handler)\n   *\n   * @param {...ExceptionFilter} filters\n   */\n  useGlobalFilters(...filters: ExceptionFilter[]): this;\n\n  /**\n   * Registers pipes as global pipes (will be used within every HTTP route handler)\n   *\n   * @param {...PipeTransform} pipes\n   */\n  useGlobalPipes(...pipes: PipeTransform<any>[]): this;\n\n  /**\n   * Registers interceptors as global interceptors (will be used within\n   * every HTTP route handler)\n   *\n   * @param {...NestInterceptor} interceptors\n   */\n  useGlobalInterceptors(...interceptors: NestInterceptor[]): this;\n\n  /**\n   * Registers guards as global guards (will be used within every HTTP route handler)\n   *\n   * @param {...CanActivate} guards\n   */\n  useGlobalGuards(...guards: CanActivate[]): this;\n\n  /**\n   * Terminates the application (including NestApplication, Gateways, and each connected\n   * microservice)\n   *\n   * @returns {Promise<void>}\n   */\n  close(): Promise<void>;\n}\n"]}