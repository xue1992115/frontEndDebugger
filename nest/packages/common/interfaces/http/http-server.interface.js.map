{"version":3,"file":"http-server.interface.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/common/","sources":["interfaces/http/http-server.interface.ts"],"names":[],"mappings":"","sourcesContent":["import { RequestMethod } from '../../enums';\nimport {\n  CorsOptions,\n  CorsOptionsDelegate,\n} from '../../interfaces/external/cors-options.interface';\nimport { NestApplicationOptions } from '../../interfaces/nest-application-options.interface';\nimport { VersioningOptions, VersionValue } from '../version-options.interface';\n\nexport type ErrorHandler<TRequest = any, TResponse = any> = (\n  error: any,\n  req: TRequest,\n  res: TResponse,\n  next?: Function,\n) => any;\nexport type RequestHandler<TRequest = any, TResponse = any> = (\n  req: TRequest,\n  res: TResponse,\n  next?: Function,\n) => any;\n\nexport interface HttpServer<TRequest = any, TResponse = any> {\n  use(\n    handler:\n      | RequestHandler<TRequest, TResponse>\n      | ErrorHandler<TRequest, TResponse>,\n  ): any;\n  use(\n    path: string,\n    handler:\n      | RequestHandler<TRequest, TResponse>\n      | ErrorHandler<TRequest, TResponse>,\n  ): any;\n  useBodyParser?(...args: any[]): any;\n  get(handler: RequestHandler<TRequest, TResponse>): any;\n  get(path: string, handler: RequestHandler<TRequest, TResponse>): any;\n  post(handler: RequestHandler<TRequest, TResponse>): any;\n  post(path: string, handler: RequestHandler<TRequest, TResponse>): any;\n  head(handler: RequestHandler<TRequest, TResponse>): any;\n  head(path: string, handler: RequestHandler<TRequest, TResponse>): any;\n  delete(handler: RequestHandler<TRequest, TResponse>): any;\n  delete(path: string, handler: RequestHandler<TRequest, TResponse>): any;\n  put(handler: RequestHandler<TRequest, TResponse>): any;\n  put(path: string, handler: RequestHandler<TRequest, TResponse>): any;\n  patch(handler: RequestHandler<TRequest, TResponse>): any;\n  patch(path: string, handler: RequestHandler<TRequest, TResponse>): any;\n  all(path: string, handler: RequestHandler<TRequest, TResponse>): any;\n  all(handler: RequestHandler<TRequest, TResponse>): any;\n  options(handler: RequestHandler<TRequest, TResponse>): any;\n  options(path: string, handler: RequestHandler<TRequest, TResponse>): any;\n  listen(port: number | string, callback?: () => void): any;\n  listen(port: number | string, hostname: string, callback?: () => void): any;\n  reply(response: any, body: any, statusCode?: number): any;\n  status(response: any, statusCode: number): any;\n  end(response: any, message?: string): any;\n  render(response: any, view: string, options: any): any;\n  redirect(response: any, statusCode: number, url: string): any;\n  isHeadersSent(response: any): boolean;\n  setHeader(response: any, name: string, value: string): any;\n  setErrorHandler?(handler: Function, prefix?: string): any;\n  setNotFoundHandler?(handler: Function, prefix?: string): any;\n  useStaticAssets?(...args: any[]): this;\n  setBaseViewsDir?(path: string | string[]): this;\n  setViewEngine?(engineOrOptions: any): this;\n  createMiddlewareFactory(\n    method: RequestMethod,\n  ):\n    | ((path: string, callback: Function) => any)\n    | Promise<(path: string, callback: Function) => any>;\n  getRequestHostname?(request: TRequest): string;\n  getRequestMethod?(request: TRequest): string;\n  getRequestUrl?(request: TRequest): string;\n  getInstance(): any;\n  registerParserMiddleware(...args: any[]): any;\n  enableCors(options: CorsOptions | CorsOptionsDelegate<TRequest>): any;\n  getHttpServer(): any;\n  initHttpServer(options: NestApplicationOptions): void;\n  close(): any;\n  getType(): string;\n  init?(): Promise<void>;\n  applyVersionFilter(\n    handler: Function,\n    version: VersionValue,\n    versioningOptions: VersioningOptions,\n  ): (req: TRequest, res: TResponse, next: () => void) => Function;\n}\n"]}