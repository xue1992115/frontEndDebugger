{"version":3,"file":"parse-enum.pipe.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/common/","sources":["pipes/parse-enum.pipe.ts"],"names":[],"mappings":";;;;AAAA,oCAA8E;AAE9E,8EAG0C;AAU1C;;;;;;GAMG;AACH,IACa,aAAa,GAD1B,MACa,aAAa;IAGxB,YACqB,QAAW,EAClB,OAA8B;QADvB,aAAQ,GAAR,QAAQ,CAAG;QAG9B,IAAI,CAAC,QAAQ,EAAE;YACb,MAAM,IAAI,KAAK,CACb,oFAAoF,CACrF,CAAC;SACH;QACD,OAAO,GAAG,OAAO,IAAI,EAAE,CAAC;QACxB,MAAM,EAAE,gBAAgB,EAAE,mBAAmB,GAAG,kBAAU,CAAC,WAAW,EAAE,GACtE,OAAO,CAAC;QAEV,IAAI,CAAC,gBAAgB;YACnB,gBAAgB;gBAChB,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,yCAAe,CAAC,mBAAmB,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;IAC/D,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,SAAS,CAAC,KAAQ,EAAE,QAA0B;QAClD,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;YACvB,MAAM,IAAI,CAAC,gBAAgB,CACzB,6CAA6C,CAC9C,CAAC;SACH;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAES,MAAM,CAAC,KAAQ;QACvB,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAC/C,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAC5B,CAAC;QACF,OAAO,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IACpC,CAAC;CACF,CAAA;AA3CY,aAAa;IADzB,IAAA,kBAAU,GAAE;IAMR,mBAAA,IAAA,gBAAQ,GAAE,CAAA;;GALF,aAAa,CA2CzB;AA3CY,sCAAa","sourcesContent":["import { ArgumentMetadata, HttpStatus, Injectable, Optional } from '../index';\nimport { PipeTransform } from '../interfaces/features/pipe-transform.interface';\nimport {\n  ErrorHttpStatusCode,\n  HttpErrorByCode,\n} from '../utils/http-error-by-code.util';\n\n/**\n * @publicApi\n */\nexport interface ParseEnumPipeOptions {\n  errorHttpStatusCode?: ErrorHttpStatusCode;\n  exceptionFactory?: (error: string) => any;\n}\n\n/**\n * Defines the built-in ParseEnum Pipe\n *\n * @see [Built-in Pipes](https://docs.nestjs.com/pipes#built-in-pipes)\n *\n * @publicApi\n */\n@Injectable()\nexport class ParseEnumPipe<T = any> implements PipeTransform<T> {\n  protected exceptionFactory: (error: string) => any;\n\n  constructor(\n    protected readonly enumType: T,\n    @Optional() options?: ParseEnumPipeOptions,\n  ) {\n    if (!enumType) {\n      throw new Error(\n        `\"ParseEnumPipe\" requires \"enumType\" argument specified (to validate input values).`,\n      );\n    }\n    options = options || {};\n    const { exceptionFactory, errorHttpStatusCode = HttpStatus.BAD_REQUEST } =\n      options;\n\n    this.exceptionFactory =\n      exceptionFactory ||\n      (error => new HttpErrorByCode[errorHttpStatusCode](error));\n  }\n\n  /**\n   * Method that accesses and performs optional transformation on argument for\n   * in-flight requests.\n   *\n   * @param value currently processed route argument\n   * @param metadata contains metadata about the currently processed route argument\n   */\n  async transform(value: T, metadata: ArgumentMetadata): Promise<T> {\n    if (!this.isEnum(value)) {\n      throw this.exceptionFactory(\n        'Validation failed (enum string is expected)',\n      );\n    }\n    return value;\n  }\n\n  protected isEnum(value: T): boolean {\n    const enumValues = Object.keys(this.enumType).map(\n      item => this.enumType[item],\n    );\n    return enumValues.includes(value);\n  }\n}\n"]}