{"version":3,"file":"parse-uuid.pipe.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/common/","sources":["pipes/parse-uuid.pipe.ts"],"names":[],"mappings":";;;;;AAAA,kFAAqE;AACrE,8EAAiE;AACjE,gEAAuD;AAKvD,8EAG0C;AAC1C,wDAAiD;AAWjD;;;;;;GAMG;AACH,IACa,aAAa,qBAD1B,MACa,aAAa;IAUxB,YAAwB,OAA8B;QACpD,OAAO,GAAG,OAAO,IAAI,EAAE,CAAC;QACxB,MAAM,EACJ,gBAAgB,EAChB,mBAAmB,GAAG,6BAAU,CAAC,WAAW,EAC5C,OAAO,GACR,GAAG,OAAO,CAAC;QAEZ,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,gBAAgB;YACnB,gBAAgB;gBAChB,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,yCAAe,CAAC,mBAAmB,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;IAC/D,CAAC;IAED,KAAK,CAAC,SAAS,CAAC,KAAa,EAAE,QAA0B;QACvD,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,EAAE;YACrC,MAAM,IAAI,CAAC,gBAAgB,CACzB,0BACE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,EACxC,eAAe,CAChB,CAAC;SACH;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAES,MAAM,CAAC,GAAY,EAAE,OAAO,GAAG,KAAK;QAC5C,IAAI,CAAC,IAAA,uBAAQ,EAAC,GAAG,CAAC,EAAE;YAClB,MAAM,IAAI,CAAC,gBAAgB,CAAC,0CAA0C,CAAC,CAAC;SACzE;QACD,MAAM,OAAO,GAAG,eAAa,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QACnD,OAAO,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,IAAI,CAAC,GAAG,CAAC,CAAC;IAC5B,CAAC;;AAxCgB,yBAAW,GAAG;IAC7B,CAAC,EAAE,kEAAkE;IACrE,CAAC,EAAE,wEAAwE;IAC3E,CAAC,EAAE,wEAAwE;IAC3E,GAAG,EAAE,iEAAiE;CACvE,AAL2B,CAK1B;AANS,aAAa;IADzB,IAAA,iCAAU,GAAE;IAWE,mBAAA,IAAA,6BAAQ,GAAE,CAAA;;GAVZ,aAAa,CA0CzB;AA1CY,sCAAa","sourcesContent":["import { Injectable } from '../decorators/core/injectable.decorator';\nimport { Optional } from '../decorators/core/optional.decorator';\nimport { HttpStatus } from '../enums/http-status.enum';\nimport {\n  ArgumentMetadata,\n  PipeTransform,\n} from '../interfaces/features/pipe-transform.interface';\nimport {\n  ErrorHttpStatusCode,\n  HttpErrorByCode,\n} from '../utils/http-error-by-code.util';\nimport { isString } from '../utils/shared.utils';\n\n/**\n * @publicApi\n */\nexport interface ParseUUIDPipeOptions {\n  version?: '3' | '4' | '5';\n  errorHttpStatusCode?: ErrorHttpStatusCode;\n  exceptionFactory?: (errors: string) => any;\n}\n\n/**\n * Defines the built-in ParseUUID Pipe\n *\n * @see [Built-in Pipes](https://docs.nestjs.com/pipes#built-in-pipes)\n *\n * @publicApi\n */\n@Injectable()\nexport class ParseUUIDPipe implements PipeTransform<string> {\n  protected static uuidRegExps = {\n    3: /^[0-9A-F]{8}-[0-9A-F]{4}-3[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,\n    4: /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\n    5: /^[0-9A-F]{8}-[0-9A-F]{4}-5[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\n    all: /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i,\n  };\n  private readonly version: '3' | '4' | '5';\n  protected exceptionFactory: (errors: string) => any;\n\n  constructor(@Optional() options?: ParseUUIDPipeOptions) {\n    options = options || {};\n    const {\n      exceptionFactory,\n      errorHttpStatusCode = HttpStatus.BAD_REQUEST,\n      version,\n    } = options;\n\n    this.version = version;\n    this.exceptionFactory =\n      exceptionFactory ||\n      (error => new HttpErrorByCode[errorHttpStatusCode](error));\n  }\n\n  async transform(value: string, metadata: ArgumentMetadata): Promise<string> {\n    if (!this.isUUID(value, this.version)) {\n      throw this.exceptionFactory(\n        `Validation failed (uuid${\n          this.version ? ` v ${this.version}` : ''\n        } is expected)`,\n      );\n    }\n    return value;\n  }\n\n  protected isUUID(str: unknown, version = 'all') {\n    if (!isString(str)) {\n      throw this.exceptionFactory('The value passed as UUID is not a string');\n    }\n    const pattern = ParseUUIDPipe.uuidRegExps[version];\n    return pattern?.test(str);\n  }\n}\n"]}