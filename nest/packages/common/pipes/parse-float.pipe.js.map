{"version":3,"file":"parse-float.pipe.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/common/","sources":["pipes/parse-float.pipe.ts"],"names":[],"mappings":";;;;AAAA,oCAA8E;AAE9E,8EAG0C;AAU1C;;;;;;GAMG;AACH,IACa,cAAc,GAD3B,MACa,cAAc;IAGzB,YAAwB,OAA+B;QACrD,OAAO,GAAG,OAAO,IAAI,EAAE,CAAC;QACxB,MAAM,EAAE,gBAAgB,EAAE,mBAAmB,GAAG,kBAAU,CAAC,WAAW,EAAE,GACtE,OAAO,CAAC;QAEV,IAAI,CAAC,gBAAgB;YACnB,gBAAgB;gBAChB,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,yCAAe,CAAC,mBAAmB,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;IAC/D,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,SAAS,CAAC,KAAa,EAAE,QAA0B;QACvD,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE;YAC1B,MAAM,IAAI,CAAC,gBAAgB,CACzB,gDAAgD,CACjD,CAAC;SACH;QACD,OAAO,UAAU,CAAC,KAAK,CAAC,CAAC;IAC3B,CAAC;IAED;;;OAGG;IACO,SAAS,CAAC,KAAa;QAC/B,OAAO,CACL,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,QAAQ,CAAC,OAAO,KAAK,CAAC;YAC3C,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;YACzB,QAAQ,CAAC,KAAY,CAAC,CACvB,CAAC;IACJ,CAAC;CACF,CAAA;AAxCY,cAAc;IAD1B,IAAA,kBAAU,GAAE;IAIE,mBAAA,IAAA,gBAAQ,GAAE,CAAA;;GAHZ,cAAc,CAwC1B;AAxCY,wCAAc","sourcesContent":["import { ArgumentMetadata, HttpStatus, Injectable, Optional } from '../index';\nimport { PipeTransform } from '../interfaces/features/pipe-transform.interface';\nimport {\n  ErrorHttpStatusCode,\n  HttpErrorByCode,\n} from '../utils/http-error-by-code.util';\n\n/**\n * @publicApi\n */\nexport interface ParseFloatPipeOptions {\n  errorHttpStatusCode?: ErrorHttpStatusCode;\n  exceptionFactory?: (error: string) => any;\n}\n\n/**\n * Defines the built-in ParseFloat Pipe\n *\n * @see [Built-in Pipes](https://docs.nestjs.com/pipes#built-in-pipes)\n *\n * @publicApi\n */\n@Injectable()\nexport class ParseFloatPipe implements PipeTransform<string> {\n  protected exceptionFactory: (error: string) => any;\n\n  constructor(@Optional() options?: ParseFloatPipeOptions) {\n    options = options || {};\n    const { exceptionFactory, errorHttpStatusCode = HttpStatus.BAD_REQUEST } =\n      options;\n\n    this.exceptionFactory =\n      exceptionFactory ||\n      (error => new HttpErrorByCode[errorHttpStatusCode](error));\n  }\n\n  /**\n   * Method that accesses and performs optional transformation on argument for\n   * in-flight requests.\n   *\n   * @param value currently processed route argument\n   * @param metadata contains metadata about the currently processed route argument\n   */\n  async transform(value: string, metadata: ArgumentMetadata): Promise<number> {\n    if (!this.isNumeric(value)) {\n      throw this.exceptionFactory(\n        'Validation failed (numeric string is expected)',\n      );\n    }\n    return parseFloat(value);\n  }\n\n  /**\n   * @param value currently processed route argument\n   * @returns `true` if `value` is a valid float number\n   */\n  protected isNumeric(value: string): boolean {\n    return (\n      ['string', 'number'].includes(typeof value) &&\n      !isNaN(parseFloat(value)) &&\n      isFinite(value as any)\n    );\n  }\n}\n"]}