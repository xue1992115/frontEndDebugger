{"version":3,"file":"parse-array.pipe.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/common/","sources":["pipes/parse-array.pipe.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '../decorators/core/injectable.decorator';\nimport { Optional } from '../decorators/core/optional.decorator';\nimport { HttpStatus } from '../enums/http-status.enum';\nimport { Type } from '../interfaces';\nimport {\n  ArgumentMetadata,\n  PipeTransform,\n} from '../interfaces/features/pipe-transform.interface';\nimport { HttpErrorByCode } from '../utils/http-error-by-code.util';\nimport { isNil, isUndefined, isString } from '../utils/shared.utils';\nimport { ValidationPipe, ValidationPipeOptions } from './validation.pipe';\n\nconst VALIDATION_ERROR_MESSAGE = 'Validation failed (parsable array expected)';\nconst DEFAULT_ARRAY_SEPARATOR = ',';\n\n/**\n * @publicApi\n */\nexport interface ParseArrayOptions\n  extends Omit<\n    ValidationPipeOptions,\n    'transform' | 'validateCustomDecorators' | 'exceptionFactory'\n  > {\n  items?: Type<unknown>;\n  separator?: string;\n  optional?: boolean;\n  exceptionFactory?: (error: any) => any;\n}\n\n/**\n * Defines the built-in ParseArray Pipe\n *\n * @see [Built-in Pipes](https://docs.nestjs.com/pipes#built-in-pipes)\n *\n * @publicApi\n */\n@Injectable()\nexport class ParseArrayPipe implements PipeTransform {\n  protected readonly validationPipe: ValidationPipe;\n  protected exceptionFactory: (error: string) => any;\n\n  constructor(@Optional() protected readonly options: ParseArrayOptions = {}) {\n    this.validationPipe = new ValidationPipe({\n      transform: true,\n      validateCustomDecorators: true,\n      ...options,\n    });\n\n    const { exceptionFactory, errorHttpStatusCode = HttpStatus.BAD_REQUEST } =\n      options;\n    this.exceptionFactory =\n      exceptionFactory ||\n      (error => new HttpErrorByCode[errorHttpStatusCode](error));\n  }\n\n  /**\n   * Method that accesses and performs optional transformation on argument for\n   * in-flight requests.\n   *\n   * @param value currently processed route argument\n   * @param metadata contains metadata about the currently processed route argument\n   */\n  async transform(value: any, metadata: ArgumentMetadata): Promise<any> {\n    if (!value && !this.options.optional) {\n      throw this.exceptionFactory(VALIDATION_ERROR_MESSAGE);\n    } else if (isNil(value) && this.options.optional) {\n      return value;\n    }\n\n    if (!Array.isArray(value)) {\n      if (!isString(value)) {\n        throw this.exceptionFactory(VALIDATION_ERROR_MESSAGE);\n      } else {\n        try {\n          value = value\n            .trim()\n            .split(this.options.separator || DEFAULT_ARRAY_SEPARATOR);\n        } catch {\n          throw this.exceptionFactory(VALIDATION_ERROR_MESSAGE);\n        }\n      }\n    }\n    if (this.options.items) {\n      const validationMetadata: ArgumentMetadata = {\n        metatype: this.options.items,\n        type: 'query',\n      };\n\n      const isExpectedTypePrimitive = this.isExpectedTypePrimitive();\n      const toClassInstance = (item: any, index?: number) => {\n        if (this.options.items !== String) {\n          try {\n            item = JSON.parse(item);\n          } catch {}\n        }\n        if (isExpectedTypePrimitive) {\n          return this.validatePrimitive(item, index);\n        }\n        return this.validationPipe.transform(item, validationMetadata);\n      };\n      if (this.options.stopAtFirstError === false) {\n        // strict compare to \"false\" to make sure\n        // that this option is disabled by default\n        let errors = [];\n\n        const targetArray = value as Array<unknown>;\n        for (let i = 0; i < targetArray.length; i++) {\n          try {\n            targetArray[i] = await toClassInstance(targetArray[i]);\n          } catch (err) {\n            let message: string[] | unknown;\n            if ((err as any).getResponse) {\n              const response = (err as any).getResponse();\n              if (Array.isArray(response.message)) {\n                message = response.message.map(\n                  (item: string) => `[${i}] ${item}`,\n                );\n              } else {\n                message = `[${i}] ${response.message}`;\n              }\n            } else {\n              message = err;\n            }\n            errors = errors.concat(message);\n          }\n        }\n        if (errors.length > 0) {\n          throw this.exceptionFactory(errors as any);\n        }\n        return targetArray;\n      } else {\n        value = await Promise.all(value.map(toClassInstance));\n      }\n    }\n    return value;\n  }\n\n  protected isExpectedTypePrimitive(): boolean {\n    return [Boolean, Number, String].includes(this.options.items as any);\n  }\n\n  protected validatePrimitive(originalValue: any, index?: number) {\n    if (this.options.items === Number) {\n      const value =\n        originalValue !== null && originalValue !== '' ? +originalValue : NaN;\n      if (isNaN(value)) {\n        throw this.exceptionFactory(\n          `${isUndefined(index) ? '' : `[${index}] `}item must be a number`,\n        );\n      }\n      return value;\n    } else if (this.options.items === String) {\n      if (!isString(originalValue)) {\n        return `${originalValue}`;\n      }\n    } else if (this.options.items === Boolean) {\n      if (typeof originalValue !== 'boolean') {\n        throw this.exceptionFactory(\n          `${\n            isUndefined(index) ? '' : `[${index}] `\n          }item must be a boolean value`,\n        );\n      }\n    }\n    return originalValue;\n  }\n}\n"]}