{"version":3,"file":"validation.pipe.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/common/","sources":["pipes/validation.pipe.ts"],"names":[],"mappings":"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","sourcesContent":["import { iterate } from 'iterare';\nimport { types } from 'util';\nimport { Optional } from '../decorators';\nimport { Injectable } from '../decorators/core';\nimport { HttpStatus } from '../enums/http-status.enum';\nimport { ClassTransformOptions } from '../interfaces/external/class-transform-options.interface';\nimport { TransformerPackage } from '../interfaces/external/transformer-package.interface';\nimport { ValidationError } from '../interfaces/external/validation-error.interface';\nimport { ValidatorOptions } from '../interfaces/external/validator-options.interface';\nimport { ValidatorPackage } from '../interfaces/external/validator-package.interface';\nimport {\n  ArgumentMetadata,\n  PipeTransform,\n} from '../interfaces/features/pipe-transform.interface';\nimport { Type } from '../interfaces/type.interface';\nimport {\n  ErrorHttpStatusCode,\n  HttpErrorByCode,\n} from '../utils/http-error-by-code.util';\nimport { loadPackage } from '../utils/load-package.util';\nimport { isNil } from '../utils/shared.utils';\n\n/**\n * @publicApi\n */\nexport interface ValidationPipeOptions extends ValidatorOptions {\n  transform?: boolean;\n  disableErrorMessages?: boolean;\n  transformOptions?: ClassTransformOptions;\n  errorHttpStatusCode?: ErrorHttpStatusCode;\n  exceptionFactory?: (errors: ValidationError[]) => any;\n  validateCustomDecorators?: boolean;\n  expectedType?: Type<any>;\n  validatorPackage?: ValidatorPackage;\n  transformerPackage?: TransformerPackage;\n}\n\nlet classValidator: ValidatorPackage = {} as any;\nlet classTransformer: TransformerPackage = {} as any;\n\n/**\n * @see [Validation](https://docs.nestjs.com/techniques/validation)\n *\n * @publicApi\n */\n@Injectable()\nexport class ValidationPipe implements PipeTransform<any> {\n  protected isTransformEnabled: boolean;\n  protected isDetailedOutputDisabled?: boolean;\n  protected validatorOptions: ValidatorOptions;\n  protected transformOptions: ClassTransformOptions;\n  protected errorHttpStatusCode: ErrorHttpStatusCode;\n  protected expectedType: Type<any>;\n  protected exceptionFactory: (errors: ValidationError[]) => any;\n  protected validateCustomDecorators: boolean;\n\n  constructor(@Optional() options?: ValidationPipeOptions) {\n    options = options || {};\n    const {\n      transform,\n      disableErrorMessages,\n      errorHttpStatusCode,\n      expectedType,\n      transformOptions,\n      validateCustomDecorators,\n      ...validatorOptions\n    } = options;\n\n    // @see https://github.com/nestjs/nest/issues/10683#issuecomment-1413690508\n    this.validatorOptions = { forbidUnknownValues: false, ...validatorOptions };\n\n    this.isTransformEnabled = !!transform;\n    this.transformOptions = transformOptions;\n    this.isDetailedOutputDisabled = disableErrorMessages;\n    this.validateCustomDecorators = validateCustomDecorators || false;\n    this.errorHttpStatusCode = errorHttpStatusCode || HttpStatus.BAD_REQUEST;\n    this.expectedType = expectedType;\n    this.exceptionFactory =\n      options.exceptionFactory || this.createExceptionFactory();\n\n    classValidator = this.loadValidator(options.validatorPackage);\n    classTransformer = this.loadTransformer(options.transformerPackage);\n  }\n\n  protected loadValidator(\n    validatorPackage?: ValidatorPackage,\n  ): ValidatorPackage {\n    return (\n      validatorPackage ??\n      loadPackage('class-validator', 'ValidationPipe', () =>\n        require('class-validator'),\n      )\n    );\n  }\n\n  protected loadTransformer(\n    transformerPackage?: TransformerPackage,\n  ): TransformerPackage {\n    return (\n      transformerPackage ??\n      loadPackage('class-transformer', 'ValidationPipe', () =>\n        require('class-transformer'),\n      )\n    );\n  }\n\n  public async transform(value: any, metadata: ArgumentMetadata) {\n    if (this.expectedType) {\n      metadata = { ...metadata, metatype: this.expectedType };\n    }\n\n    const metatype = metadata.metatype;\n    if (!metatype || !this.toValidate(metadata)) {\n      return this.isTransformEnabled\n        ? this.transformPrimitive(value, metadata)\n        : value;\n    }\n    const originalValue = value;\n    value = this.toEmptyIfNil(value);\n\n    const isNil = value !== originalValue;\n    const isPrimitive = this.isPrimitive(value);\n    this.stripProtoKeys(value);\n    let entity = classTransformer.plainToClass(\n      metatype,\n      value,\n      this.transformOptions,\n    );\n\n    const originalEntity = entity;\n    const isCtorNotEqual = entity.constructor !== metatype;\n\n    if (isCtorNotEqual && !isPrimitive) {\n      entity.constructor = metatype;\n    } else if (isCtorNotEqual) {\n      // when \"entity\" is a primitive value, we have to temporarily\n      // replace the entity to perform the validation against the original\n      // metatype defined inside the handler\n      entity = { constructor: metatype };\n    }\n\n    const errors = await this.validate(entity, this.validatorOptions);\n    if (errors.length > 0) {\n      throw await this.exceptionFactory(errors);\n    }\n    if (isPrimitive) {\n      // if the value is a primitive value and the validation process has been successfully completed\n      // we have to revert the original value passed through the pipe\n      entity = originalEntity;\n    }\n    if (this.isTransformEnabled) {\n      return entity;\n    }\n    if (isNil) {\n      // if the value was originally undefined or null, revert it back\n      return originalValue;\n    }\n    // we check if the number of keys of the \"validatorOptions\" is higher than 1 (instead of 0)\n    // because the \"forbidUnknownValues\" now fallbacks to \"false\" (in case it wasn't explicitly specified)\n    const shouldTransformToPlain =\n      Object.keys(this.validatorOptions).length > 1;\n    return shouldTransformToPlain\n      ? classTransformer.classToPlain(entity, this.transformOptions)\n      : value;\n  }\n\n  public createExceptionFactory() {\n    return (validationErrors: ValidationError[] = []) => {\n      if (this.isDetailedOutputDisabled) {\n        return new HttpErrorByCode[this.errorHttpStatusCode]();\n      }\n      const errors = this.flattenValidationErrors(validationErrors);\n      return new HttpErrorByCode[this.errorHttpStatusCode](errors);\n    };\n  }\n\n  protected toValidate(metadata: ArgumentMetadata): boolean {\n    const { metatype, type } = metadata;\n    if (type === 'custom' && !this.validateCustomDecorators) {\n      return false;\n    }\n    const types = [String, Boolean, Number, Array, Object, Buffer];\n    return !types.some(t => metatype === t) && !isNil(metatype);\n  }\n\n  protected transformPrimitive(value: any, metadata: ArgumentMetadata) {\n    if (!metadata.data) {\n      // leave top-level query/param objects unmodified\n      return value;\n    }\n    const { type, metatype } = metadata;\n    if (type !== 'param' && type !== 'query') {\n      return value;\n    }\n    if (metatype === Boolean) {\n      return value === true || value === 'true';\n    }\n    if (metatype === Number) {\n      return +value;\n    }\n    return value;\n  }\n\n  protected toEmptyIfNil<T = any, R = any>(value: T): R | {} {\n    return isNil(value) ? {} : value;\n  }\n\n  protected stripProtoKeys(value: any) {\n    if (\n      value == null ||\n      typeof value !== 'object' ||\n      types.isTypedArray(value)\n    ) {\n      return;\n    }\n    if (Array.isArray(value)) {\n      for (const v of value) {\n        this.stripProtoKeys(v);\n      }\n      return;\n    }\n    delete value.__proto__;\n    for (const key in value) {\n      this.stripProtoKeys(value[key]);\n    }\n  }\n\n  protected isPrimitive(value: unknown): boolean {\n    return ['number', 'boolean', 'string'].includes(typeof value);\n  }\n\n  protected validate(\n    object: object,\n    validatorOptions?: ValidatorOptions,\n  ): Promise<ValidationError[]> | ValidationError[] {\n    return classValidator.validate(object, validatorOptions);\n  }\n\n  protected flattenValidationErrors(\n    validationErrors: ValidationError[],\n  ): string[] {\n    return iterate(validationErrors)\n      .map(error => this.mapChildrenToValidationErrors(error))\n      .flatten()\n      .filter(item => !!item.constraints)\n      .map(item => Object.values(item.constraints))\n      .flatten()\n      .toArray();\n  }\n\n  protected mapChildrenToValidationErrors(\n    error: ValidationError,\n    parentPath?: string,\n  ): ValidationError[] {\n    if (!(error.children && error.children.length)) {\n      return [error];\n    }\n    const validationErrors = [];\n    parentPath = parentPath\n      ? `${parentPath}.${error.property}`\n      : error.property;\n    for (const item of error.children) {\n      if (item.children && item.children.length) {\n        validationErrors.push(\n          ...this.mapChildrenToValidationErrors(item, parentPath),\n        );\n      }\n      validationErrors.push(\n        this.prependConstraintsWithParentProp(parentPath, item),\n      );\n    }\n    return validationErrors;\n  }\n\n  protected prependConstraintsWithParentProp(\n    parentPath: string,\n    error: ValidationError,\n  ): ValidationError {\n    const constraints = {};\n    for (const key in error.constraints) {\n      constraints[key] = `${parentPath}.${error.constraints[key]}`;\n    }\n    return {\n      ...error,\n      constraints,\n    };\n  }\n}\n"]}