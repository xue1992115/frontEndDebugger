{"version":3,"file":"file-type.validator.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/common/","sources":["pipes/file/file-type.validator.ts"],"names":[],"mappings":";;;AAAA,yEAA2D;AAM3D;;;;;;;;;;GAUG;AACH,MAAa,iBAAkB,SAAQ,wCAAuC;IAC5E,iBAAiB;QACf,OAAO,uCAAuC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,GAAG,CAAC;IACnF,CAAC;IAED,OAAO,CAAC,IAAS;QACf,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE;YAC3B,OAAO,IAAI,CAAC;SACb;QAED,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAClB,OAAO,KAAK,CAAC;SACd;QAED,OAAO,OAAO,CACX,IAAI,CAAC,QAAmB,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CACjE,CAAC;IACJ,CAAC;CACF;AAlBD,8CAkBC","sourcesContent":["import { FileValidator } from './file-validator.interface';\n\nexport type FileTypeValidatorOptions = {\n  fileType: string | RegExp;\n};\n\n/**\n * Defines the built-in FileType File Validator. It validates incoming files mime-type\n * matching a string or a regular expression. Note that this validator uses a naive strategy\n * to check the mime-type and could be fooled if the client provided a file with renamed extension.\n * (for instance, renaming a 'malicious.bat' to 'malicious.jpeg'). To handle such security issues\n * with more reliability, consider checking against the file's [magic-numbers](https://en.wikipedia.org/wiki/Magic_number_%28programming%29)\n *\n * @see [File Validators](https://docs.nestjs.com/techniques/file-upload#validators)\n *\n * @publicApi\n */\nexport class FileTypeValidator extends FileValidator<FileTypeValidatorOptions> {\n  buildErrorMessage(): string {\n    return `Validation failed (expected type is ${this.validationOptions.fileType})`;\n  }\n\n  isValid(file: any): boolean {\n    if (!this.validationOptions) {\n      return true;\n    }\n\n    if (!file.mimetype) {\n      return false;\n    }\n\n    return Boolean(\n      (file.mimetype as string).match(this.validationOptions.fileType),\n    );\n  }\n}\n"]}