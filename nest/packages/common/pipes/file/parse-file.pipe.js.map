{"version":3,"file":"parse-file.pipe.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/common/","sources":["pipes/file/parse-file.pipe.ts"],"names":[],"mappings":";;;;AAAA,gDAA6D;AAC7D,uCAAyC;AAEzC,iFAAsE;AACtE,2DAA0E;AAI1E;;;;;;;;;GASG;AACH,IACa,aAAa,GAD1B,MACa,aAAa;IAKxB,YAAwB,UAA4B,EAAE;QACpD,MAAM,EACJ,gBAAgB,EAChB,mBAAmB,GAAG,kBAAU,CAAC,WAAW,EAC5C,UAAU,GAAG,EAAE,EACf,cAAc,GACf,GAAG,OAAO,CAAC;QAEZ,IAAI,CAAC,gBAAgB;YACnB,gBAAgB;gBAChB,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,yCAAe,CAAC,mBAAmB,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QAE7D,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,cAAc,GAAG,cAAc,aAAd,cAAc,cAAd,cAAc,GAAI,IAAI,CAAC;IAC/C,CAAC;IAED,KAAK,CAAC,SAAS,CAAC,KAAU;QACxB,MAAM,kBAAkB,GAAG,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;QAEzD,IAAI,kBAAkB,IAAI,IAAI,CAAC,cAAc,EAAE;YAC7C,MAAM,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,CAAC;SACjD;QACD,IAAI,CAAC,kBAAkB,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE;YACjD,MAAM,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;SACvC;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAEO,KAAK,CAAC,mBAAmB,CAAC,KAAU;QAC1C,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YACxB,MAAM,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SACrD;aAAM;YACL,MAAM,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;SAC5B;IACH,CAAC;IAEO,iBAAiB,CAAC,KAAU;QAClC,MAAM,YAAY,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,IAAA,sBAAO,EAAC,KAAK,CAAC,CAAC;QAC5D,MAAM,aAAa,GAAG,IAAA,uBAAQ,EAAC,KAAK,CAAC,IAAI,IAAA,sBAAO,EAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;QACrE,OAAO,IAAA,0BAAW,EAAC,KAAK,CAAC,IAAI,YAAY,IAAI,aAAa,CAAC;IAC7D,CAAC;IAES,KAAK,CAAC,QAAQ,CAAC,IAAS;QAChC,KAAK,MAAM,SAAS,IAAI,IAAI,CAAC,UAAU,EAAE;YACvC,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;SAC7C;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAEO,KAAK,CAAC,eAAe,CAAC,IAAS,EAAE,SAAwB;QAC/D,MAAM,OAAO,GAAG,MAAM,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAE9C,IAAI,CAAC,OAAO,EAAE;YACZ,MAAM,YAAY,GAAG,SAAS,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YACvD,MAAM,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;SAC3C;IACH,CAAC;IAED;;OAEG;IACH,aAAa;QACX,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;CACF,CAAA;AAtEY,aAAa;IADzB,IAAA,iBAAU,GAAE;IAME,mBAAA,IAAA,eAAQ,GAAE,CAAA;;GALZ,aAAa,CAsEzB;AAtEY,sCAAa","sourcesContent":["import { Injectable, Optional } from '../../decorators/core';\nimport { HttpStatus } from '../../enums';\nimport { PipeTransform } from '../../interfaces/features/pipe-transform.interface';\nimport { HttpErrorByCode } from '../../utils/http-error-by-code.util';\nimport { isEmpty, isObject, isUndefined } from '../../utils/shared.utils';\nimport { FileValidator } from './file-validator.interface';\nimport { ParseFileOptions } from './parse-file-options.interface';\n\n/**\n * Defines the built-in ParseFile Pipe. This pipe can be used to validate incoming files\n * with `@UploadedFile()` decorator. You can use either other specific built-in validators\n * or provide one of your own, simply implementing it through FileValidator interface\n * and adding it to ParseFilePipe's constructor.\n *\n * @see [Built-in Pipes](https://docs.nestjs.com/pipes#built-in-pipes)\n *\n * @publicApi\n */\n@Injectable()\nexport class ParseFilePipe implements PipeTransform<any> {\n  protected exceptionFactory: (error: string) => any;\n  private readonly validators: FileValidator[];\n  private readonly fileIsRequired: boolean;\n\n  constructor(@Optional() options: ParseFileOptions = {}) {\n    const {\n      exceptionFactory,\n      errorHttpStatusCode = HttpStatus.BAD_REQUEST,\n      validators = [],\n      fileIsRequired,\n    } = options;\n\n    this.exceptionFactory =\n      exceptionFactory ||\n      (error => new HttpErrorByCode[errorHttpStatusCode](error));\n\n    this.validators = validators;\n    this.fileIsRequired = fileIsRequired ?? true;\n  }\n\n  async transform(value: any): Promise<any> {\n    const areThereAnyFilesIn = this.thereAreNoFilesIn(value);\n\n    if (areThereAnyFilesIn && this.fileIsRequired) {\n      throw this.exceptionFactory('File is required');\n    }\n    if (!areThereAnyFilesIn && this.validators.length) {\n      await this.validateFilesOrFile(value);\n    }\n\n    return value;\n  }\n\n  private async validateFilesOrFile(value: any): Promise<void> {\n    if (Array.isArray(value)) {\n      await Promise.all(value.map(f => this.validate(f)));\n    } else {\n      await this.validate(value);\n    }\n  }\n\n  private thereAreNoFilesIn(value: any): boolean {\n    const isEmptyArray = Array.isArray(value) && isEmpty(value);\n    const isEmptyObject = isObject(value) && isEmpty(Object.keys(value));\n    return isUndefined(value) || isEmptyArray || isEmptyObject;\n  }\n\n  protected async validate(file: any): Promise<any> {\n    for (const validator of this.validators) {\n      await this.validateOrThrow(file, validator);\n    }\n    return file;\n  }\n\n  private async validateOrThrow(file: any, validator: FileValidator) {\n    const isValid = await validator.isValid(file);\n\n    if (!isValid) {\n      const errorMessage = validator.buildErrorMessage(file);\n      throw this.exceptionFactory(errorMessage);\n    }\n  }\n\n  /**\n   * @returns list of validators used in this pipe.\n   */\n  getValidators() {\n    return this.validators;\n  }\n}\n"]}