{"version":3,"file":"parse-bool.pipe.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/common/","sources":["pipes/parse-bool.pipe.ts"],"names":[],"mappings":";;;;AAAA,kFAAqE;AACrE,8EAAiE;AACjE,gEAAuD;AAKvD,8EAG0C;AAU1C;;;;;;GAMG;AACH,IACa,aAAa,GAD1B,MACa,aAAa;IAKxB,YAAwB,OAA8B;QACpD,OAAO,GAAG,OAAO,IAAI,EAAE,CAAC;QACxB,MAAM,EAAE,gBAAgB,EAAE,mBAAmB,GAAG,6BAAU,CAAC,WAAW,EAAE,GACtE,OAAO,CAAC;QACV,IAAI,CAAC,gBAAgB;YACnB,gBAAgB;gBAChB,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,yCAAe,CAAC,mBAAmB,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;IAC/D,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,SAAS,CACb,KAAuB,EACvB,QAA0B;QAE1B,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;YACtB,OAAO,IAAI,CAAC;SACb;QACD,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YACvB,OAAO,KAAK,CAAC;SACd;QACD,MAAM,IAAI,CAAC,gBAAgB,CACzB,gDAAgD,CACjD,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACO,MAAM,CAAC,KAAuB;QACtC,OAAO,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,MAAM,CAAC;IAC5C,CAAC;IAED;;;;OAIG;IACO,OAAO,CAAC,KAAuB;QACvC,OAAO,KAAK,KAAK,KAAK,IAAI,KAAK,KAAK,OAAO,CAAC;IAC9C,CAAC;CACF,CAAA;AArDY,aAAa;IADzB,IAAA,iCAAU,GAAE;IAME,mBAAA,IAAA,6BAAQ,GAAE,CAAA;;GALZ,aAAa,CAqDzB;AArDY,sCAAa","sourcesContent":["import { Injectable } from '../decorators/core/injectable.decorator';\nimport { Optional } from '../decorators/core/optional.decorator';\nimport { HttpStatus } from '../enums/http-status.enum';\nimport {\n  ArgumentMetadata,\n  PipeTransform,\n} from '../interfaces/features/pipe-transform.interface';\nimport {\n  ErrorHttpStatusCode,\n  HttpErrorByCode,\n} from '../utils/http-error-by-code.util';\n\n/**\n * @publicApi\n */\nexport interface ParseBoolPipeOptions {\n  errorHttpStatusCode?: ErrorHttpStatusCode;\n  exceptionFactory?: (error: string) => any;\n}\n\n/**\n * Defines the built-in ParseBool Pipe\n *\n * @see [Built-in Pipes](https://docs.nestjs.com/pipes#built-in-pipes)\n *\n * @publicApi\n */\n@Injectable()\nexport class ParseBoolPipe\n  implements PipeTransform<string | boolean, Promise<boolean>>\n{\n  protected exceptionFactory: (error: string) => any;\n\n  constructor(@Optional() options?: ParseBoolPipeOptions) {\n    options = options || {};\n    const { exceptionFactory, errorHttpStatusCode = HttpStatus.BAD_REQUEST } =\n      options;\n    this.exceptionFactory =\n      exceptionFactory ||\n      (error => new HttpErrorByCode[errorHttpStatusCode](error));\n  }\n\n  /**\n   * Method that accesses and performs optional transformation on argument for\n   * in-flight requests.\n   *\n   * @param value currently processed route argument\n   * @param metadata contains metadata about the currently processed route argument\n   */\n  async transform(\n    value: string | boolean,\n    metadata: ArgumentMetadata,\n  ): Promise<boolean> {\n    if (this.isTrue(value)) {\n      return true;\n    }\n    if (this.isFalse(value)) {\n      return false;\n    }\n    throw this.exceptionFactory(\n      'Validation failed (boolean string is expected)',\n    );\n  }\n\n  /**\n   * @param value currently processed route argument\n   * @returns `true` if `value` is said 'true', ie., if it is equal to the boolean\n   * `true` or the string `\"true\"`\n   */\n  protected isTrue(value: string | boolean): boolean {\n    return value === true || value === 'true';\n  }\n\n  /**\n   * @param value currently processed route argument\n   * @returns `true` if `value` is said 'false', ie., if it is equal to the boolean\n   * `false` or the string `\"false\"`\n   */\n  protected isFalse(value: string | boolean): boolean {\n    return value === false || value === 'false';\n  }\n}\n"]}