{"version":3,"file":"configurable-module-host.interface.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/common/","sources":["module-utils/interfaces/configurable-module-host.interface.ts"],"names":[],"mappings":"","sourcesContent":["import { ConfigurableModuleAsyncOptions } from './configurable-module-async-options.interface';\nimport { ConfigurableModuleCls } from './configurable-module-cls.interface';\n\n/**\n * Configurable module host. See properties for more details\n *\n * @publicApi\n */\nexport interface ConfigurableModuleHost<\n  ModuleOptions = Record<string, unknown>,\n  MethodKey extends string = string,\n  FactoryClassMethodKey extends string = string,\n  ExtraModuleDefinitionOptions = {},\n> {\n  /**\n   * Class that represents a blueprint/prototype for a configurable Nest module.\n   * This class provides static methods for constructing dynamic modules. Their names\n   * can be controlled through the \"MethodKey\" type argument.\n   *\n   * Your module class should inherit from this class to make the static methods available.\n   *\n   * @example\n   * ```typescript\n   * @Module({})\n   * class IntegrationModule extends ConfigurableModuleCls {\n   *  // ...\n   * }\n   * ```\n   */\n  ConfigurableModuleClass: ConfigurableModuleCls<\n    ModuleOptions,\n    MethodKey,\n    FactoryClassMethodKey,\n    ExtraModuleDefinitionOptions\n  >;\n  /**\n   * Module options provider token. Can be used to inject the \"options object\" to\n   * providers registered within the host module.\n   */\n  MODULE_OPTIONS_TOKEN: string | symbol;\n  /**\n   * Can be used to auto-infer the compound \"async module options\" type.\n   * Note: this property is not supposed to be used as a value.\n   *\n   * @example\n   * ```typescript\n   * @Module({})\n   * class IntegrationModule extends ConfigurableModuleCls {\n   *  static module = initializer(IntegrationModule);\n   *\n   * static registerAsync(options: typeof ASYNC_OPTIONS_TYPE): DynamicModule {\n   *  return super.registerAsync(options);\n   * }\n   * ```\n   */\n  ASYNC_OPTIONS_TYPE: ConfigurableModuleAsyncOptions<\n    ModuleOptions,\n    FactoryClassMethodKey\n  > &\n    Partial<ExtraModuleDefinitionOptions>;\n  /**\n   * Can be used to auto-infer the compound \"module options\" type (options interface + extra module definition options).\n   * Note: this property is not supposed to be used as a value.\n   *\n   * @example\n   * ```typescript\n   * @Module({})\n   * class IntegrationModule extends ConfigurableModuleCls {\n   *  static module = initializer(IntegrationModule);\n   *\n   * static register(options: typeof OPTIONS_TYPE): DynamicModule {\n   *  return super.register(options);\n   * }\n   * ```\n   */\n  OPTIONS_TYPE: ModuleOptions & Partial<ExtraModuleDefinitionOptions>;\n}\n"]}