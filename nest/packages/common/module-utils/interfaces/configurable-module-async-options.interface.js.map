{"version":3,"file":"configurable-module-async-options.interface.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/common/","sources":["module-utils/interfaces/configurable-module-async-options.interface.ts"],"names":[],"mappings":"","sourcesContent":["import {\n  FactoryProvider,\n  ModuleMetadata,\n  Provider,\n  Type,\n} from '../../interfaces';\nimport { DEFAULT_FACTORY_CLASS_METHOD_KEY } from '../constants';\n\n/**\n * Interface that must be implemented by the module options factory class.\n * Method key varies depending on the \"FactoryClassMethodKey\" type argument.\n *\n * @publicApi\n */\nexport type ConfigurableModuleOptionsFactory<\n  ModuleOptions,\n  FactoryClassMethodKey extends string,\n> = Record<\n  `${FactoryClassMethodKey}`,\n  () => Promise<ModuleOptions> | ModuleOptions\n>;\n\n/**\n * Interface that represents the module async options object\n * Factory method name varies depending on the \"FactoryClassMethodKey\" type argument.\n *\n * @publicApi\n */\nexport interface ConfigurableModuleAsyncOptions<\n  ModuleOptions,\n  FactoryClassMethodKey extends string = typeof DEFAULT_FACTORY_CLASS_METHOD_KEY,\n> extends Pick<ModuleMetadata, 'imports'> {\n  /**\n   * Injection token resolving to an existing provider. The provider must implement\n   * the corresponding interface.\n   */\n  useExisting?: Type<\n    ConfigurableModuleOptionsFactory<ModuleOptions, FactoryClassMethodKey>\n  >;\n  /**\n   * Injection token resolving to a class that will be instantiated as a provider.\n   * The class must implement the corresponding interface.\n   */\n  useClass?: Type<\n    ConfigurableModuleOptionsFactory<ModuleOptions, FactoryClassMethodKey>\n  >;\n  /**\n   * Function returning options (or a Promise resolving to options) to configure the\n   * cache module.\n   */\n  useFactory?: (...args: any[]) => Promise<ModuleOptions> | ModuleOptions;\n  /**\n   * Dependencies that a Factory may inject.\n   */\n  inject?: FactoryProvider['inject'];\n  /**\n   * List of parent module's providers that will be filtered to only provide necessary\n   * providers for the 'inject' array\n   * useful to pass options to nested async modules\n   */\n  provideInjectionTokensFrom?: Provider[];\n}\n"]}