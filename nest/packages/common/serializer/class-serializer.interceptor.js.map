{"version":3,"file":"class-serializer.interceptor.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/common/","sources":["serializer/class-serializer.interceptor.ts"],"names":[],"mappings":";;;;AAEA,8CAAqC;AACrC,6CAAkE;AAClE,gDAAgD;AAIhD,kEAAyD;AACzD,wDAAiD;AACjD,6EAAwE;AAExE,IAAI,gBAAgB,GAAuB,EAAS,CAAC;AAMrD,kBAAkB;AAClB,kEAAkE;AAClE,mCAAmC;AACnC,MAAM,SAAS,GAAG,WAAW,CAAC;AAU9B;;GAEG;AACH,IACa,0BAA0B,GADvC,MACa,0BAA0B;IACrC,YACwC,SAAc,EAEjC,iBAAoD,EAAE;;QAFnC,cAAS,GAAT,SAAS,CAAK;QAEjC,mBAAc,GAAd,cAAc,CAAwC;QAEzE,gBAAgB;YACd,MAAA,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,kBAAkB,mCAClC,IAAA,+BAAW,EAAC,mBAAmB,EAAE,4BAA4B,EAAE,GAAG,EAAE,CAClE,OAAO,CAAC,mBAAmB,CAAC,CAC7B,CAAC;QAEJ,IAAI,CAAC,CAAA,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,kBAAkB,CAAA,EAAE;YACvC,OAAO,CAAC,mBAAmB,CAAC,CAAC;SAC9B;IACH,CAAC;IAED,SAAS,CAAC,OAAyB,EAAE,IAAiB;QACpD,MAAM,cAAc,GAAG,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;QACvD,MAAM,OAAO,mCACR,IAAI,CAAC,cAAc,GACnB,cAAc,CAClB,CAAC;QACF,OAAO,IAAI;aACR,MAAM,EAAE;aACR,IAAI,CACH,IAAA,eAAG,EAAC,CAAC,GAAmD,EAAE,EAAE,CAC1D,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,OAAO,CAAC,CAC7B,CACF,CAAC;IACN,CAAC;IAED;;OAEG;IACH,SAAS,CACP,QAAwD,EACxD,OAAsC;QAEtC,IAAI,CAAC,IAAA,uBAAQ,EAAC,QAAQ,CAAC,IAAI,QAAQ,YAAY,4BAAc,EAAE;YAC7D,OAAO,QAAQ,CAAC;SACjB;QAED,OAAO,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC;YAC5B,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;YAC5D,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IAC/C,CAAC;IAED,gBAAgB,CACd,YAAiB,EACjB,OAAsC;QAEtC,IAAI,CAAC,YAAY,EAAE;YACjB,OAAO,YAAY,CAAC;SACrB;QACD,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE;YACjB,OAAO,gBAAgB,CAAC,YAAY,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;SAC7D;QACD,IAAI,YAAY,YAAY,OAAO,CAAC,IAAI,EAAE;YACxC,OAAO,gBAAgB,CAAC,YAAY,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;SAC7D;QACD,MAAM,QAAQ,GAAG,gBAAgB,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;QAC3E,OAAO,gBAAgB,CAAC,YAAY,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IAC1D,CAAC;IAES,iBAAiB,CACzB,OAAyB;QAEzB,OAAO,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,qDAAwB,EAAE;YAChE,OAAO,CAAC,UAAU,EAAE;YACpB,OAAO,CAAC,QAAQ,EAAE;SACnB,CAAC,CAAC;IACL,CAAC;CACF,CAAA;AAzEY,0BAA0B;IADtC,IAAA,iBAAU,GAAE;IAGR,mBAAA,IAAA,aAAM,EAAC,SAAS,CAAC,CAAA;IACjB,mBAAA,IAAA,eAAQ,GAAE,CAAA;;GAHF,0BAA0B,CAyEtC;AAzEY,gEAA0B","sourcesContent":["import { ClassSerializerContextOptions } from './class-serializer.interfaces';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Inject, Injectable, Optional } from '../decorators/core';\nimport { StreamableFile } from '../file-stream';\nimport { CallHandler, ExecutionContext, NestInterceptor } from '../interfaces';\nimport { ClassTransformOptions } from '../interfaces/external/class-transform-options.interface';\nimport { TransformerPackage } from '../interfaces/external/transformer-package.interface';\nimport { loadPackage } from '../utils/load-package.util';\nimport { isObject } from '../utils/shared.utils';\nimport { CLASS_SERIALIZER_OPTIONS } from './class-serializer.constants';\n\nlet classTransformer: TransformerPackage = {} as any;\n\nexport interface PlainLiteralObject {\n  [key: string]: any;\n}\n\n// NOTE (external)\n// We need to deduplicate them here due to the circular dependency\n// between core and common packages\nconst REFLECTOR = 'Reflector';\n\n/**\n * @publicApi\n */\nexport interface ClassSerializerInterceptorOptions\n  extends ClassTransformOptions {\n  transformerPackage?: TransformerPackage;\n}\n\n/**\n * @publicApi\n */\n@Injectable()\nexport class ClassSerializerInterceptor implements NestInterceptor {\n  constructor(\n    @Inject(REFLECTOR) protected readonly reflector: any,\n    @Optional()\n    protected readonly defaultOptions: ClassSerializerInterceptorOptions = {},\n  ) {\n    classTransformer =\n      defaultOptions?.transformerPackage ??\n      loadPackage('class-transformer', 'ClassSerializerInterceptor', () =>\n        require('class-transformer'),\n      );\n\n    if (!defaultOptions?.transformerPackage) {\n      require('class-transformer');\n    }\n  }\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {\n    const contextOptions = this.getContextOptions(context);\n    const options = {\n      ...this.defaultOptions,\n      ...contextOptions,\n    };\n    return next\n      .handle()\n      .pipe(\n        map((res: PlainLiteralObject | Array<PlainLiteralObject>) =>\n          this.serialize(res, options),\n        ),\n      );\n  }\n\n  /**\n   * Serializes responses that are non-null objects nor streamable files.\n   */\n  serialize(\n    response: PlainLiteralObject | Array<PlainLiteralObject>,\n    options: ClassSerializerContextOptions,\n  ): PlainLiteralObject | Array<PlainLiteralObject> {\n    if (!isObject(response) || response instanceof StreamableFile) {\n      return response;\n    }\n\n    return Array.isArray(response)\n      ? response.map(item => this.transformToPlain(item, options))\n      : this.transformToPlain(response, options);\n  }\n\n  transformToPlain(\n    plainOrClass: any,\n    options: ClassSerializerContextOptions,\n  ): PlainLiteralObject {\n    if (!plainOrClass) {\n      return plainOrClass;\n    }\n    if (!options.type) {\n      return classTransformer.classToPlain(plainOrClass, options);\n    }\n    if (plainOrClass instanceof options.type) {\n      return classTransformer.classToPlain(plainOrClass, options);\n    }\n    const instance = classTransformer.plainToClass(options.type, plainOrClass);\n    return classTransformer.classToPlain(instance, options);\n  }\n\n  protected getContextOptions(\n    context: ExecutionContext,\n  ): ClassSerializerContextOptions | undefined {\n    return this.reflector.getAllAndOverride(CLASS_SERIALIZER_OPTIONS, [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n  }\n}\n"]}