{"version":3,"file":"external-context-creator.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/core/","sources":["helpers/external-context-creator.ts"],"names":[],"mappings":"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","sourcesContent":["import { ForbiddenException, ParamData } from '@nestjs/common';\nimport { CUSTOM_ROUTE_ARGS_METADATA } from '@nestjs/common/constants';\nimport {\n  ContextType,\n  Controller,\n  PipeTransform,\n} from '@nestjs/common/interfaces';\nimport { isEmpty } from '@nestjs/common/utils/shared.utils';\nimport { lastValueFrom, isObservable } from 'rxjs';\nimport { ExternalExceptionFilterContext } from '../exceptions/external-exception-filter-context';\nimport { FORBIDDEN_MESSAGE } from '../guards/constants';\nimport { GuardsConsumer, GuardsContextCreator } from '../guards';\nimport { STATIC_CONTEXT } from '../injector/constants';\nimport { NestContainer } from '../injector/container';\nimport { ContextId } from '../injector/instance-wrapper';\nimport { ModulesContainer } from '../injector/modules-container';\nimport {\n  InterceptorsConsumer,\n  InterceptorsContextCreator,\n} from '../interceptors';\nimport { PipesConsumer, PipesContextCreator } from '../pipes';\nimport { ContextUtils, ParamProperties } from './context-utils';\nimport { ExternalErrorProxy } from './external-proxy';\nimport { HandlerMetadataStorage } from './handler-metadata-storage';\nimport { ExternalHandlerMetadata } from './interfaces/external-handler-metadata.interface';\nimport { ParamsMetadata } from './interfaces/params-metadata.interface';\n\nexport interface ParamsFactory {\n  exchangeKeyForValue(type: number, data: ParamData, args: any): any;\n}\n\nexport interface ExternalContextOptions {\n  guards?: boolean;\n  interceptors?: boolean;\n  filters?: boolean;\n}\n\nexport class ExternalContextCreator {\n  private readonly contextUtils = new ContextUtils();\n  private readonly externalErrorProxy = new ExternalErrorProxy();\n  private readonly handlerMetadataStorage =\n    new HandlerMetadataStorage<ExternalHandlerMetadata>();\n  private container: NestContainer;\n\n  constructor(\n    private readonly guardsContextCreator: GuardsContextCreator,\n    private readonly guardsConsumer: GuardsConsumer,\n    private readonly interceptorsContextCreator: InterceptorsContextCreator,\n    private readonly interceptorsConsumer: InterceptorsConsumer,\n    private readonly modulesContainer: ModulesContainer,\n    private readonly pipesContextCreator: PipesContextCreator,\n    private readonly pipesConsumer: PipesConsumer,\n    private readonly filtersContextCreator: ExternalExceptionFilterContext,\n  ) {}\n\n  static fromContainer(container: NestContainer): ExternalContextCreator {\n    const guardsContextCreator = new GuardsContextCreator(\n      container,\n      container.applicationConfig,\n    );\n    const guardsConsumer = new GuardsConsumer();\n    const interceptorsContextCreator = new InterceptorsContextCreator(\n      container,\n      container.applicationConfig,\n    );\n    const interceptorsConsumer = new InterceptorsConsumer();\n    const pipesContextCreator = new PipesContextCreator(\n      container,\n      container.applicationConfig,\n    );\n    const pipesConsumer = new PipesConsumer();\n    const filtersContextCreator = new ExternalExceptionFilterContext(\n      container,\n      container.applicationConfig,\n    );\n\n    const externalContextCreator = new ExternalContextCreator(\n      guardsContextCreator,\n      guardsConsumer,\n      interceptorsContextCreator,\n      interceptorsConsumer,\n      container.getModules(),\n      pipesContextCreator,\n      pipesConsumer,\n      filtersContextCreator,\n    );\n    externalContextCreator.container = container;\n    return externalContextCreator;\n  }\n\n  public create<\n    TParamsMetadata extends ParamsMetadata = ParamsMetadata,\n    TContext extends string = ContextType,\n  >(\n    instance: Controller,\n    callback: (...args: unknown[]) => unknown,\n    methodName: string,\n    metadataKey?: string,\n    paramsFactory?: ParamsFactory,\n    contextId = STATIC_CONTEXT,\n    inquirerId?: string,\n    options: ExternalContextOptions = {\n      interceptors: true,\n      guards: true,\n      filters: true,\n    },\n    contextType: TContext = 'http' as TContext,\n  ) {\n    const module = this.getContextModuleKey(instance.constructor);\n    const { argsLength, paramtypes, getParamsMetadata } = this.getMetadata<\n      TParamsMetadata,\n      TContext\n    >(instance, methodName, metadataKey, paramsFactory, contextType);\n    const pipes = this.pipesContextCreator.create(\n      instance,\n      callback,\n      module,\n      contextId,\n      inquirerId,\n    );\n    const guards = this.guardsContextCreator.create(\n      instance,\n      callback,\n      module,\n      contextId,\n      inquirerId,\n    );\n    const exceptionFilter = this.filtersContextCreator.create(\n      instance,\n      callback,\n      module,\n      contextId,\n      inquirerId,\n    );\n    const interceptors = options.interceptors\n      ? this.interceptorsContextCreator.create(\n          instance,\n          callback,\n          module,\n          contextId,\n          inquirerId,\n        )\n      : [];\n\n    const paramsMetadata = getParamsMetadata(module, contextId, inquirerId);\n    const paramsOptions = paramsMetadata\n      ? this.contextUtils.mergeParamsMetatypes(paramsMetadata, paramtypes)\n      : [];\n\n    const fnCanActivate = options.guards\n      ? this.createGuardsFn(guards, instance, callback, contextType)\n      : null;\n    const fnApplyPipes = this.createPipesFn(pipes, paramsOptions);\n    const handler =\n      (initialArgs: unknown[], ...args: unknown[]) =>\n      async () => {\n        if (fnApplyPipes) {\n          await fnApplyPipes(initialArgs, ...args);\n          return callback.apply(instance, initialArgs);\n        }\n        return callback.apply(instance, args);\n      };\n\n    const target = async (...args: any[]) => {\n      const initialArgs = this.contextUtils.createNullArray(argsLength);\n      fnCanActivate && (await fnCanActivate(args));\n\n      const result = await this.interceptorsConsumer.intercept(\n        interceptors,\n        args,\n        instance,\n        callback,\n        handler(initialArgs, ...args),\n        contextType,\n      );\n      return this.transformToResult(result);\n    };\n    return options.filters\n      ? this.externalErrorProxy.createProxy(\n          target,\n          exceptionFilter,\n          contextType,\n        )\n      : target;\n  }\n\n  public getMetadata<TMetadata, TContext extends string = ContextType>(\n    instance: Controller,\n    methodName: string,\n    metadataKey?: string,\n    paramsFactory?: ParamsFactory,\n    contextType?: TContext,\n  ): ExternalHandlerMetadata {\n    const cacheMetadata = this.handlerMetadataStorage.get(instance, methodName);\n    if (cacheMetadata) {\n      return cacheMetadata;\n    }\n    const metadata =\n      this.contextUtils.reflectCallbackMetadata<TMetadata>(\n        instance,\n        methodName,\n        metadataKey || '',\n      ) || {};\n    const keys = Object.keys(metadata);\n    const argsLength = this.contextUtils.getArgumentsLength(keys, metadata);\n    const paramtypes = this.contextUtils.reflectCallbackParamtypes(\n      instance,\n      methodName,\n    );\n    const contextFactory = this.contextUtils.getContextFactory<TContext>(\n      contextType,\n      instance,\n      instance[methodName],\n    );\n    const getParamsMetadata = (\n      moduleKey: string,\n      contextId = STATIC_CONTEXT,\n      inquirerId?: string,\n    ) =>\n      paramsFactory\n        ? this.exchangeKeysForValues(\n            keys,\n            metadata,\n            moduleKey,\n            paramsFactory,\n            contextId,\n            inquirerId,\n            contextFactory,\n          )\n        : null;\n\n    const handlerMetadata: ExternalHandlerMetadata = {\n      argsLength,\n      paramtypes,\n      getParamsMetadata,\n    };\n    this.handlerMetadataStorage.set(instance, methodName, handlerMetadata);\n    return handlerMetadata;\n  }\n\n  public getContextModuleKey(moduleCtor: Function | undefined): string {\n    const emptyModuleKey = '';\n    if (!moduleCtor) {\n      return emptyModuleKey;\n    }\n    const moduleContainerEntries = this.modulesContainer.entries();\n    for (const [key, moduleRef] of moduleContainerEntries) {\n      if (moduleRef.hasProvider(moduleCtor)) {\n        return key;\n      }\n    }\n    return emptyModuleKey;\n  }\n\n  public exchangeKeysForValues<TMetadata = any>(\n    keys: string[],\n    metadata: TMetadata,\n    moduleContext: string,\n    paramsFactory: ParamsFactory,\n    contextId = STATIC_CONTEXT,\n    inquirerId?: string,\n    contextFactory = this.contextUtils.getContextFactory('http'),\n  ): ParamProperties[] {\n    this.pipesContextCreator.setModuleContext(moduleContext);\n\n    return keys.map(key => {\n      const { index, data, pipes: pipesCollection } = metadata[key];\n      const pipes = this.pipesContextCreator.createConcreteContext(\n        pipesCollection,\n        contextId,\n        inquirerId,\n      );\n      const type = this.contextUtils.mapParamType(key);\n\n      if (key.includes(CUSTOM_ROUTE_ARGS_METADATA)) {\n        const { factory } = metadata[key];\n        const customExtractValue = this.contextUtils.getCustomFactory(\n          factory,\n          data,\n          contextFactory,\n        );\n        return { index, extractValue: customExtractValue, type, data, pipes };\n      }\n      const numericType = Number(type);\n      const extractValue = (...args: unknown[]) =>\n        paramsFactory.exchangeKeyForValue(numericType, data, args);\n\n      return { index, extractValue, type: numericType, data, pipes };\n    });\n  }\n\n  public createPipesFn(\n    pipes: PipeTransform[],\n    paramsOptions: (ParamProperties & { metatype?: unknown })[],\n  ) {\n    const pipesFn = async (args: unknown[], ...params: unknown[]) => {\n      const resolveParamValue = async (\n        param: ParamProperties & { metatype?: unknown },\n      ) => {\n        const {\n          index,\n          extractValue,\n          type,\n          data,\n          metatype,\n          pipes: paramPipes,\n        } = param;\n        const value = extractValue(...params);\n\n        args[index] = await this.getParamValue(\n          value,\n          { metatype, type, data },\n          pipes.concat(paramPipes),\n        );\n      };\n      await Promise.all(paramsOptions.map(resolveParamValue));\n    };\n    return paramsOptions.length ? pipesFn : null;\n  }\n\n  public async getParamValue<T>(\n    value: T,\n    { metatype, type, data }: { metatype: any; type: any; data: any },\n    pipes: PipeTransform[],\n  ): Promise<any> {\n    return isEmpty(pipes)\n      ? value\n      : this.pipesConsumer.apply(value, { metatype, type, data }, pipes);\n  }\n\n  public async transformToResult(resultOrDeferred: any) {\n    if (isObservable(resultOrDeferred)) {\n      return lastValueFrom(resultOrDeferred);\n    }\n    return resultOrDeferred;\n  }\n\n  public createGuardsFn<TContext extends string = ContextType>(\n    guards: any[],\n    instance: Controller,\n    callback: (...args: any[]) => any,\n    contextType?: TContext,\n  ): Function | null {\n    const canActivateFn = async (args: any[]) => {\n      const canActivate = await this.guardsConsumer.tryActivate<TContext>(\n        guards,\n        args,\n        instance,\n        callback,\n        contextType,\n      );\n      if (!canActivate) {\n        throw new ForbiddenException(FORBIDDEN_MESSAGE);\n      }\n    };\n    return guards.length ? canActivateFn : null;\n  }\n\n  public registerRequestProvider<T = any>(request: T, contextId: ContextId) {\n    this.container.registerRequestProvider<T>(request, contextId);\n  }\n}\n"]}