{"version":3,"file":"handler-metadata-storage.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/core/","sources":["helpers/handler-metadata-storage.ts"],"names":[],"mappings":";;;;AAGA,qDAA0D;AAK7C,QAAA,uBAAuB,GAAG,MAAM,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;AAkC5E,MAAa,sBAAsB;IAAnC;QAImB,QAAyB,GAAG,IAAI,GAAG,EAAkB,CAAC;IAiBzE,CAAC;IAfC,GAAG,CAAC,UAAgB,EAAE,UAAkB,EAAE,QAAgB;QACxD,MAAM,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;QAChE,IAAI,CAAC,+BAAuB,CAAC,CAAC,GAAG,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;IAC3D,CAAC;IAED,GAAG,CAAC,UAAgB,EAAE,UAAkB;QACtC,MAAM,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;QAChE,OAAO,IAAI,CAAC,+BAAuB,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;IACxD,CAAC;IAEO,cAAc,CAAC,UAAsB,EAAE,UAAkB;QAC/D,MAAM,IAAI,GAAG,UAAU,CAAC,WAAW,CAAC;QACpC,MAAM,aAAa,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,6BAAiB,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;QACrE,OAAO,aAAa,GAAG,UAAU,CAAC;IACpC,CAAC;CACF;AArBD,wDAqBC;KAjBmB,+BAAuB","sourcesContent":["import { Controller, Type } from '@nestjs/common/interfaces';\nimport { IncomingMessage } from 'http';\nimport { Observable } from 'rxjs';\nimport { CONTROLLER_ID_KEY } from '../injector/constants';\nimport { ContextId } from '../injector/instance-wrapper';\nimport { HeaderStream } from '../router/sse-stream';\nimport { ParamProperties } from './context-utils';\n\nexport const HANDLER_METADATA_SYMBOL = Symbol.for('handler_metadata:cache');\n\nexport type HandleResponseFn = HandlerResponseBasicFn | HandleSseResponseFn;\n\nexport type HandlerResponseBasicFn = <TResult, TResponse>(\n  result: TResult,\n  res: TResponse,\n  req?: any,\n) => any;\n\nexport type HandleSseResponseFn = <\n  TResult extends Observable<unknown> = any,\n  TResponse extends HeaderStream = any,\n  TRequest extends IncomingMessage = any,\n>(\n  result: TResult,\n  res: TResponse,\n  req: TRequest,\n) => any;\n\nexport interface HandlerMetadata {\n  argsLength: number;\n  paramtypes: any[];\n  httpStatusCode: number;\n  responseHeaders: any[];\n  hasCustomHeaders: boolean;\n  getParamsMetadata: (\n    moduleKey: string,\n    contextId?: ContextId,\n    inquirerId?: string,\n  ) => (ParamProperties & { metatype?: any })[];\n  fnHandleResponse: HandleResponseFn;\n}\n\nexport class HandlerMetadataStorage<\n  TValue = HandlerMetadata,\n  TKey extends Type<unknown> = any,\n> {\n  private readonly [HANDLER_METADATA_SYMBOL] = new Map<string, TValue>();\n\n  set(controller: TKey, methodName: string, metadata: TValue) {\n    const metadataKey = this.getMetadataKey(controller, methodName);\n    this[HANDLER_METADATA_SYMBOL].set(metadataKey, metadata);\n  }\n\n  get(controller: TKey, methodName: string): TValue | undefined {\n    const metadataKey = this.getMetadataKey(controller, methodName);\n    return this[HANDLER_METADATA_SYMBOL].get(metadataKey);\n  }\n\n  private getMetadataKey(controller: Controller, methodName: string): string {\n    const ctor = controller.constructor;\n    const controllerKey = ctor && (ctor[CONTROLLER_ID_KEY] || ctor.name);\n    return controllerKey + methodName;\n  }\n}\n"]}