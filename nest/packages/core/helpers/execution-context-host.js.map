{"version":3,"file":"execution-context-host.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/core/","sources":["helpers/execution-context-host.ts"],"names":[],"mappings":";;;AASA,MAAa,oBAAoB;IAG/B,YACmB,IAAW,EACX,iBAA4B,IAAI,EAChC,UAAoB,IAAI;QAFxB,SAAI,GAAJ,IAAI,CAAO;QACX,mBAAc,GAAd,cAAc,CAAkB;QAChC,YAAO,GAAP,OAAO,CAAiB;QALnC,gBAAW,GAAG,MAAM,CAAC;IAM1B,CAAC;IAEJ,OAAO,CAAwC,IAAc;QAC3D,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,CAAC;IACpC,CAAC;IAED,OAAO;QACL,OAAO,IAAI,CAAC,WAAuB,CAAC;IACtC,CAAC;IAED,QAAQ;QACN,OAAO,IAAI,CAAC,cAAc,CAAC;IAC7B,CAAC;IAED,UAAU;QACR,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED,OAAO;QACL,OAAO,IAAI,CAAC,IAAS,CAAC;IACxB,CAAC;IAED,aAAa,CAAU,KAAa;QAClC,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK,CAAM,CAAC;IAC/B,CAAC;IAED,WAAW;QACT,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE;YACzB,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;YACpC,UAAU,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;SACxC,CAAC,CAAC;IACL,CAAC;IAED,YAAY;QACV,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE;YACzB,UAAU,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;YACvC,WAAW,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;YACxC,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;SACrC,CAAC,CAAC;IACL,CAAC;IAED,UAAU;QACR,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE;YACzB,SAAS,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;YACtC,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;SACrC,CAAC,CAAC;IACL,CAAC;CACF;AAtDD,oDAsDC","sourcesContent":["import { ExecutionContext } from '@nestjs/common';\nimport { Type } from '@nestjs/common/interfaces';\nimport {\n  ContextType,\n  HttpArgumentsHost,\n  RpcArgumentsHost,\n  WsArgumentsHost,\n} from '@nestjs/common/interfaces/features/arguments-host.interface';\n\nexport class ExecutionContextHost implements ExecutionContext {\n  private contextType = 'http';\n\n  constructor(\n    private readonly args: any[],\n    private readonly constructorRef: Type<any> = null,\n    private readonly handler: Function = null,\n  ) {}\n\n  setType<TContext extends string = ContextType>(type: TContext) {\n    type && (this.contextType = type);\n  }\n\n  getType<TContext extends string = ContextType>(): TContext {\n    return this.contextType as TContext;\n  }\n\n  getClass<T = any>(): Type<T> {\n    return this.constructorRef;\n  }\n\n  getHandler(): Function {\n    return this.handler;\n  }\n\n  getArgs<T extends Array<any> = any[]>(): T {\n    return this.args as T;\n  }\n\n  getArgByIndex<T = any>(index: number): T {\n    return this.args[index] as T;\n  }\n\n  switchToRpc(): RpcArgumentsHost {\n    return Object.assign(this, {\n      getData: () => this.getArgByIndex(0),\n      getContext: () => this.getArgByIndex(1),\n    });\n  }\n\n  switchToHttp(): HttpArgumentsHost {\n    return Object.assign(this, {\n      getRequest: () => this.getArgByIndex(0),\n      getResponse: () => this.getArgByIndex(1),\n      getNext: () => this.getArgByIndex(2),\n    });\n  }\n\n  switchToWs(): WsArgumentsHost {\n    return Object.assign(this, {\n      getClient: () => this.getArgByIndex(0),\n      getData: () => this.getArgByIndex(1),\n    });\n  }\n}\n"]}