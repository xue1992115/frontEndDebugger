{"version":3,"file":"discovery-service.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/core/","sources":["discovery/discovery-service.ts"],"names":[],"mappings":";;;;AAAA,2CAAqD;AAGrD,qEAAiE;AASjE;;GAEG;AACH,IACa,gBAAgB,GAD7B,MACa,gBAAgB;IAC3B,YAA6B,gBAAkC;QAAlC,qBAAgB,GAAhB,gBAAgB,CAAkB;IAAG,CAAC;IAEnE,YAAY,CACV,UAA4B,EAAE,EAC9B,UAAoB,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;QAE5C,MAAM,SAAS,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACpE,OAAO,IAAA,gBAAO,EAAC,SAAS,CAAC,CAAC;IAC5B,CAAC;IAED,cAAc,CACZ,UAA4B,EAAE,EAC9B,UAAoB,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;QAE5C,MAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACxE,OAAO,IAAA,gBAAO,EAAC,WAAW,CAAC,CAAC;IAC9B,CAAC;IAES,UAAU,CAAC,UAA4B,EAAE;QACjD,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;YACpB,MAAM,UAAU,GAAG,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC,CAAC;YACvD,OAAO,UAAU,CAAC;SACnB;QACD,MAAM,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAC7D,OAAO,WAAW,CAAC;IACrB,CAAC;IAEO,kBAAkB,CAAC,OAAmB;QAC5C,MAAM,UAAU,GAAG,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC,CAAC;QACvD,OAAO,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE,CACxC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,KAAK,QAAQ,CAAC,CACxC,CAAC;IACJ,CAAC;CACF,CAAA;AAlCY,gBAAgB;IAD5B,IAAA,mBAAU,GAAE;6CAEoC,oCAAgB;GADpD,gBAAgB,CAkC5B;AAlCY,4CAAgB","sourcesContent":["import { flatten, Injectable } from '@nestjs/common';\nimport { InstanceWrapper } from '../injector/instance-wrapper';\nimport { Module } from '../injector/module';\nimport { ModulesContainer } from '../injector/modules-container';\n\n/**\n * @publicApi\n */\nexport interface DiscoveryOptions {\n  include?: Function[];\n}\n\n/**\n * @publicApi\n */\n@Injectable()\nexport class DiscoveryService {\n  constructor(private readonly modulesContainer: ModulesContainer) {}\n\n  getProviders(\n    options: DiscoveryOptions = {},\n    modules: Module[] = this.getModules(options),\n  ): InstanceWrapper[] {\n    const providers = modules.map(item => [...item.providers.values()]);\n    return flatten(providers);\n  }\n\n  getControllers(\n    options: DiscoveryOptions = {},\n    modules: Module[] = this.getModules(options),\n  ): InstanceWrapper[] {\n    const controllers = modules.map(item => [...item.controllers.values()]);\n    return flatten(controllers);\n  }\n\n  protected getModules(options: DiscoveryOptions = {}): Module[] {\n    if (!options.include) {\n      const moduleRefs = [...this.modulesContainer.values()];\n      return moduleRefs;\n    }\n    const whitelisted = this.includeWhitelisted(options.include);\n    return whitelisted;\n  }\n\n  private includeWhitelisted(include: Function[]): Module[] {\n    const moduleRefs = [...this.modulesContainer.values()];\n    return moduleRefs.filter(({ metatype }) =>\n      include.some(item => item === metatype),\n    );\n  }\n}\n"]}