{"version":3,"file":"routes-resolver.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/core/","sources":["router/routes-resolver.ts"],"names":[],"mappings":";;;AAAA,2CAAwE;AACxE,wDAIkC;AAOlC,2EAAgE;AAEhE,kDAG6B;AAK7B,0DAAsD;AAGtD,6DAAwD;AACxD,yEAAoE;AACpE,uDAAmD;AACnD,iDAA6C;AAE7C,MAAa,cAAc;IASzB,YACmB,SAAwB,EACxB,iBAAoC,EACpC,QAAkB,EACnC,cAA8B;QAHb,cAAS,GAAT,SAAS,CAAe;QACxB,sBAAiB,GAAjB,iBAAiB,CAAmB;QACpC,aAAQ,GAAR,QAAQ,CAAU;QAXpB,WAAM,GAAG,IAAI,uBAAM,CAAC,cAAc,CAAC,IAAI,EAAE;YACxD,SAAS,EAAE,IAAI;SAChB,CAAC,CAAC;QACc,gBAAW,GAAG,IAAI,0BAAW,EAAE,CAAC;QAW/C,MAAM,cAAc,GAAG,SAAS,CAAC,iBAAiB,EAAE,CAAC;QACrD,IAAI,CAAC,sBAAsB,GAAG,IAAI,iDAAsB,CACtD,SAAS,EACT,iBAAiB,EACjB,cAAc,CACf,CAAC;QACF,IAAI,CAAC,gBAAgB,GAAG,IAAI,qCAAgB,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAErE,MAAM,eAAe,GAAG,IAAI,kCAAe,EAAE,CAAC;QAC9C,IAAI,CAAC,cAAc,GAAG,IAAI,gCAAc,CACtC,eAAe,EACf,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,QAAQ,EACb,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,sBAAsB,EAC3B,IAAI,CAAC,iBAAiB,EACtB,IAAI,CAAC,gBAAgB,EACrB,cAAc,CACf,CAAC;IACJ,CAAC;IAEM,OAAO,CACZ,cAAiB,EACjB,YAAoB;QAEpB,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC;QAC5C,OAAO,CAAC,OAAO,CAAC,CAAC,EAAE,WAAW,EAAE,QAAQ,EAAE,EAAE,UAAU,EAAE,EAAE;YACxD,MAAM,UAAU,GAAG,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC;YACxD,IAAI,CAAC,eAAe,CAClB,WAAW,EACX,UAAU,EACV,YAAY,EACZ,UAAU,EACV,cAAc,CACf,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,eAAe,CACpB,MAAoE,EACpE,UAAkB,EAClB,YAAoB,EACpB,UAAkB,EAClB,cAA0B;QAE1B,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,EAAE;YAC/B,MAAM,EAAE,QAAQ,EAAE,GAAG,eAAe,CAAC;YAErC,MAAM,IAAI,GAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;YAC5C,MAAM,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,iBAAiB,CACvD,QAAqB,CACtB,CAAC;YACF,MAAM,iBAAiB,GAAG,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;YAC5D,MAAM,cAAc,GAAG,QAAQ,CAAC,IAAI,CAAC;YAErC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;gBACzB,MAAM,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC;oBAC9C,QAAQ,EAAE,IAAI;oBACd,UAAU;oBACV,YAAY;iBACb,CAAC,CAAC;gBACH,IAAI,CAAC,iBAAiB,EAAE;oBACtB,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;wBACxB,MAAM,UAAU,GAAG,IAAA,qCAA0B,EAAC,cAAc,EAAE,IAAI,CAAC,CAAC;wBACpE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;oBAC9B,CAAC,CAAC,CAAC;iBACJ;qBAAM;oBACL,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;wBACxB,MAAM,UAAU,GAAG,IAAA,+CAAoC,EACrD,cAAc,EACd,IAAI,EACJ,iBAAiB,CAClB,CAAC;wBACF,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;oBAC9B,CAAC,CAAC,CAAC;iBACJ;gBAED,MAAM,iBAAiB,GAAG,IAAI,CAAC,iBAAiB,CAAC,aAAa,EAAE,CAAC;gBACjE,MAAM,iBAAiB,GAAsB;oBAC3C,QAAQ,EAAE,IAAI;oBACd,UAAU;oBACV,YAAY;oBACZ,iBAAiB;oBACjB,iBAAiB;iBAClB,CAAC;gBACF,IAAI,CAAC,cAAc,CAAC,OAAO,CACzB,eAAe,EACf,UAAU,EACV,cAAc,EACd,IAAI,EACJ,iBAAiB,CAClB,CAAC;YACJ,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,uBAAuB;QAC5B,MAAM,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,iBAAiB,EAAE,CAAC;QAC1D,MAAM,QAAQ,GAAG,CAAsB,GAAa,EAAE,GAAc,EAAE,EAAE;YACtE,MAAM,MAAM,GAAG,cAAc,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;YACpD,MAAM,GAAG,GAAG,cAAc,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;YAC9C,MAAM,IAAI,0BAAiB,CAAC,UAAU,MAAM,IAAI,GAAG,EAAE,CAAC,CAAC;QACzD,CAAC,CAAC;QACF,MAAM,OAAO,GAAG,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,EAAE,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;QAC5E,MAAM,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QAC9D,cAAc,CAAC,kBAAkB;YAC/B,cAAc,CAAC,kBAAkB,CAC/B,KAAK,EACL,IAAI,CAAC,iBAAiB,CAAC,eAAe,EAAE,CACzC,CAAC;IACN,CAAC;IAEM,wBAAwB;QAC7B,MAAM,QAAQ,GAAG,CACf,GAAW,EACX,GAAa,EACb,GAAc,EACd,IAAc,EACd,EAAE;YACF,MAAM,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;QACvC,CAAC,CAAC;QACF,MAAM,OAAO,GAAG,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAChD,EAAE,EACF,QAAe,EACf,SAAS,CACV,CAAC;QACF,MAAM,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,yBAAyB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QAC5E,MAAM,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,iBAAiB,EAAE,CAAC;QAC1D,cAAc,CAAC,eAAe;YAC5B,cAAc,CAAC,eAAe,CAC5B,KAAK,EACL,IAAI,CAAC,iBAAiB,CAAC,eAAe,EAAE,CACzC,CAAC;IACN,CAAC;IAEM,oBAAoB,CAAC,GAAQ;QAClC,QAAQ,IAAI,EAAE;YACZ,oFAAoF;YACpF,uFAAuF;YACvF,+BAA+B;YAC/B,KAAK,GAAG,YAAY,WAAW,IAAI,GAAG,YAAY,QAAQ;gBACxD,OAAO,IAAI,4BAAmB,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YAC9C;gBACE,OAAO,GAAG,CAAC;SACd;IACH,CAAC;IAEO,qBAAqB,CAAC,QAAuB;QACnD,MAAM,gBAAgB,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC;QACrD,MAAM,UAAU,GAAG,OAAO,CAAC,WAAW,CACpC,uBAAW,GAAG,gBAAgB,CAAC,aAAa,EAC5C,QAAQ,CACT,CAAC;QACF,OAAO,UAAU,aAAV,UAAU,cAAV,UAAU,GAAI,OAAO,CAAC,WAAW,CAAC,uBAAW,EAAE,QAAQ,CAAC,CAAC;IAClE,CAAC;IAEO,eAAe,CACrB,QAAkC;QAElC,OAAO,OAAO,CAAC,WAAW,CAAC,yBAAa,EAAE,QAAQ,CAAC,CAAC;IACtD,CAAC;IAEO,kBAAkB,CACxB,QAAkC;;QAElC,MAAM,gBAAgB,GAAG,IAAI,CAAC,iBAAiB,CAAC,aAAa,EAAE,CAAC;QAChE,IAAI,gBAAgB,EAAE;YACpB,OAAO,CACL,MAAA,OAAO,CAAC,WAAW,CAAC,4BAAgB,EAAE,QAAQ,CAAC,mCAC/C,gBAAgB,CAAC,cAAc,CAChC,CAAC;SACH;IACH,CAAC;CACF;AA5LD,wCA4LC","sourcesContent":["import { BadRequestException, NotFoundException } from '@nestjs/common';\nimport {\n  HOST_METADATA,\n  MODULE_PATH,\n  VERSION_METADATA,\n} from '@nestjs/common/constants';\nimport {\n  Controller,\n  HttpServer,\n  Type,\n  VersionValue,\n} from '@nestjs/common/interfaces';\nimport { Logger } from '@nestjs/common/services/logger.service';\nimport { ApplicationConfig } from '../application-config';\nimport {\n  CONTROLLER_MAPPING_MESSAGE,\n  VERSIONED_CONTROLLER_MAPPING_MESSAGE,\n} from '../helpers/messages';\nimport { NestContainer } from '../injector/container';\nimport { Injector } from '../injector/injector';\nimport { InstanceWrapper } from '../injector/instance-wrapper';\nimport { GraphInspector } from '../inspector/graph-inspector';\nimport { MetadataScanner } from '../metadata-scanner';\nimport { Resolver } from './interfaces/resolver.interface';\nimport { RoutePathMetadata } from './interfaces/route-path-metadata.interface';\nimport { RoutePathFactory } from './route-path-factory';\nimport { RouterExceptionFilters } from './router-exception-filters';\nimport { RouterExplorer } from './router-explorer';\nimport { RouterProxy } from './router-proxy';\n\nexport class RoutesResolver implements Resolver {\n  private readonly logger = new Logger(RoutesResolver.name, {\n    timestamp: true,\n  });\n  private readonly routerProxy = new RouterProxy();\n  private readonly routePathFactory: RoutePathFactory;\n  private readonly routerExceptionsFilter: RouterExceptionFilters;\n  private readonly routerExplorer: RouterExplorer;\n\n  constructor(\n    private readonly container: NestContainer,\n    private readonly applicationConfig: ApplicationConfig,\n    private readonly injector: Injector,\n    graphInspector: GraphInspector,\n  ) {\n    const httpAdapterRef = container.getHttpAdapterRef();\n    this.routerExceptionsFilter = new RouterExceptionFilters(\n      container,\n      applicationConfig,\n      httpAdapterRef,\n    );\n    this.routePathFactory = new RoutePathFactory(this.applicationConfig);\n\n    const metadataScanner = new MetadataScanner();\n    this.routerExplorer = new RouterExplorer(\n      metadataScanner,\n      this.container,\n      this.injector,\n      this.routerProxy,\n      this.routerExceptionsFilter,\n      this.applicationConfig,\n      this.routePathFactory,\n      graphInspector,\n    );\n  }\n\n  public resolve<T extends HttpServer>(\n    applicationRef: T,\n    globalPrefix: string,\n  ) {\n    const modules = this.container.getModules();\n    modules.forEach(({ controllers, metatype }, moduleName) => {\n      const modulePath = this.getModulePathMetadata(metatype);\n      this.registerRouters(\n        controllers,\n        moduleName,\n        globalPrefix,\n        modulePath,\n        applicationRef,\n      );\n    });\n  }\n\n  public registerRouters(\n    routes: Map<string | symbol | Function, InstanceWrapper<Controller>>,\n    moduleName: string,\n    globalPrefix: string,\n    modulePath: string,\n    applicationRef: HttpServer,\n  ) {\n    routes.forEach(instanceWrapper => {\n      const { metatype } = instanceWrapper;\n\n      const host = this.getHostMetadata(metatype);\n      const routerPaths = this.routerExplorer.extractRouterPath(\n        metatype as Type<any>,\n      );\n      const controllerVersion = this.getVersionMetadata(metatype);\n      const controllerName = metatype.name;\n\n      routerPaths.forEach(path => {\n        const pathsToLog = this.routePathFactory.create({\n          ctrlPath: path,\n          modulePath,\n          globalPrefix,\n        });\n        if (!controllerVersion) {\n          pathsToLog.forEach(path => {\n            const logMessage = CONTROLLER_MAPPING_MESSAGE(controllerName, path);\n            this.logger.log(logMessage);\n          });\n        } else {\n          pathsToLog.forEach(path => {\n            const logMessage = VERSIONED_CONTROLLER_MAPPING_MESSAGE(\n              controllerName,\n              path,\n              controllerVersion,\n            );\n            this.logger.log(logMessage);\n          });\n        }\n\n        const versioningOptions = this.applicationConfig.getVersioning();\n        const routePathMetadata: RoutePathMetadata = {\n          ctrlPath: path,\n          modulePath,\n          globalPrefix,\n          controllerVersion,\n          versioningOptions,\n        };\n        this.routerExplorer.explore(\n          instanceWrapper,\n          moduleName,\n          applicationRef,\n          host,\n          routePathMetadata,\n        );\n      });\n    });\n  }\n\n  public registerNotFoundHandler() {\n    const applicationRef = this.container.getHttpAdapterRef();\n    const callback = <TRequest, TResponse>(req: TRequest, res: TResponse) => {\n      const method = applicationRef.getRequestMethod(req);\n      const url = applicationRef.getRequestUrl(req);\n      throw new NotFoundException(`Cannot ${method} ${url}`);\n    };\n    const handler = this.routerExceptionsFilter.create({}, callback, undefined);\n    const proxy = this.routerProxy.createProxy(callback, handler);\n    applicationRef.setNotFoundHandler &&\n      applicationRef.setNotFoundHandler(\n        proxy,\n        this.applicationConfig.getGlobalPrefix(),\n      );\n  }\n\n  public registerExceptionHandler() {\n    const callback = <TError, TRequest, TResponse>(\n      err: TError,\n      req: TRequest,\n      res: TResponse,\n      next: Function,\n    ) => {\n      throw this.mapExternalException(err);\n    };\n    const handler = this.routerExceptionsFilter.create(\n      {},\n      callback as any,\n      undefined,\n    );\n    const proxy = this.routerProxy.createExceptionLayerProxy(callback, handler);\n    const applicationRef = this.container.getHttpAdapterRef();\n    applicationRef.setErrorHandler &&\n      applicationRef.setErrorHandler(\n        proxy,\n        this.applicationConfig.getGlobalPrefix(),\n      );\n  }\n\n  public mapExternalException(err: any) {\n    switch (true) {\n      // SyntaxError is thrown by Express body-parser when given invalid JSON (#422, #430)\n      // URIError is thrown by Express when given a path parameter with an invalid percentage\n      // encoding, e.g. '%FF' (#8915)\n      case err instanceof SyntaxError || err instanceof URIError:\n        return new BadRequestException(err.message);\n      default:\n        return err;\n    }\n  }\n\n  private getModulePathMetadata(metatype: Type<unknown>): string | undefined {\n    const modulesContainer = this.container.getModules();\n    const modulePath = Reflect.getMetadata(\n      MODULE_PATH + modulesContainer.applicationId,\n      metatype,\n    );\n    return modulePath ?? Reflect.getMetadata(MODULE_PATH, metatype);\n  }\n\n  private getHostMetadata(\n    metatype: Type<unknown> | Function,\n  ): string | string[] | undefined {\n    return Reflect.getMetadata(HOST_METADATA, metatype);\n  }\n\n  private getVersionMetadata(\n    metatype: Type<unknown> | Function,\n  ): VersionValue | undefined {\n    const versioningConfig = this.applicationConfig.getVersioning();\n    if (versioningConfig) {\n      return (\n        Reflect.getMetadata(VERSION_METADATA, metatype) ??\n        versioningConfig.defaultVersion\n      );\n    }\n  }\n}\n"]}