{"version":3,"file":"router-exception-filters.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/core/","sources":["router/router-exception-filters.ts"],"names":[],"mappings":";;;AACA,wDAAsE;AAEtE,oEAA4D;AAE5D,+FAAyF;AACzF,yEAAqE;AACrE,qDAAuD;AAIvD,qCAAkC;AAElC,MAAa,sBAAuB,SAAQ,0DAA0B;IACpE,YACE,SAAwB,EACP,MAAyB,EACzB,cAA0B;QAE3C,KAAK,CAAC,SAAS,CAAC,CAAC;QAHA,WAAM,GAAN,MAAM,CAAmB;QACzB,mBAAc,GAAd,cAAc,CAAY;IAG7C,CAAC;IAEM,MAAM,CACX,QAAoB,EACpB,QAA6B,EAC7B,SAAiB,EACjB,SAAS,GAAG,0BAAc,EAC1B,UAAmB;QAEnB,IAAI,CAAC,aAAa,GAAG,SAAS,CAAC;QAE/B,MAAM,gBAAgB,GAAG,IAAI,sCAAiB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QACpE,MAAM,OAAO,GAAG,IAAI,CAAC,aAAa,CAChC,QAAQ,EACR,QAAQ,EACR,sCAA0B,EAC1B,SAAS,EACT,UAAU,CACX,CAAC;QACF,IAAI,IAAA,sBAAO,EAAC,OAAO,CAAC,EAAE;YACpB,OAAO,gBAAgB,CAAC;SACzB;QACD,gBAAgB,CAAC,gBAAgB,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC;QACrD,OAAO,gBAAgB,CAAC;IAC1B,CAAC;IAEM,iBAAiB,CACtB,SAAS,GAAG,0BAAc,EAC1B,UAAmB;QAEnB,MAAM,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAO,CAAC;QAC1D,IAAI,SAAS,KAAK,0BAAc,IAAI,CAAC,UAAU,EAAE;YAC/C,OAAO,aAAa,CAAC;SACtB;QACD,MAAM,oBAAoB,GACxB,IAAI,CAAC,MAAM,CAAC,uBAAuB,EAAuB,CAAC;QAC7D,MAAM,aAAa,GAAG,IAAA,iBAAO,EAAC,oBAAoB,CAAC;aAChD,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,sBAAsB,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;aACrE,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;aACtB,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC;aAC1B,OAAO,EAAE,CAAC;QAEb,OAAO,aAAa,CAAC,MAAM,CAAC,aAAa,CAAM,CAAC;IAClD,CAAC;CACF;AAnDD,wDAmDC","sourcesContent":["import { HttpServer } from '@nestjs/common';\nimport { EXCEPTION_FILTERS_METADATA } from '@nestjs/common/constants';\nimport { Controller } from '@nestjs/common/interfaces/controllers/controller.interface';\nimport { isEmpty } from '@nestjs/common/utils/shared.utils';\nimport { ApplicationConfig } from '../application-config';\nimport { BaseExceptionFilterContext } from '../exceptions/base-exception-filter-context';\nimport { ExceptionsHandler } from '../exceptions/exceptions-handler';\nimport { STATIC_CONTEXT } from '../injector/constants';\nimport { NestContainer } from '../injector/container';\nimport { InstanceWrapper } from '../injector/instance-wrapper';\nimport { RouterProxyCallback } from './router-proxy';\nimport { iterate } from 'iterare';\n\nexport class RouterExceptionFilters extends BaseExceptionFilterContext {\n  constructor(\n    container: NestContainer,\n    private readonly config: ApplicationConfig,\n    private readonly applicationRef: HttpServer,\n  ) {\n    super(container);\n  }\n\n  public create(\n    instance: Controller,\n    callback: RouterProxyCallback,\n    moduleKey: string,\n    contextId = STATIC_CONTEXT,\n    inquirerId?: string,\n  ): ExceptionsHandler {\n    this.moduleContext = moduleKey;\n\n    const exceptionHandler = new ExceptionsHandler(this.applicationRef);\n    const filters = this.createContext(\n      instance,\n      callback,\n      EXCEPTION_FILTERS_METADATA,\n      contextId,\n      inquirerId,\n    );\n    if (isEmpty(filters)) {\n      return exceptionHandler;\n    }\n    exceptionHandler.setCustomFilters(filters.reverse());\n    return exceptionHandler;\n  }\n\n  public getGlobalMetadata<T extends unknown[]>(\n    contextId = STATIC_CONTEXT,\n    inquirerId?: string,\n  ): T {\n    const globalFilters = this.config.getGlobalFilters() as T;\n    if (contextId === STATIC_CONTEXT && !inquirerId) {\n      return globalFilters;\n    }\n    const scopedFilterWrappers =\n      this.config.getGlobalRequestFilters() as InstanceWrapper[];\n    const scopedFilters = iterate(scopedFilterWrappers)\n      .map(wrapper => wrapper.getInstanceByContextId(contextId, inquirerId))\n      .filter(host => !!host)\n      .map(host => host.instance)\n      .toArray();\n\n    return globalFilters.concat(scopedFilters) as T;\n  }\n}\n"]}