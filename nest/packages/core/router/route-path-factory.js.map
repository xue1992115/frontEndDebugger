{"version":3,"file":"route-path-factory.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/core/","sources":["router/route-path-factory.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  flatten,\n  RequestMethod,\n  VersioningOptions,\n  VersioningType,\n  VERSION_NEUTRAL,\n} from '@nestjs/common';\nimport {\n  addLeadingSlash,\n  isUndefined,\n  stripEndSlash,\n} from '@nestjs/common/utils/shared.utils';\nimport { ApplicationConfig } from '../application-config';\nimport { RoutePathMetadata } from './interfaces/route-path-metadata.interface';\nimport { isRouteExcluded } from './utils';\n\nexport class RoutePathFactory {\n  constructor(private readonly applicationConfig: ApplicationConfig) {}\n\n  public create(\n    metadata: RoutePathMetadata,\n    requestMethod?: RequestMethod,\n  ): string[] {\n    let paths = [''];\n\n    const versionOrVersions = this.getVersion(metadata);\n    if (\n      versionOrVersions &&\n      metadata.versioningOptions?.type === VersioningType.URI\n    ) {\n      const versionPrefix = this.getVersionPrefix(metadata.versioningOptions);\n\n      if (Array.isArray(versionOrVersions)) {\n        paths = flatten(\n          paths.map(path =>\n            versionOrVersions.map(version =>\n              // Version Neutral - Do not include version in URL\n              version === VERSION_NEUTRAL\n                ? path\n                : `${path}/${versionPrefix}${version}`,\n            ),\n          ),\n        );\n      } else {\n        // Version Neutral - Do not include version in URL\n        if (versionOrVersions !== VERSION_NEUTRAL) {\n          paths = paths.map(\n            path => `${path}/${versionPrefix}${versionOrVersions}`,\n          );\n        }\n      }\n    }\n\n    paths = this.appendToAllIfDefined(paths, metadata.modulePath);\n    paths = this.appendToAllIfDefined(paths, metadata.ctrlPath);\n    paths = this.appendToAllIfDefined(paths, metadata.methodPath);\n\n    if (metadata.globalPrefix) {\n      paths = paths.map(path => {\n        if (this.isExcludedFromGlobalPrefix(path, requestMethod)) {\n          return path;\n        }\n        return stripEndSlash(metadata.globalPrefix || '') + path;\n      });\n    }\n\n    return paths\n      .map(path => addLeadingSlash(path || '/'))\n      .map(path => (path !== '/' ? stripEndSlash(path) : path));\n  }\n\n  public getVersion(metadata: RoutePathMetadata) {\n    // The version will be either the path version or the controller version,\n    // with the pathVersion taking priority.\n    return metadata.methodVersion || metadata.controllerVersion;\n  }\n\n  public getVersionPrefix(versioningOptions: VersioningOptions): string {\n    const defaultPrefix = 'v';\n    if (versioningOptions.type === VersioningType.URI) {\n      if (versioningOptions.prefix === false) {\n        return '';\n      } else if (versioningOptions.prefix !== undefined) {\n        return versioningOptions.prefix;\n      }\n    }\n    return defaultPrefix;\n  }\n\n  public appendToAllIfDefined(\n    paths: string[],\n    fragmentToAppend: string | string[] | undefined,\n  ): string[] {\n    if (!fragmentToAppend) {\n      return paths;\n    }\n    const concatPaths = (a: string, b: string) =>\n      stripEndSlash(a) + addLeadingSlash(b);\n\n    if (Array.isArray(fragmentToAppend)) {\n      const paths2dArray = paths.map(path =>\n        fragmentToAppend.map(fragment => concatPaths(path, fragment)),\n      );\n      return flatten(paths2dArray);\n    }\n    return paths.map(path => concatPaths(path, fragmentToAppend));\n  }\n\n  public isExcludedFromGlobalPrefix(\n    path: string,\n    requestMethod?: RequestMethod,\n  ) {\n    if (isUndefined(requestMethod)) {\n      return false;\n    }\n    const options = this.applicationConfig.getGlobalPrefixOptions();\n    const excludedRoutes = options.exclude;\n    return (\n      Array.isArray(excludedRoutes) &&\n      isRouteExcluded(excludedRoutes, path, requestMethod)\n    );\n  }\n}\n"]}