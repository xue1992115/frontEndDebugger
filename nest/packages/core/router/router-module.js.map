{"version":3,"file":"router-module.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/core/","sources":["router/router-module.ts"],"names":[],"mappings":"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","sourcesContent":["import { DynamicModule, Inject, Module, Type } from '@nestjs/common';\nimport { MODULE_PATH } from '@nestjs/common/constants';\nimport { normalizePath } from '@nestjs/common/utils/shared.utils';\nimport { Module as ModuleClass } from '../injector/module';\nimport { ModulesContainer } from '../injector/modules-container';\nimport { Routes, RouteTree } from './interfaces';\nimport { flattenRoutePaths } from './utils';\n\nexport const ROUTES = Symbol('ROUTES');\n\nexport const targetModulesByContainer = new WeakMap<\n  ModulesContainer,\n  WeakSet<ModuleClass>\n>();\n\n/**\n * @publicApi\n */\n@Module({})\nexport class RouterModule {\n  constructor(\n    private readonly modulesContainer: ModulesContainer,\n    @Inject(ROUTES) private readonly routes: Routes,\n  ) {\n    this.routes = this.deepCloneRoutes(routes) as Routes;\n    this.initialize();\n  }\n\n  static register(routes: Routes): DynamicModule {\n    return {\n      module: RouterModule,\n      providers: [\n        {\n          provide: ROUTES,\n          useValue: routes,\n        },\n      ],\n    };\n  }\n\n  private deepCloneRoutes(\n    routes: Routes | Type<any>[],\n  ): Routes | Array<Type<any>> {\n    return routes.map((routeOrType: Type<any> | RouteTree) => {\n      if (typeof routeOrType === 'function') {\n        return routeOrType;\n      }\n      if (routeOrType.children) {\n        return {\n          ...routeOrType,\n          children: this.deepCloneRoutes(routeOrType.children),\n        };\n      }\n      return { ...routeOrType };\n    }) as Routes | Array<Type<any>>;\n  }\n\n  private initialize() {\n    const flattenedRoutes = flattenRoutePaths(this.routes);\n    flattenedRoutes.forEach(route => {\n      const modulePath = normalizePath(route.path);\n      this.registerModulePathMetadata(route.module, modulePath);\n      this.updateTargetModulesCache(route.module);\n    });\n  }\n\n  private registerModulePathMetadata(\n    moduleCtor: Type<unknown>,\n    modulePath: string,\n  ) {\n    Reflect.defineMetadata(\n      MODULE_PATH + this.modulesContainer.applicationId,\n      modulePath,\n      moduleCtor,\n    );\n  }\n\n  private updateTargetModulesCache(moduleCtor: Type<unknown>) {\n    let moduleClassSet: WeakSet<ModuleClass>;\n    if (targetModulesByContainer.has(this.modulesContainer)) {\n      moduleClassSet = targetModulesByContainer.get(this.modulesContainer);\n    } else {\n      moduleClassSet = new WeakSet<ModuleClass>();\n      targetModulesByContainer.set(this.modulesContainer, moduleClassSet);\n    }\n    const moduleRef = Array.from(this.modulesContainer.values()).find(\n      item => item?.metatype === moduleCtor,\n    );\n    if (!moduleRef) {\n      return;\n    }\n    moduleClassSet.add(moduleRef);\n  }\n}\n"]}