{"version":3,"file":"sse-stream.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/core/","sources":["router/sse-stream.ts"],"names":[],"mappings":";;;AACA,oEAA6D;AAE7D,mCAAmC;AAEnC,SAAS,YAAY,CAAC,IAAqB;IACzC,IAAI,IAAA,uBAAQ,EAAC,IAAI,CAAC,EAAE;QAClB,OAAO,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;KAC3C;IAED,OAAO,IAAI;SACR,KAAK,CAAC,YAAY,CAAC;SACnB,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,SAAS,IAAI,IAAI,CAAC;SAC9B,IAAI,CAAC,EAAE,CAAC,CAAC;AACd,CAAC;AAyBD;;;;;;;;;;;;GAYG;AACH,MAAa,SAAU,SAAQ,kBAAS;IAGtC,YAAY,GAAqB;QAC/B,KAAK,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QAHtB,gBAAW,GAAW,IAAI,CAAC;QAIjC,IAAI,GAAG,IAAI,GAAG,CAAC,MAAM,EAAE;YACrB,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;YAC9B,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YAC5B,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;SAC1B;IACH,CAAC;IAED,IAAI,CACF,WAAc,EACd,OAGC;QAED,IAAI,WAAW,CAAC,SAAS,EAAE;YACzB,WAAW,CAAC,SAAS,CAAC,GAAG,kCACpB,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,iBAAiB;gBAC7B,gFAAgF;gBAChF,cAAc,EAAE,mBAAmB,EACnC,UAAU,EAAE,YAAY;gBACxB,mDAAmD;gBACnD,eAAe,EACb,uEAAuE,EACzE,MAAM,EAAE,UAAU,EAClB,MAAM,EAAE,GAAG;gBACX,sGAAsG;gBACtG,mBAAmB,EAAE,IAAI,IACzB,CAAC;YACH,WAAW,CAAC,YAAY,EAAE,CAAC;SAC5B;QAED,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACxB,OAAO,KAAK,CAAC,IAAI,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;IAC1C,CAAC;IAED,UAAU,CACR,OAAqB,EACrB,QAAgB,EAChB,QAAoD;QAEpD,IAAI,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,UAAU,OAAO,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;QAC1D,IAAI,IAAI,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,OAAO,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;QAChD,IAAI,IAAI,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,UAAU,OAAO,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;QACzD,IAAI,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QACvD,IAAI,IAAI,IAAI,CAAC;QACb,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAChB,QAAQ,EAAE,CAAC;IACb,CAAC;IAED;;OAEG;IACH,YAAY,CACV,OAAqB,EACrB,EAA6C;QAE7C,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE;YACf,IAAI,CAAC,WAAW,EAAE,CAAC;YACnB,OAAO,CAAC,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;SAC1C;QAED,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,OAAO,EAAE,EAAE,CAAC,EAAE;YACrC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;SACxB;aAAM;YACL,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;SACtB;IACH,CAAC;CACF;AAxED,8BAwEC","sourcesContent":["import { MessageEvent } from '@nestjs/common/interfaces';\nimport { isObject } from '@nestjs/common/utils/shared.utils';\nimport { IncomingMessage, OutgoingHttpHeaders } from 'http';\nimport { Transform } from 'stream';\n\nfunction toDataString(data: string | object): string {\n  if (isObject(data)) {\n    return toDataString(JSON.stringify(data));\n  }\n\n  return data\n    .split(/\\r\\n|\\r|\\n/)\n    .map(line => `data: ${line}\\n`)\n    .join('');\n}\n\nexport type AdditionalHeaders = Record<\n  string,\n  string[] | string | number | undefined\n>;\n\ninterface ReadHeaders {\n  getHeaders?(): AdditionalHeaders;\n}\n\ninterface WriteHeaders {\n  writableEnded?: boolean;\n  writeHead?(\n    statusCode: number,\n    reasonPhrase?: string,\n    headers?: OutgoingHttpHeaders,\n  ): void;\n  writeHead?(statusCode: number, headers?: OutgoingHttpHeaders): void;\n  flushHeaders?(): void;\n}\n\nexport type WritableHeaderStream = NodeJS.WritableStream & WriteHeaders;\nexport type HeaderStream = WritableHeaderStream & ReadHeaders;\n\n/**\n * Adapted from https://raw.githubusercontent.com/EventSource/node-ssestream\n * Transforms \"messages\" to W3C event stream content.\n * See https://html.spec.whatwg.org/multipage/server-sent-events.html\n * A message is an object with one or more of the following properties:\n * - data (String or object, which gets turned into JSON)\n * - type\n * - id\n * - retry\n *\n * If constructed with a HTTP Request, it will optimise the socket for streaming.\n * If this stream is piped to an HTTP Response, it will set appropriate headers.\n */\nexport class SseStream extends Transform {\n  private lastEventId: number = null;\n\n  constructor(req?: IncomingMessage) {\n    super({ objectMode: true });\n    if (req && req.socket) {\n      req.socket.setKeepAlive(true);\n      req.socket.setNoDelay(true);\n      req.socket.setTimeout(0);\n    }\n  }\n\n  pipe<T extends WritableHeaderStream>(\n    destination: T,\n    options?: {\n      additionalHeaders?: AdditionalHeaders;\n      end?: boolean;\n    },\n  ): T {\n    if (destination.writeHead) {\n      destination.writeHead(200, {\n        ...options?.additionalHeaders,\n        // See https://github.com/dunglas/mercure/blob/master/hub/subscribe.go#L124-L130\n        'Content-Type': 'text/event-stream',\n        Connection: 'keep-alive',\n        // Disable cache, even for old browsers and proxies\n        'Cache-Control':\n          'private, no-cache, no-store, must-revalidate, max-age=0, no-transform',\n        Pragma: 'no-cache',\n        Expire: '0',\n        // NGINX support https://www.nginx.com/resources/wiki/start/topics/examples/x-accel/#x-accel-buffering\n        'X-Accel-Buffering': 'no',\n      });\n      destination.flushHeaders();\n    }\n\n    destination.write('\\n');\n    return super.pipe(destination, options);\n  }\n\n  _transform(\n    message: MessageEvent,\n    encoding: string,\n    callback: (error?: Error | null, data?: any) => void,\n  ) {\n    let data = message.type ? `event: ${message.type}\\n` : '';\n    data += message.id ? `id: ${message.id}\\n` : '';\n    data += message.retry ? `retry: ${message.retry}\\n` : '';\n    data += message.data ? toDataString(message.data) : '';\n    data += '\\n';\n    this.push(data);\n    callback();\n  }\n\n  /**\n   * Calls `.write` but handles the drain if needed\n   */\n  writeMessage(\n    message: MessageEvent,\n    cb: (error: Error | null | undefined) => void,\n  ) {\n    if (!message.id) {\n      this.lastEventId++;\n      message.id = this.lastEventId.toString();\n    }\n\n    if (!this.write(message, 'utf-8', cb)) {\n      this.once('drain', cb);\n    } else {\n      process.nextTick(cb);\n    }\n  }\n}\n"]}