{"version":3,"file":"router-explorer.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/core/","sources":["router/router-explorer.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpServer } from '@nestjs/common';\nimport { PATH_METADATA } from '@nestjs/common/constants';\nimport { RequestMethod, VersioningType } from '@nestjs/common/enums';\nimport { InternalServerErrorException } from '@nestjs/common/exceptions';\nimport { Controller } from '@nestjs/common/interfaces/controllers/controller.interface';\nimport { Type } from '@nestjs/common/interfaces/type.interface';\nimport { VersionValue } from '@nestjs/common/interfaces/version-options.interface';\nimport { Logger } from '@nestjs/common/services/logger.service';\nimport {\n  addLeadingSlash,\n  isUndefined,\n} from '@nestjs/common/utils/shared.utils';\nimport * as pathToRegexp from 'path-to-regexp';\nimport { ApplicationConfig } from '../application-config';\nimport { UnknownRequestMappingException } from '../errors/exceptions/unknown-request-mapping.exception';\nimport { GuardsConsumer, GuardsContextCreator } from '../guards';\nimport { ContextIdFactory } from '../helpers/context-id-factory';\nimport { ExecutionContextHost } from '../helpers/execution-context-host';\nimport {\n  ROUTE_MAPPED_MESSAGE,\n  VERSIONED_ROUTE_MAPPED_MESSAGE,\n} from '../helpers/messages';\nimport { RouterMethodFactory } from '../helpers/router-method-factory';\nimport { STATIC_CONTEXT } from '../injector/constants';\nimport { NestContainer } from '../injector/container';\nimport { Injector } from '../injector/injector';\nimport { ContextId, InstanceWrapper } from '../injector/instance-wrapper';\nimport { Module } from '../injector/module';\nimport {\n  InterceptorsConsumer,\n  InterceptorsContextCreator,\n} from '../interceptors';\nimport { GraphInspector } from '../inspector/graph-inspector';\nimport {\n  Entrypoint,\n  HttpEntrypointMetadata,\n} from '../inspector/interfaces/entrypoint.interface';\nimport { MetadataScanner } from '../metadata-scanner';\nimport { PipesConsumer, PipesContextCreator } from '../pipes';\nimport { ExceptionsFilter } from './interfaces/exceptions-filter.interface';\nimport { RoutePathMetadata } from './interfaces/route-path-metadata.interface';\nimport { PathsExplorer } from './paths-explorer';\nimport { REQUEST_CONTEXT_ID } from './request/request-constants';\nimport { RouteParamsFactory } from './route-params-factory';\nimport { RoutePathFactory } from './route-path-factory';\nimport { RouterExecutionContext } from './router-execution-context';\nimport { RouterProxy, RouterProxyCallback } from './router-proxy';\n\nexport interface RouteDefinition {\n  path: string[];\n  requestMethod: RequestMethod;\n  targetCallback: RouterProxyCallback;\n  methodName: string;\n  version?: VersionValue;\n}\n\nexport class RouterExplorer {\n  private readonly executionContextCreator: RouterExecutionContext;\n  private readonly pathsExplorer: PathsExplorer;\n  private readonly routerMethodFactory = new RouterMethodFactory();\n  private readonly logger = new Logger(RouterExplorer.name, {\n    timestamp: true,\n  });\n  private readonly exceptionFiltersCache = new WeakMap();\n\n  constructor(\n    metadataScanner: MetadataScanner,\n    private readonly container: NestContainer,\n    private readonly injector: Injector,\n    private readonly routerProxy: RouterProxy,\n    private readonly exceptionsFilter: ExceptionsFilter,\n    config: ApplicationConfig,\n    private readonly routePathFactory: RoutePathFactory,\n    private readonly graphInspector: GraphInspector,\n  ) {\n    this.pathsExplorer = new PathsExplorer(metadataScanner);\n\n    const routeParamsFactory = new RouteParamsFactory();\n    const pipesContextCreator = new PipesContextCreator(container, config);\n    const pipesConsumer = new PipesConsumer();\n    const guardsContextCreator = new GuardsContextCreator(container, config);\n    const guardsConsumer = new GuardsConsumer();\n    const interceptorsContextCreator = new InterceptorsContextCreator(\n      container,\n      config,\n    );\n    const interceptorsConsumer = new InterceptorsConsumer();\n\n    this.executionContextCreator = new RouterExecutionContext(\n      routeParamsFactory,\n      pipesContextCreator,\n      pipesConsumer,\n      guardsContextCreator,\n      guardsConsumer,\n      interceptorsContextCreator,\n      interceptorsConsumer,\n      container.getHttpAdapterRef(),\n    );\n  }\n\n  public explore<T extends HttpServer = any>(\n    instanceWrapper: InstanceWrapper,\n    moduleKey: string,\n    applicationRef: T,\n    host: string | RegExp | Array<string | RegExp>,\n    routePathMetadata: RoutePathMetadata,\n  ) {\n    const { instance } = instanceWrapper;\n    const routerPaths = this.pathsExplorer.scanForPaths(instance);\n    this.applyPathsToRouterProxy(\n      applicationRef,\n      routerPaths,\n      instanceWrapper,\n      moduleKey,\n      routePathMetadata,\n      host,\n    );\n  }\n\n  public extractRouterPath(metatype: Type<Controller>): string[] {\n    const path = Reflect.getMetadata(PATH_METADATA, metatype);\n\n    if (isUndefined(path)) {\n      throw new UnknownRequestMappingException(metatype);\n    }\n    if (Array.isArray(path)) {\n      return path.map(p => addLeadingSlash(p));\n    }\n    return [addLeadingSlash(path)];\n  }\n\n  public applyPathsToRouterProxy<T extends HttpServer>(\n    router: T,\n    routeDefinitions: RouteDefinition[],\n    instanceWrapper: InstanceWrapper,\n    moduleKey: string,\n    routePathMetadata: RoutePathMetadata,\n    host: string | RegExp | Array<string | RegExp>,\n  ) {\n    (routeDefinitions || []).forEach(routeDefinition => {\n      const { version: methodVersion } = routeDefinition;\n      routePathMetadata.methodVersion = methodVersion;\n\n      this.applyCallbackToRouter(\n        router,\n        routeDefinition,\n        instanceWrapper,\n        moduleKey,\n        routePathMetadata,\n        host,\n      );\n    });\n  }\n\n  private applyCallbackToRouter<T extends HttpServer>(\n    router: T,\n    routeDefinition: RouteDefinition,\n    instanceWrapper: InstanceWrapper,\n    moduleKey: string,\n    routePathMetadata: RoutePathMetadata,\n    host: string | RegExp | Array<string | RegExp>,\n  ) {\n    const {\n      path: paths,\n      requestMethod,\n      targetCallback,\n      methodName,\n    } = routeDefinition;\n\n    const { instance } = instanceWrapper;\n    const routerMethodRef = this.routerMethodFactory\n      .get(router, requestMethod)\n      .bind(router);\n\n    const isRequestScoped = !instanceWrapper.isDependencyTreeStatic();\n    const proxy = isRequestScoped\n      ? this.createRequestScopedHandler(\n          instanceWrapper,\n          requestMethod,\n          this.container.getModuleByKey(moduleKey),\n          moduleKey,\n          methodName,\n        )\n      : this.createCallbackProxy(\n          instance,\n          targetCallback,\n          methodName,\n          moduleKey,\n          requestMethod,\n        );\n\n    const isVersioned =\n      (routePathMetadata.methodVersion ||\n        routePathMetadata.controllerVersion) &&\n      routePathMetadata.versioningOptions;\n    let routeHandler = this.applyHostFilter(host, proxy);\n\n    paths.forEach(path => {\n      if (\n        isVersioned &&\n        routePathMetadata.versioningOptions.type !== VersioningType.URI\n      ) {\n        // All versioning (except for URI Versioning) is done via the \"Version Filter\"\n        routeHandler = this.applyVersionFilter(\n          router,\n          routePathMetadata,\n          routeHandler,\n        );\n      }\n\n      routePathMetadata.methodPath = path;\n      const pathsToRegister = this.routePathFactory.create(\n        routePathMetadata,\n        requestMethod,\n      );\n      pathsToRegister.forEach(path => {\n        const entrypointDefinition: Entrypoint<HttpEntrypointMetadata> = {\n          type: 'http-endpoint',\n          methodName,\n          className: instanceWrapper.name,\n          classNodeId: instanceWrapper.id,\n          metadata: {\n            key: path,\n            path,\n            requestMethod: RequestMethod[\n              requestMethod\n            ] as keyof typeof RequestMethod,\n            methodVersion: routePathMetadata.methodVersion as VersionValue,\n            controllerVersion:\n              routePathMetadata.controllerVersion as VersionValue,\n          },\n        };\n\n        routerMethodRef(path, routeHandler);\n\n        this.graphInspector.insertEntrypointDefinition<HttpEntrypointMetadata>(\n          entrypointDefinition,\n          instanceWrapper.id,\n        );\n      });\n\n      const pathsToLog = this.routePathFactory.create(\n        {\n          ...routePathMetadata,\n          versioningOptions: undefined,\n        },\n        requestMethod,\n      );\n      pathsToLog.forEach(path => {\n        if (isVersioned) {\n          const version = this.routePathFactory.getVersion(routePathMetadata);\n          this.logger.log(\n            VERSIONED_ROUTE_MAPPED_MESSAGE(path, requestMethod, version),\n          );\n        } else {\n          this.logger.log(ROUTE_MAPPED_MESSAGE(path, requestMethod));\n        }\n      });\n    });\n  }\n\n  private applyHostFilter(\n    host: string | RegExp | Array<string | RegExp>,\n    handler: Function,\n  ) {\n    if (!host) {\n      return handler;\n    }\n\n    const httpAdapterRef = this.container.getHttpAdapterRef();\n    const hosts = Array.isArray(host) ? host : [host];\n    const hostRegExps = hosts.map((host: string | RegExp) => {\n      const keys = [];\n      const regexp = pathToRegexp(host, keys);\n      return { regexp, keys };\n    });\n\n    const unsupportedFilteringErrorMessage = Array.isArray(host)\n      ? `HTTP adapter does not support filtering on hosts: [\"${host.join(\n          '\", \"',\n        )}\"]`\n      : `HTTP adapter does not support filtering on host: \"${host}\"`;\n\n    return <TRequest extends Record<string, any> = any, TResponse = any>(\n      req: TRequest,\n      res: TResponse,\n      next: () => void,\n    ) => {\n      (req as Record<string, any>).hosts = {};\n      const hostname = httpAdapterRef.getRequestHostname(req) || '';\n\n      for (const exp of hostRegExps) {\n        const match = hostname.match(exp.regexp);\n        if (match) {\n          exp.keys.forEach((key, i) => (req.hosts[key.name] = match[i + 1]));\n          return handler(req, res, next);\n        }\n      }\n      if (!next) {\n        throw new InternalServerErrorException(\n          unsupportedFilteringErrorMessage,\n        );\n      }\n      return next();\n    };\n  }\n\n  private applyVersionFilter<T extends HttpServer>(\n    router: T,\n    routePathMetadata: RoutePathMetadata,\n    handler: Function,\n  ) {\n    const version = this.routePathFactory.getVersion(routePathMetadata);\n    return router.applyVersionFilter(\n      handler,\n      version,\n      routePathMetadata.versioningOptions,\n    );\n  }\n\n  private createCallbackProxy(\n    instance: Controller,\n    callback: RouterProxyCallback,\n    methodName: string,\n    moduleRef: string,\n    requestMethod: RequestMethod,\n    contextId = STATIC_CONTEXT,\n    inquirerId?: string,\n  ) {\n    const executionContext = this.executionContextCreator.create(\n      instance,\n      callback,\n      methodName,\n      moduleRef,\n      requestMethod,\n      contextId,\n      inquirerId,\n    );\n    const exceptionFilter = this.exceptionsFilter.create(\n      instance,\n      callback,\n      moduleRef,\n      contextId,\n      inquirerId,\n    );\n    return this.routerProxy.createProxy(executionContext, exceptionFilter);\n  }\n\n  public createRequestScopedHandler(\n    instanceWrapper: InstanceWrapper,\n    requestMethod: RequestMethod,\n    moduleRef: Module,\n    moduleKey: string,\n    methodName: string,\n  ) {\n    const { instance } = instanceWrapper;\n    const collection = moduleRef.controllers;\n\n    const isTreeDurable = instanceWrapper.isDependencyTreeDurable();\n\n    return async <TRequest extends Record<any, any>, TResponse>(\n      req: TRequest,\n      res: TResponse,\n      next: () => void,\n    ) => {\n      try {\n        const contextId = this.getContextId(req, isTreeDurable);\n        const contextInstance = await this.injector.loadPerContext(\n          instance,\n          moduleRef,\n          collection,\n          contextId,\n        );\n        await this.createCallbackProxy(\n          contextInstance,\n          contextInstance[methodName],\n          methodName,\n          moduleKey,\n          requestMethod,\n          contextId,\n          instanceWrapper.id,\n        )(req, res, next);\n      } catch (err) {\n        let exceptionFilter = this.exceptionFiltersCache.get(\n          instance[methodName],\n        );\n        if (!exceptionFilter) {\n          exceptionFilter = this.exceptionsFilter.create(\n            instance,\n            instance[methodName],\n            moduleKey,\n          );\n          this.exceptionFiltersCache.set(instance[methodName], exceptionFilter);\n        }\n        const host = new ExecutionContextHost([req, res, next]);\n        exceptionFilter.next(err, host);\n      }\n    };\n  }\n\n  private getContextId<T extends Record<any, unknown> = any>(\n    request: T,\n    isTreeDurable: boolean,\n  ): ContextId {\n    const contextId = ContextIdFactory.getByRequest(request);\n    if (!request[REQUEST_CONTEXT_ID as any]) {\n      Object.defineProperty(request, REQUEST_CONTEXT_ID, {\n        value: contextId,\n        enumerable: false,\n        writable: false,\n        configurable: false,\n      });\n\n      const requestProviderValue = isTreeDurable ? contextId.payload : request;\n      this.container.registerRequestProvider(requestProviderValue, contextId);\n    }\n    return contextId;\n  }\n}\n"]}