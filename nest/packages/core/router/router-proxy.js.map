{"version":3,"file":"router-proxy.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/core/","sources":["router/router-proxy.ts"],"names":[],"mappings":";;;AACA,8EAAyE;AAQzE,MAAa,WAAW;IACf,WAAW,CAChB,cAAmC,EACnC,iBAAoC;QAEpC,OAAO,KAAK,EACV,GAAa,EACb,GAAc,EACd,IAAgB,EAChB,EAAE;YACF,IAAI;gBACF,MAAM,cAAc,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;aACtC;YAAC,OAAO,CAAC,EAAE;gBACV,MAAM,IAAI,GAAG,IAAI,6CAAoB,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;gBACxD,iBAAiB,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;gBAChC,OAAO,GAAG,CAAC;aACZ;QACH,CAAC,CAAC;IACJ,CAAC;IAEM,yBAAyB,CAC9B,cAKS,EACT,iBAAoC;QAEpC,OAAO,KAAK,EACV,GAAW,EACX,GAAa,EACb,GAAc,EACd,IAAgB,EAChB,EAAE;YACF,IAAI;gBACF,MAAM,cAAc,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;aAC3C;YAAC,OAAO,CAAC,EAAE;gBACV,MAAM,IAAI,GAAG,IAAI,6CAAoB,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;gBACxD,iBAAiB,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;gBAChC,OAAO,GAAG,CAAC;aACZ;QACH,CAAC,CAAC;IACJ,CAAC;CACF;AA5CD,kCA4CC","sourcesContent":["import { ExceptionsHandler } from '../exceptions/exceptions-handler';\nimport { ExecutionContextHost } from '../helpers/execution-context-host';\n\nexport type RouterProxyCallback = <TRequest, TResponse>(\n  req?: TRequest,\n  res?: TResponse,\n  next?: () => void,\n) => void;\n\nexport class RouterProxy {\n  public createProxy(\n    targetCallback: RouterProxyCallback,\n    exceptionsHandler: ExceptionsHandler,\n  ) {\n    return async <TRequest, TResponse>(\n      req: TRequest,\n      res: TResponse,\n      next: () => void,\n    ) => {\n      try {\n        await targetCallback(req, res, next);\n      } catch (e) {\n        const host = new ExecutionContextHost([req, res, next]);\n        exceptionsHandler.next(e, host);\n        return res;\n      }\n    };\n  }\n\n  public createExceptionLayerProxy(\n    targetCallback: <TError, TRequest, TResponse>(\n      err: TError,\n      req: TRequest,\n      res: TResponse,\n      next: () => void,\n    ) => void,\n    exceptionsHandler: ExceptionsHandler,\n  ) {\n    return async <TError, TRequest, TResponse>(\n      err: TError,\n      req: TRequest,\n      res: TResponse,\n      next: () => void,\n    ) => {\n      try {\n        await targetCallback(err, req, res, next);\n      } catch (e) {\n        const host = new ExecutionContextHost([req, res, next]);\n        exceptionsHandler.next(e, host);\n        return res;\n      }\n    };\n  }\n}\n"]}