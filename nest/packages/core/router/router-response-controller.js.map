{"version":3,"file":"router-response-controller.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/core/","sources":["router/router-response-controller.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  HttpServer,\n  HttpStatus,\n  Logger,\n  RequestMethod,\n  MessageEvent,\n} from '@nestjs/common';\nimport { isObject } from '@nestjs/common/utils/shared.utils';\nimport { IncomingMessage } from 'http';\nimport { EMPTY, lastValueFrom, Observable, isObservable } from 'rxjs';\nimport { catchError, debounce, map } from 'rxjs/operators';\nimport {\n  AdditionalHeaders,\n  WritableHeaderStream,\n  SseStream,\n} from './sse-stream';\n\nexport interface CustomHeader {\n  name: string;\n  value: string;\n}\n\nexport interface RedirectResponse {\n  url: string;\n  statusCode?: number;\n}\n\nexport class RouterResponseController {\n  private readonly logger = new Logger(RouterResponseController.name);\n\n  constructor(private readonly applicationRef: HttpServer) {}\n\n  public async apply<TInput = any, TResponse = any>(\n    result: TInput,\n    response: TResponse,\n    httpStatusCode?: number,\n  ) {\n    return this.applicationRef.reply(response, result, httpStatusCode);\n  }\n\n  public async redirect<TInput = any, TResponse = any>(\n    resultOrDeferred: TInput,\n    response: TResponse,\n    redirectResponse: RedirectResponse,\n  ) {\n    const result = await this.transformToResult(resultOrDeferred);\n    const statusCode =\n      result && result.statusCode\n        ? result.statusCode\n        : redirectResponse.statusCode\n        ? redirectResponse.statusCode\n        : HttpStatus.FOUND;\n    const url = result && result.url ? result.url : redirectResponse.url;\n    this.applicationRef.redirect(response, statusCode, url);\n  }\n\n  public async render<TInput = unknown, TResponse = unknown>(\n    resultOrDeferred: TInput,\n    response: TResponse,\n    template: string,\n  ) {\n    const result = await this.transformToResult(resultOrDeferred);\n    return this.applicationRef.render(response, template, result);\n  }\n\n  public async transformToResult(resultOrDeferred: any) {\n    if (isObservable(resultOrDeferred)) {\n      return lastValueFrom(resultOrDeferred);\n    }\n    return resultOrDeferred;\n  }\n\n  public getStatusByMethod(requestMethod: RequestMethod): number {\n    switch (requestMethod) {\n      case RequestMethod.POST:\n        return HttpStatus.CREATED;\n      default:\n        return HttpStatus.OK;\n    }\n  }\n\n  public setHeaders<TResponse = unknown>(\n    response: TResponse,\n    headers: CustomHeader[],\n  ) {\n    headers.forEach(({ name, value }) =>\n      this.applicationRef.setHeader(response, name, value),\n    );\n  }\n\n  public setStatus<TResponse = unknown>(\n    response: TResponse,\n    statusCode: number,\n  ) {\n    this.applicationRef.status(response, statusCode);\n  }\n\n  public sse<\n    TInput extends Observable<unknown> = any,\n    TResponse extends WritableHeaderStream = any,\n    TRequest extends IncomingMessage = any,\n  >(\n    result: TInput,\n    response: TResponse,\n    request: TRequest,\n    options?: { additionalHeaders: AdditionalHeaders },\n  ) {\n    // It's possible that we sent headers already so don't use a stream\n    if (response.writableEnded) {\n      return;\n    }\n\n    this.assertObservable(result);\n\n    const stream = new SseStream(request);\n    stream.pipe(response, options);\n\n    const subscription = result\n      .pipe(\n        map((message): MessageEvent => {\n          if (isObject(message)) {\n            return message as MessageEvent;\n          }\n\n          return { data: message as object | string };\n        }),\n        debounce(\n          message =>\n            new Promise<void>(resolve =>\n              stream.writeMessage(message, () => resolve()),\n            ),\n        ),\n        catchError(err => {\n          const data = err instanceof Error ? err.message : err;\n          stream.writeMessage({ type: 'error', data }, writeError => {\n            if (writeError) {\n              this.logger.error(writeError);\n            }\n          });\n\n          return EMPTY;\n        }),\n      )\n      .subscribe({\n        complete: () => {\n          response.end();\n        },\n      });\n\n    request.on('close', () => {\n      subscription.unsubscribe();\n    });\n  }\n\n  private assertObservable(value: any) {\n    if (!isObservable(value)) {\n      throw new ReferenceError(\n        'You must return an Observable stream to use Server-Sent Events (SSE).',\n      );\n    }\n  }\n}\n"]}