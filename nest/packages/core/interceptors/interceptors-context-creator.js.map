{"version":3,"file":"interceptors-context-creator.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/core/","sources":["interceptors/interceptors-context-creator.ts"],"names":[],"mappings":"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","sourcesContent":["import { INTERCEPTORS_METADATA } from '@nestjs/common/constants';\nimport { Controller, NestInterceptor, Type } from '@nestjs/common/interfaces';\nimport { isEmpty, isFunction } from '@nestjs/common/utils/shared.utils';\nimport { iterate } from 'iterare';\nimport { ApplicationConfig } from '../application-config';\nimport { ContextCreator } from '../helpers/context-creator';\nimport { STATIC_CONTEXT } from '../injector/constants';\nimport { NestContainer } from '../injector/container';\nimport { InstanceWrapper } from '../injector/instance-wrapper';\n\nexport class InterceptorsContextCreator extends ContextCreator {\n  private moduleContext: string;\n\n  constructor(\n    private readonly container: NestContainer,\n    private readonly config?: ApplicationConfig,\n  ) {\n    super();\n  }\n\n  public create(\n    instance: Controller,\n    callback: (...args: unknown[]) => unknown,\n    module: string,\n    contextId = STATIC_CONTEXT,\n    inquirerId?: string,\n  ): NestInterceptor[] {\n    this.moduleContext = module;\n    return this.createContext(\n      instance,\n      callback,\n      INTERCEPTORS_METADATA,\n      contextId,\n      inquirerId,\n    );\n  }\n\n  public createConcreteContext<T extends any[], R extends any[]>(\n    metadata: T,\n    contextId = STATIC_CONTEXT,\n    inquirerId?: string,\n  ): R {\n    if (isEmpty(metadata)) {\n      return [] as R;\n    }\n    return iterate(metadata)\n      .filter(\n        interceptor =>\n          interceptor && (interceptor.name || interceptor.intercept),\n      )\n      .map(interceptor =>\n        this.getInterceptorInstance(interceptor, contextId, inquirerId),\n      )\n      .filter(\n        (interceptor: NestInterceptor) =>\n          interceptor && isFunction(interceptor.intercept),\n      )\n      .toArray() as R;\n  }\n\n  public getInterceptorInstance(\n    metatype: Function | NestInterceptor,\n    contextId = STATIC_CONTEXT,\n    inquirerId?: string,\n  ): NestInterceptor | null {\n    const isObject = (metatype as NestInterceptor).intercept;\n    if (isObject) {\n      return metatype as NestInterceptor;\n    }\n    const instanceWrapper = this.getInstanceByMetatype(\n      metatype as Type<unknown>,\n    );\n    if (!instanceWrapper) {\n      return null;\n    }\n    const instanceHost = instanceWrapper.getInstanceByContextId(\n      this.getContextId(contextId, instanceWrapper),\n      inquirerId,\n    );\n    return instanceHost && instanceHost.instance;\n  }\n\n  public getInstanceByMetatype(\n    metatype: Type<unknown>,\n  ): InstanceWrapper | undefined {\n    if (!this.moduleContext) {\n      return;\n    }\n    const collection = this.container.getModules();\n    const moduleRef = collection.get(this.moduleContext);\n    if (!moduleRef) {\n      return;\n    }\n    return moduleRef.injectables.get(metatype);\n  }\n\n  public getGlobalMetadata<T extends unknown[]>(\n    contextId = STATIC_CONTEXT,\n    inquirerId?: string,\n  ): T {\n    if (!this.config) {\n      return [] as T;\n    }\n    const globalInterceptors = this.config.getGlobalInterceptors() as T;\n    if (contextId === STATIC_CONTEXT && !inquirerId) {\n      return globalInterceptors;\n    }\n    const scopedInterceptorWrappers =\n      this.config.getGlobalRequestInterceptors() as InstanceWrapper[];\n    const scopedInterceptors = iterate(scopedInterceptorWrappers)\n      .map(wrapper =>\n        wrapper.getInstanceByContextId(\n          this.getContextId(contextId, wrapper),\n          inquirerId,\n        ),\n      )\n      .filter(host => !!host)\n      .map(host => host.instance)\n      .toArray();\n\n    return globalInterceptors.concat(scopedInterceptors) as T;\n  }\n}\n"]}