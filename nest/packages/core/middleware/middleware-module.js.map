{"version":3,"file":"middleware-module.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/core/","sources":["middleware/middleware-module.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpServer, Logger } from '@nestjs/common';\nimport { RequestMethod } from '@nestjs/common/enums/request-method.enum';\nimport {\n  MiddlewareConfiguration,\n  NestMiddleware,\n  RouteInfo,\n} from '@nestjs/common/interfaces/middleware';\nimport { NestApplicationContextOptions } from '@nestjs/common/interfaces/nest-application-context-options.interface';\nimport { isUndefined } from '@nestjs/common/utils/shared.utils';\nimport { ApplicationConfig } from '../application-config';\nimport { InvalidMiddlewareException } from '../errors/exceptions/invalid-middleware.exception';\nimport { RuntimeException } from '../errors/exceptions/runtime.exception';\nimport { ContextIdFactory } from '../helpers/context-id-factory';\nimport { ExecutionContextHost } from '../helpers/execution-context-host';\nimport { STATIC_CONTEXT } from '../injector/constants';\nimport { NestContainer } from '../injector/container';\nimport { Injector } from '../injector/injector';\nimport { ContextId, InstanceWrapper } from '../injector/instance-wrapper';\nimport { InstanceToken, Module } from '../injector/module';\nimport { GraphInspector } from '../inspector/graph-inspector';\nimport {\n  Entrypoint,\n  MiddlewareEntrypointMetadata,\n} from '../inspector/interfaces/entrypoint.interface';\nimport { REQUEST_CONTEXT_ID } from '../router/request/request-constants';\nimport { RouterExceptionFilters } from '../router/router-exception-filters';\nimport { RouterProxy } from '../router/router-proxy';\nimport { isRequestMethodAll } from '../router/utils';\nimport { MiddlewareBuilder } from './builder';\nimport { MiddlewareContainer } from './container';\nimport { MiddlewareResolver } from './resolver';\nimport { RouteInfoPathExtractor } from './route-info-path-extractor';\nimport { RoutesMapper } from './routes-mapper';\n\nexport class MiddlewareModule<\n  TAppOptions extends NestApplicationContextOptions = NestApplicationContextOptions,\n> {\n  private readonly routerProxy = new RouterProxy();\n  private readonly exceptionFiltersCache = new WeakMap();\n  private readonly logger = new Logger(MiddlewareModule.name);\n\n  private injector: Injector;\n  private routerExceptionFilter: RouterExceptionFilters;\n  private routesMapper: RoutesMapper;\n  private resolver: MiddlewareResolver;\n  private container: NestContainer;\n  private httpAdapter: HttpServer;\n  private graphInspector: GraphInspector;\n  private appOptions: TAppOptions;\n  private routeInfoPathExtractor: RouteInfoPathExtractor;\n\n  public async register(\n    middlewareContainer: MiddlewareContainer,\n    container: NestContainer,\n    config: ApplicationConfig,\n    injector: Injector,\n    httpAdapter: HttpServer,\n    graphInspector: GraphInspector,\n    options: TAppOptions,\n  ) {\n    this.appOptions = options;\n\n    const appRef = container.getHttpAdapterRef();\n    this.routerExceptionFilter = new RouterExceptionFilters(\n      container,\n      config,\n      appRef,\n    );\n    this.routesMapper = new RoutesMapper(container);\n    this.resolver = new MiddlewareResolver(middlewareContainer, injector);\n    this.routeInfoPathExtractor = new RouteInfoPathExtractor(config);\n    this.injector = injector;\n    this.container = container;\n    this.httpAdapter = httpAdapter;\n    this.graphInspector = graphInspector;\n\n    const modules = container.getModules();\n    await this.resolveMiddleware(middlewareContainer, modules);\n  }\n\n  public async resolveMiddleware(\n    middlewareContainer: MiddlewareContainer,\n    modules: Map<string, Module>,\n  ) {\n    const moduleEntries = [...modules.entries()];\n    const loadMiddlewareConfiguration = async ([moduleName, moduleRef]: [\n      string,\n      Module,\n    ]) => {\n      await this.loadConfiguration(middlewareContainer, moduleRef, moduleName);\n      await this.resolver.resolveInstances(moduleRef, moduleName);\n    };\n    await Promise.all(moduleEntries.map(loadMiddlewareConfiguration));\n  }\n\n  public async loadConfiguration(\n    middlewareContainer: MiddlewareContainer,\n    moduleRef: Module,\n    moduleKey: string,\n  ) {\n    const { instance } = moduleRef;\n    if (!instance.configure) {\n      return;\n    }\n    const middlewareBuilder = new MiddlewareBuilder(\n      this.routesMapper,\n      this.httpAdapter,\n      this.routeInfoPathExtractor,\n    );\n    try {\n      await instance.configure(middlewareBuilder);\n    } catch (err) {\n      if (!this.appOptions.preview) {\n        throw err;\n      }\n      const warningMessage =\n        `Warning! \"${moduleRef.name}\" module exposes a \"configure\" method that throws an exception in the preview mode` +\n        ` (possibly due to missing dependencies). Note: you can ignore this message, just be aware that some of those conditional middlewares will not be reflected in your graph.`;\n      this.logger.warn(warningMessage);\n    }\n\n    if (!(middlewareBuilder instanceof MiddlewareBuilder)) {\n      return;\n    }\n    const config = middlewareBuilder.build();\n    middlewareContainer.insertConfig(config, moduleKey);\n  }\n\n  public async registerMiddleware(\n    middlewareContainer: MiddlewareContainer,\n    applicationRef: any,\n  ) {\n    const configs = middlewareContainer.getConfigurations();\n    const registerAllConfigs = async (\n      moduleKey: string,\n      middlewareConfig: MiddlewareConfiguration[],\n    ) => {\n      for (const config of middlewareConfig) {\n        await this.registerMiddlewareConfig(\n          middlewareContainer,\n          config,\n          moduleKey,\n          applicationRef,\n        );\n      }\n    };\n\n    const entriesSortedByDistance = [...configs.entries()].sort(\n      ([moduleA], [moduleB]) => {\n        return (\n          this.container.getModuleByKey(moduleA).distance -\n          this.container.getModuleByKey(moduleB).distance\n        );\n      },\n    );\n    for (const [moduleRef, moduleConfigurations] of entriesSortedByDistance) {\n      await registerAllConfigs(moduleRef, [...moduleConfigurations]);\n    }\n  }\n\n  public async registerMiddlewareConfig(\n    middlewareContainer: MiddlewareContainer,\n    config: MiddlewareConfiguration,\n    moduleKey: string,\n    applicationRef: any,\n  ) {\n    const { forRoutes } = config;\n    for (const routeInfo of forRoutes) {\n      await this.registerRouteMiddleware(\n        middlewareContainer,\n        routeInfo as RouteInfo,\n        config,\n        moduleKey,\n        applicationRef,\n      );\n    }\n  }\n\n  public async registerRouteMiddleware(\n    middlewareContainer: MiddlewareContainer,\n    routeInfo: RouteInfo,\n    config: MiddlewareConfiguration,\n    moduleKey: string,\n    applicationRef: any,\n  ) {\n    const middlewareCollection = [].concat(config.middleware);\n    const moduleRef = this.container.getModuleByKey(moduleKey);\n\n    for (const metatype of middlewareCollection) {\n      const collection = middlewareContainer.getMiddlewareCollection(moduleKey);\n      const instanceWrapper = collection.get(metatype);\n      if (isUndefined(instanceWrapper)) {\n        throw new RuntimeException();\n      }\n      if (instanceWrapper.isTransient) {\n        return;\n      }\n      this.graphInspector.insertClassNode(\n        moduleRef,\n        instanceWrapper,\n        'middleware',\n      );\n      const middlewareDefinition: Entrypoint<MiddlewareEntrypointMetadata> = {\n        type: 'middleware',\n        methodName: 'use',\n        className: instanceWrapper.name,\n        classNodeId: instanceWrapper.id,\n        metadata: {\n          key: routeInfo.path,\n          path: routeInfo.path,\n          requestMethod:\n            (RequestMethod[routeInfo.method] as keyof typeof RequestMethod) ??\n            'ALL',\n          version: routeInfo.version,\n        },\n      };\n      this.graphInspector.insertEntrypointDefinition(\n        middlewareDefinition,\n        instanceWrapper.id,\n      );\n\n      await this.bindHandler(\n        instanceWrapper,\n        applicationRef,\n        routeInfo,\n        moduleRef,\n        collection,\n      );\n    }\n  }\n\n  private async bindHandler(\n    wrapper: InstanceWrapper<NestMiddleware>,\n    applicationRef: HttpServer,\n    routeInfo: RouteInfo,\n    moduleRef: Module,\n    collection: Map<InstanceToken, InstanceWrapper>,\n  ) {\n    const { instance, metatype } = wrapper;\n    if (isUndefined(instance?.use)) {\n      throw new InvalidMiddlewareException(metatype.name);\n    }\n    const isStatic = wrapper.isDependencyTreeStatic();\n    if (isStatic) {\n      const proxy = await this.createProxy(instance);\n      return this.registerHandler(applicationRef, routeInfo, proxy);\n    }\n\n    const isTreeDurable = wrapper.isDependencyTreeDurable();\n\n    await this.registerHandler(\n      applicationRef,\n      routeInfo,\n      async <TRequest, TResponse>(\n        req: TRequest,\n        res: TResponse,\n        next: () => void,\n      ) => {\n        try {\n          const contextId = this.getContextId(req, isTreeDurable);\n          const contextInstance = await this.injector.loadPerContext(\n            instance,\n            moduleRef,\n            collection,\n            contextId,\n          );\n          const proxy = await this.createProxy<TRequest, TResponse>(\n            contextInstance,\n            contextId,\n          );\n          return proxy(req, res, next);\n        } catch (err) {\n          let exceptionsHandler = this.exceptionFiltersCache.get(instance.use);\n          if (!exceptionsHandler) {\n            exceptionsHandler = this.routerExceptionFilter.create(\n              instance,\n              instance.use,\n              undefined,\n            );\n            this.exceptionFiltersCache.set(instance.use, exceptionsHandler);\n          }\n          const host = new ExecutionContextHost([req, res, next]);\n          exceptionsHandler.next(err, host);\n        }\n      },\n    );\n  }\n\n  private async createProxy<TRequest = unknown, TResponse = unknown>(\n    instance: NestMiddleware,\n    contextId = STATIC_CONTEXT,\n  ): Promise<(req: TRequest, res: TResponse, next: () => void) => void> {\n    const exceptionsHandler = this.routerExceptionFilter.create(\n      instance,\n      instance.use,\n      undefined,\n      contextId,\n    );\n    const middleware = instance.use.bind(instance);\n    return this.routerProxy.createProxy(middleware, exceptionsHandler);\n  }\n\n  private async registerHandler(\n    applicationRef: HttpServer,\n    routeInfo: RouteInfo,\n    proxy: <TRequest, TResponse>(\n      req: TRequest,\n      res: TResponse,\n      next: () => void,\n    ) => void,\n  ) {\n    const { method } = routeInfo;\n    const paths = this.routeInfoPathExtractor.extractPathsFrom(routeInfo);\n    const isMethodAll = isRequestMethodAll(method);\n    const requestMethod = RequestMethod[method];\n    const router = await applicationRef.createMiddlewareFactory(method);\n    const middlewareFunction = isMethodAll\n      ? proxy\n      : <TRequest, TResponse>(\n          req: TRequest,\n          res: TResponse,\n          next: () => void,\n        ) => {\n          if (applicationRef.getRequestMethod(req) === requestMethod) {\n            return proxy(req, res, next);\n          }\n          return next();\n        };\n    paths.forEach(path => router(path, middlewareFunction));\n  }\n\n  private getContextId(request: unknown, isTreeDurable: boolean): ContextId {\n    const contextId = ContextIdFactory.getByRequest(request);\n    if (!request[REQUEST_CONTEXT_ID]) {\n      Object.defineProperty(request, REQUEST_CONTEXT_ID, {\n        value: contextId,\n        enumerable: false,\n        writable: false,\n        configurable: false,\n      });\n\n      const requestProviderValue = isTreeDurable ? contextId.payload : request;\n      this.container.registerRequestProvider(requestProviderValue, contextId);\n    }\n    return contextId;\n  }\n}\n"]}