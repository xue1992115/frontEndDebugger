{"version":3,"file":"builder.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/core/","sources":["middleware/builder.ts"],"names":[],"mappings":";;;AAAA,kGAAgF;AAWhF,qCAAkC;AAGlC,mCAA2C;AAE3C,MAAa,iBAAiB;IAG5B,YACmB,YAA0B,EAC1B,WAAuB,EACvB,sBAA8C;QAF9C,iBAAY,GAAZ,YAAY,CAAc;QAC1B,gBAAW,GAAX,WAAW,CAAY;QACvB,2BAAsB,GAAtB,sBAAsB,CAAwB;QALhD,yBAAoB,GAAG,IAAI,GAAG,EAA2B,CAAC;IAMxE,CAAC;IAEG,KAAK,CACV,GAAG,UAA6C;QAEhD,OAAO,IAAI,iBAAiB,CAAC,WAAW,CACtC,IAAI,EACJ,IAAA,gCAAO,EAAC,UAAU,CAAC,EACnB,IAAI,CAAC,sBAAsB,CAC5B,CAAC;IACJ,CAAC;IAEM,KAAK;QACV,OAAO,CAAC,GAAG,IAAI,CAAC,oBAAoB,CAAC,CAAC;IACxC,CAAC;IAEM,cAAc;QACnB,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;;AAEuB,6BAAW,GAAG;IAGpC,YACmB,OAA0B,EAC1B,UAA6C,EACtD,sBAA8C;QAFrC,YAAO,GAAP,OAAO,CAAmB;QAC1B,eAAU,GAAV,UAAU,CAAmC;QACtD,2BAAsB,GAAtB,sBAAsB,CAAwB;QALhD,mBAAc,GAAgB,EAAE,CAAC;IAMtC,CAAC;IAEG,iBAAiB;QACtB,OAAO,IAAI,CAAC,cAAc,CAAC;IAC7B,CAAC;IAEM,OAAO,CACZ,GAAG,MAAiC;QAEpC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,iCAC7D,KAAK,KACR,IAAI,EAAE,IAAI,CAAC,sBAAsB,CAAC,eAAe,CAAC,KAAK,CAAC,IACxD,CAAC,CAAC;QACJ,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,SAAS,CACd,GAAG,MAA6C;QAEhD,MAAM,EAAE,oBAAoB,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC;QAE9C,MAAM,SAAS,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;QACjD,MAAM,aAAa,GAAG;YACpB,UAAU,EAAE,IAAA,wBAAgB,EAC1B,IAAI,CAAC,UAAU,EACf,IAAI,CAAC,cAAc,EACnB,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,CAC9B;YACD,SAAS;SACV,CAAC;QACF,oBAAoB,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QACxC,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAEO,iBAAiB,CACvB,MAA6C;QAE7C,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC;QAEtC,OAAO,IAAA,iBAAO,EAAC,MAAM,CAAC;aACnB,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,YAAY,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;aACrD,OAAO,EAAE;aACT,OAAO,EAAE,CAAC;IACf,CAAC;CACF,AAnDkC,CAmDjC;AA9ES,8CAAiB","sourcesContent":["import { flatten } from '@nestjs/common/decorators/core/dependencies.decorator';\nimport {\n  HttpServer,\n  MiddlewareConsumer,\n  Type,\n} from '@nestjs/common/interfaces';\nimport {\n  MiddlewareConfigProxy,\n  MiddlewareConfiguration,\n  RouteInfo,\n} from '@nestjs/common/interfaces/middleware';\nimport { iterate } from 'iterare';\nimport { RouteInfoPathExtractor } from './route-info-path-extractor';\nimport { RoutesMapper } from './routes-mapper';\nimport { filterMiddleware } from './utils';\n\nexport class MiddlewareBuilder implements MiddlewareConsumer {\n  private readonly middlewareCollection = new Set<MiddlewareConfiguration>();\n\n  constructor(\n    private readonly routesMapper: RoutesMapper,\n    private readonly httpAdapter: HttpServer,\n    private readonly routeInfoPathExtractor: RouteInfoPathExtractor,\n  ) {}\n\n  public apply(\n    ...middleware: Array<Type<any> | Function | any>\n  ): MiddlewareConfigProxy {\n    return new MiddlewareBuilder.ConfigProxy(\n      this,\n      flatten(middleware),\n      this.routeInfoPathExtractor,\n    );\n  }\n\n  public build(): MiddlewareConfiguration[] {\n    return [...this.middlewareCollection];\n  }\n\n  public getHttpAdapter(): HttpServer {\n    return this.httpAdapter;\n  }\n\n  private static readonly ConfigProxy = class implements MiddlewareConfigProxy {\n    private excludedRoutes: RouteInfo[] = [];\n\n    constructor(\n      private readonly builder: MiddlewareBuilder,\n      private readonly middleware: Array<Type<any> | Function | any>,\n      private routeInfoPathExtractor: RouteInfoPathExtractor,\n    ) {}\n\n    public getExcludedRoutes(): RouteInfo[] {\n      return this.excludedRoutes;\n    }\n\n    public exclude(\n      ...routes: Array<string | RouteInfo>\n    ): MiddlewareConfigProxy {\n      this.excludedRoutes = this.getRoutesFlatList(routes).map(route => ({\n        ...route,\n        path: this.routeInfoPathExtractor.extractPathFrom(route),\n      }));\n      return this;\n    }\n\n    public forRoutes(\n      ...routes: Array<string | Type<any> | RouteInfo>\n    ): MiddlewareConsumer {\n      const { middlewareCollection } = this.builder;\n\n      const forRoutes = this.getRoutesFlatList(routes);\n      const configuration = {\n        middleware: filterMiddleware(\n          this.middleware,\n          this.excludedRoutes,\n          this.builder.getHttpAdapter(),\n        ),\n        forRoutes,\n      };\n      middlewareCollection.add(configuration);\n      return this.builder;\n    }\n\n    private getRoutesFlatList(\n      routes: Array<string | Type<any> | RouteInfo>,\n    ): RouteInfo[] {\n      const { routesMapper } = this.builder;\n\n      return iterate(routes)\n        .map(route => routesMapper.mapRouteToRouteInfo(route))\n        .flatten()\n        .toArray();\n    }\n  };\n}\n"]}