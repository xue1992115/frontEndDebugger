{"version":3,"file":"route-info-path-extractor.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/core/","sources":["middleware/route-info-path-extractor.ts"],"names":[],"mappings":"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","sourcesContent":["import { VersioningType } from '@nestjs/common';\nimport {\n  RouteInfo,\n  VersioningOptions,\n  VersionValue,\n} from '@nestjs/common/interfaces';\nimport {\n  addLeadingSlash,\n  stripEndSlash,\n} from '@nestjs/common/utils/shared.utils';\nimport { ApplicationConfig } from '../application-config';\nimport { ExcludeRouteMetadata } from '../router/interfaces/exclude-route-metadata.interface';\nimport { isRouteExcluded } from '../router/utils';\nimport { RoutePathFactory } from './../router/route-path-factory';\n\nexport class RouteInfoPathExtractor {\n  private routePathFactory: RoutePathFactory;\n  private readonly prefixPath: string;\n  private readonly excludedGlobalPrefixRoutes: ExcludeRouteMetadata[];\n  private readonly versioningConfig?: VersioningOptions;\n\n  constructor(private readonly applicationConfig: ApplicationConfig) {\n    this.routePathFactory = new RoutePathFactory(applicationConfig);\n    this.prefixPath = stripEndSlash(\n      addLeadingSlash(this.applicationConfig.getGlobalPrefix()),\n    );\n    this.excludedGlobalPrefixRoutes =\n      this.applicationConfig.getGlobalPrefixOptions().exclude;\n    this.versioningConfig = this.applicationConfig.getVersioning();\n  }\n\n  public extractPathsFrom({ path, method, version }: RouteInfo): string[] {\n    const versionPath = this.extractVersionPathFrom(version);\n\n    if (this.isAWildcard(path)) {\n      return Array.isArray(this.excludedGlobalPrefixRoutes)\n        ? [\n            this.prefixPath + versionPath + addLeadingSlash(path),\n            ...this.excludedGlobalPrefixRoutes.map(\n              route => versionPath + addLeadingSlash(route.path),\n            ),\n          ]\n        : [this.prefixPath + versionPath + addLeadingSlash(path)];\n    }\n\n    return [this.extractNonWildcardPathFrom({ path, method, version })];\n  }\n\n  public extractPathFrom(route: RouteInfo): string {\n    if (this.isAWildcard(route.path) && !route.version) {\n      return addLeadingSlash(route.path);\n    }\n\n    return this.extractNonWildcardPathFrom(route);\n  }\n\n  private isAWildcard(path: string): boolean {\n    return ['*', '/*', '/*/', '(.*)', '/(.*)'].includes(path);\n  }\n\n  private extractNonWildcardPathFrom({\n    path,\n    method,\n    version,\n  }: RouteInfo): string {\n    const versionPath = this.extractVersionPathFrom(version);\n\n    if (\n      Array.isArray(this.excludedGlobalPrefixRoutes) &&\n      isRouteExcluded(this.excludedGlobalPrefixRoutes, path, method)\n    ) {\n      return versionPath + addLeadingSlash(path);\n    }\n\n    return this.prefixPath + versionPath + addLeadingSlash(path);\n  }\n\n  private extractVersionPathFrom(version?: VersionValue): string {\n    if (!version || this.versioningConfig?.type !== VersioningType.URI)\n      return '';\n\n    const versionPrefix = this.routePathFactory.getVersionPrefix(\n      this.versioningConfig,\n    );\n    return addLeadingSlash(versionPrefix + version.toString());\n  }\n}\n"]}