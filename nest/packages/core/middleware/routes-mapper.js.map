{"version":3,"file":"routes-mapper.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/core/","sources":["middleware/routes-mapper.ts"],"names":[],"mappings":"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","sourcesContent":["import { MODULE_PATH, PATH_METADATA } from '@nestjs/common/constants';\nimport { RouteInfo, Type } from '@nestjs/common/interfaces';\nimport {\n  addLeadingSlash,\n  isString,\n  isUndefined,\n} from '@nestjs/common/utils/shared.utils';\nimport { NestContainer } from '../injector/container';\nimport { Module } from '../injector/module';\nimport { MetadataScanner } from '../metadata-scanner';\nimport { PathsExplorer } from '../router/paths-explorer';\nimport { targetModulesByContainer } from '../router/router-module';\n\nexport class RoutesMapper {\n  private readonly pathsExplorer: PathsExplorer;\n\n  constructor(private readonly container: NestContainer) {\n    this.pathsExplorer = new PathsExplorer(new MetadataScanner());\n  }\n\n  public mapRouteToRouteInfo(\n    route: Type<any> | RouteInfo | string,\n  ): RouteInfo[] {\n    if (isString(route)) {\n      return this.getRouteInfoFromPath(route);\n    }\n    const routePathOrPaths = this.getRoutePath(route);\n    if (this.isRouteInfo(routePathOrPaths, route)) {\n      return this.getRouteInfoFromObject(route);\n    }\n\n    return this.getRouteInfoFromController(route, routePathOrPaths);\n  }\n\n  private getRouteInfoFromPath(routePath: string): RouteInfo[] {\n    const defaultRequestMethod = -1;\n    return [\n      {\n        path: addLeadingSlash(routePath),\n        method: defaultRequestMethod as any,\n      },\n    ];\n  }\n\n  private getRouteInfoFromObject(routeInfoObject: RouteInfo): RouteInfo[] {\n    const routeInfo: RouteInfo = {\n      path: addLeadingSlash(routeInfoObject.path),\n      method: routeInfoObject.method,\n    };\n\n    if (routeInfoObject.version) {\n      routeInfo.version = routeInfoObject.version;\n    }\n    return [routeInfo];\n  }\n\n  private getRouteInfoFromController(\n    controller: Type<any>,\n    routePath: string,\n  ): RouteInfo[] {\n    const controllerPaths = this.pathsExplorer.scanForPaths(\n      Object.create(controller),\n      controller.prototype,\n    );\n    const moduleRef = this.getHostModuleOfController(controller);\n    const modulePath = this.getModulePath(moduleRef?.metatype);\n\n    const concatPaths = <T>(acc: T[], currentValue: T[]) =>\n      acc.concat(currentValue);\n\n    return []\n      .concat(routePath)\n      .map(routePath =>\n        controllerPaths\n          .map(item =>\n            item.path?.map(p => {\n              let path = modulePath ?? '';\n              path += this.normalizeGlobalPath(routePath) + addLeadingSlash(p);\n\n              const routeInfo: RouteInfo = {\n                path,\n                method: item.requestMethod,\n              };\n\n              if (item.version) {\n                routeInfo.version = item.version;\n              }\n\n              return routeInfo;\n            }),\n          )\n          .reduce(concatPaths, []),\n      )\n      .reduce(concatPaths, []);\n  }\n\n  private isRouteInfo(\n    path: string | string[] | undefined,\n    objectOrClass: Function | RouteInfo,\n  ): objectOrClass is RouteInfo {\n    return isUndefined(path);\n  }\n\n  private normalizeGlobalPath(path: string): string {\n    const prefix = addLeadingSlash(path);\n    return prefix === '/' ? '' : prefix;\n  }\n\n  private getRoutePath(route: Type<any> | RouteInfo): string | undefined {\n    return Reflect.getMetadata(PATH_METADATA, route);\n  }\n\n  private getHostModuleOfController(\n    metatype: Type<unknown>,\n  ): Module | undefined {\n    if (!metatype) {\n      return;\n    }\n    const modulesContainer = this.container.getModules();\n    const moduleRefsSet = targetModulesByContainer.get(modulesContainer);\n    if (!moduleRefsSet) {\n      return;\n    }\n\n    const modules = Array.from(modulesContainer.values()).filter(moduleRef =>\n      moduleRefsSet.has(moduleRef),\n    );\n    return modules.find(({ routes }) => routes.has(metatype));\n  }\n\n  private getModulePath(\n    metatype: Type<unknown> | undefined,\n  ): string | undefined {\n    if (!metatype) {\n      return;\n    }\n    const modulesContainer = this.container.getModules();\n    const modulePath = Reflect.getMetadata(\n      MODULE_PATH + modulesContainer.applicationId,\n      metatype,\n    );\n    return modulePath ?? Reflect.getMetadata(MODULE_PATH, metatype);\n  }\n}\n"]}