{"version":3,"file":"container.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/core/","sources":["middleware/container.ts"],"names":[],"mappings":";;;AAEA,gEAA2D;AAC3D,sDAAkD;AAElD,mEAA+D;AAG/D,MAAa,mBAAmB;IAU9B,YAA6B,SAAwB;QAAxB,cAAS,GAAT,SAAS,CAAe;QATpC,eAAU,GAAG,IAAI,GAAG,EAGlC,CAAC;QACa,sBAAiB,GAAG,IAAI,GAAG,EAGzC,CAAC;IAEoD,CAAC;IAElD,uBAAuB,CAC5B,SAAiB;QAEjB,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE;YACnC,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;YAC3D,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,SAAS,EAAE,SAAS,CAAC,WAAW,CAAC,CAAC;SACvD;QACD,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IACxC,CAAC;IAEM,iBAAiB;QACtB,OAAO,IAAI,CAAC,iBAAiB,CAAC;IAChC,CAAC;IAEM,YAAY,CACjB,UAAqC,EACrC,SAAiB;QAEjB,MAAM,UAAU,GAAG,IAAI,CAAC,uBAAuB,CAAC,SAAS,CAAC,CAAC;QAC3D,MAAM,YAAY,GAAG,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;QAErD,MAAM,cAAc,GAAG,UAAU,IAAI,EAAE,CAAC;QACxC,MAAM,gBAAgB,GAAG,CAA0B,QAAW,EAAE,EAAE;;YAChE,MAAM,KAAK,GAAG,QAAQ,CAAC;YACvB,UAAU,CAAC,GAAG,CACZ,KAAK,EACL,IAAI,kCAAe,CAAC;gBAClB,KAAK,EAAE,IAAA,+BAAa,EAAC,QAAQ,CAAC;gBAC9B,OAAO,EAAE,IAAA,sBAAS,EAAC,QAAQ,CAAC;gBAC5B,IAAI,EAAE,MAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,IAAI,mCAAI,KAAK;gBAC1B,QAAQ;gBACR,KAAK;aACN,CAAC,CACH,CAAC;QACJ,CAAC,CAAC;QACF,cAAc,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YAC9B,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;YACnD,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,eAAe,CAAC,UAAkB;QACxC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;YAC3C,IAAI,CAAC,iBAAiB,CAAC,GAAG,CACxB,UAAU,EACV,IAAI,GAAG,EAA2B,CACnC,CAAC;SACH;QACD,OAAO,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IAChD,CAAC;CACF;AA9DD,kDA8DC","sourcesContent":["import { Type } from '@nestjs/common';\nimport { MiddlewareConfiguration } from '@nestjs/common/interfaces/middleware/middleware-configuration.interface';\nimport { getClassScope } from '../helpers/get-class-scope';\nimport { isDurable } from '../helpers/is-durable';\nimport { NestContainer } from '../injector/container';\nimport { InstanceWrapper } from '../injector/instance-wrapper';\nimport { InstanceToken } from '../injector/module';\n\nexport class MiddlewareContainer {\n  private readonly middleware = new Map<\n    string,\n    Map<InstanceToken, InstanceWrapper>\n  >();\n  private readonly configurationSets = new Map<\n    string,\n    Set<MiddlewareConfiguration>\n  >();\n\n  constructor(private readonly container: NestContainer) {}\n\n  public getMiddlewareCollection(\n    moduleKey: string,\n  ): Map<InstanceToken, InstanceWrapper> {\n    if (!this.middleware.has(moduleKey)) {\n      const moduleRef = this.container.getModuleByKey(moduleKey);\n      this.middleware.set(moduleKey, moduleRef.middlewares);\n    }\n    return this.middleware.get(moduleKey);\n  }\n\n  public getConfigurations(): Map<string, Set<MiddlewareConfiguration>> {\n    return this.configurationSets;\n  }\n\n  public insertConfig(\n    configList: MiddlewareConfiguration[],\n    moduleKey: string,\n  ) {\n    const middleware = this.getMiddlewareCollection(moduleKey);\n    const targetConfig = this.getTargetConfig(moduleKey);\n\n    const configurations = configList || [];\n    const insertMiddleware = <T extends Type<unknown>>(metatype: T) => {\n      const token = metatype;\n      middleware.set(\n        token,\n        new InstanceWrapper({\n          scope: getClassScope(metatype),\n          durable: isDurable(metatype),\n          name: token?.name ?? token,\n          metatype,\n          token,\n        }),\n      );\n    };\n    configurations.forEach(config => {\n      [].concat(config.middleware).map(insertMiddleware);\n      targetConfig.add(config);\n    });\n  }\n\n  private getTargetConfig(moduleName: string) {\n    if (!this.configurationSets.has(moduleName)) {\n      this.configurationSets.set(\n        moduleName,\n        new Set<MiddlewareConfiguration>(),\n      );\n    }\n    return this.configurationSets.get(moduleName);\n  }\n}\n"]}