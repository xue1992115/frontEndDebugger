{"version":3,"file":"base-exception-filter.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/core/","sources":["exceptions/base-exception-filter.ts"],"names":[],"mappings":";;;;AAAA,2CASwB;AACxB,oEAA6D;AAE7D,4CAAwC;AACxC,oEAA+D;AAE/D,MAAa,mBAAmB;IAO9B,YAA+B,cAA2B;QAA3B,mBAAc,GAAd,cAAc,CAAa;IAAG,CAAC;IAE9D,KAAK,CAAC,SAAY,EAAE,IAAmB;QACrC,MAAM,cAAc,GAClB,IAAI,CAAC,cAAc;YACnB,CAAC,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;QAE7D,IAAI,CAAC,CAAC,SAAS,YAAY,sBAAa,CAAC,EAAE;YACzC,OAAO,IAAI,CAAC,kBAAkB,CAAC,SAAS,EAAE,IAAI,EAAE,cAAc,CAAC,CAAC;SACjE;QACD,MAAM,GAAG,GAAG,SAAS,CAAC,WAAW,EAAE,CAAC;QACpC,MAAM,OAAO,GAAG,IAAA,uBAAQ,EAAC,GAAG,CAAC;YAC3B,CAAC,CAAC,GAAG;YACL,CAAC,CAAC;gBACE,UAAU,EAAE,SAAS,CAAC,SAAS,EAAE;gBACjC,OAAO,EAAE,GAAG;aACb,CAAC;QAEN,MAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;QACvC,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE;YAC3C,cAAc,CAAC,KAAK,CAAC,QAAQ,EAAE,OAAO,EAAE,SAAS,CAAC,SAAS,EAAE,CAAC,CAAC;SAChE;aAAM;YACL,cAAc,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;SAC9B;IACH,CAAC;IAEM,kBAAkB,CACvB,SAAY,EACZ,IAAmB,EACnB,cAAgD;QAEhD,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC;YACtC,CAAC,CAAC;gBACE,UAAU,EAAE,SAAS,CAAC,UAAU;gBAChC,OAAO,EAAE,SAAS,CAAC,OAAO;aAC3B;YACH,CAAC,CAAC;gBACE,UAAU,EAAE,mBAAU,CAAC,qBAAqB;gBAC5C,OAAO,EAAE,oBAAQ,CAAC,yBAAyB;aAC5C,CAAC;QAEN,MAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;QACvC,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE;YAC3C,cAAc,CAAC,KAAK,CAAC,QAAQ,EAAE,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;SACvD;aAAM;YACL,cAAc,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;SAC9B;QAED,IAAI,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,EAAE;YACrC,OAAO,mBAAmB,CAAC,MAAM,CAAC,KAAK,CACrC,SAAS,CAAC,OAAO,EACjB,SAAS,CAAC,KAAK,CAChB,CAAC;SACH;QACD,OAAO,mBAAmB,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;IACrD,CAAC;IAEM,iBAAiB,CAAC,GAAQ;QAC/B,OAAO,IAAA,uBAAQ,EAAC,GAAG,CAAC,IAAI,CAAC,CAAE,GAAa,CAAC,OAAO,CAAC;IACnD,CAAC;IAED;;;OAGG;IACI,WAAW,CAAC,GAAQ;QACzB,OAAO,CAAA,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,UAAU,MAAI,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,OAAO,CAAA,CAAC;IACzC,CAAC;;AAzEuB,0BAAM,GAAG,IAAI,eAAM,CAAC,mBAAmB,CAAC,CAAC;AAI9C;IAFlB,IAAA,iBAAQ,GAAE;IACV,IAAA,eAAM,GAAE;sCAC4B,mCAAe;4DAAC;AAL1C,kDAAmB","sourcesContent":["import {\n  ArgumentsHost,\n  ExceptionFilter,\n  HttpException,\n  HttpServer,\n  HttpStatus,\n  Inject,\n  Logger,\n  Optional,\n} from '@nestjs/common';\nimport { isObject } from '@nestjs/common/utils/shared.utils';\nimport { AbstractHttpAdapter } from '../adapters';\nimport { MESSAGES } from '../constants';\nimport { HttpAdapterHost } from '../helpers/http-adapter-host';\n\nexport class BaseExceptionFilter<T = any> implements ExceptionFilter<T> {\n  private static readonly logger = new Logger('ExceptionsHandler');\n\n  @Optional()\n  @Inject()\n  protected readonly httpAdapterHost?: HttpAdapterHost;\n\n  constructor(protected readonly applicationRef?: HttpServer) {}\n\n  catch(exception: T, host: ArgumentsHost) {\n    const applicationRef =\n      this.applicationRef ||\n      (this.httpAdapterHost && this.httpAdapterHost.httpAdapter);\n\n    if (!(exception instanceof HttpException)) {\n      return this.handleUnknownError(exception, host, applicationRef);\n    }\n    const res = exception.getResponse();\n    const message = isObject(res)\n      ? res\n      : {\n          statusCode: exception.getStatus(),\n          message: res,\n        };\n\n    const response = host.getArgByIndex(1);\n    if (!applicationRef.isHeadersSent(response)) {\n      applicationRef.reply(response, message, exception.getStatus());\n    } else {\n      applicationRef.end(response);\n    }\n  }\n\n  public handleUnknownError(\n    exception: T,\n    host: ArgumentsHost,\n    applicationRef: AbstractHttpAdapter | HttpServer,\n  ) {\n    const body = this.isHttpError(exception)\n      ? {\n          statusCode: exception.statusCode,\n          message: exception.message,\n        }\n      : {\n          statusCode: HttpStatus.INTERNAL_SERVER_ERROR,\n          message: MESSAGES.UNKNOWN_EXCEPTION_MESSAGE,\n        };\n\n    const response = host.getArgByIndex(1);\n    if (!applicationRef.isHeadersSent(response)) {\n      applicationRef.reply(response, body, body.statusCode);\n    } else {\n      applicationRef.end(response);\n    }\n\n    if (this.isExceptionObject(exception)) {\n      return BaseExceptionFilter.logger.error(\n        exception.message,\n        exception.stack,\n      );\n    }\n    return BaseExceptionFilter.logger.error(exception);\n  }\n\n  public isExceptionObject(err: any): err is Error {\n    return isObject(err) && !!(err as Error).message;\n  }\n\n  /**\n   * Checks if the thrown error comes from the \"http-errors\" library.\n   * @param err error object\n   */\n  public isHttpError(err: any): err is { statusCode: number; message: string } {\n    return err?.statusCode && err?.message;\n  }\n}\n"]}