{"version":3,"file":"external-exception-filter-context.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/core/","sources":["exceptions/external-exception-filter-context.ts"],"names":[],"mappings":";;;AAAA,wDAAsE;AAGtE,oEAA4D;AAE5D,qDAAuD;AAIvD,mFAA6E;AAC7E,+EAA0E;AAC1E,qCAAkC;AAElC,MAAa,8BAA+B,SAAQ,0DAA0B;IAC5E,YACE,SAAwB,EACP,MAA0B;QAE3C,KAAK,CAAC,SAAS,CAAC,CAAC;QAFA,WAAM,GAAN,MAAM,CAAoB;IAG7C,CAAC;IAEM,MAAM,CACX,QAAoB,EACpB,QAA6B,EAC7B,MAAc,EACd,SAAS,GAAG,0BAAc,EAC1B,UAAmB;QAEnB,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC;QAE5B,MAAM,gBAAgB,GAAG,IAAI,uDAAyB,EAAE,CAAC;QACzD,MAAM,OAAO,GAAG,IAAI,CAAC,aAAa,CAChC,QAAQ,EACR,QAAQ,EACR,sCAA0B,EAC1B,SAAS,EACT,UAAU,CACX,CAAC;QACF,IAAI,IAAA,sBAAO,EAAC,OAAO,CAAC,EAAE;YACpB,OAAO,gBAAgB,CAAC;SACzB;QACD,gBAAgB,CAAC,gBAAgB,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC;QACrD,OAAO,gBAAgB,CAAC;IAC1B,CAAC;IAEM,iBAAiB,CACtB,SAAS,GAAG,0BAAc,EAC1B,UAAmB;QAEnB,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAChB,OAAO,EAAO,CAAC;SAChB;QACD,MAAM,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAO,CAAC;QAC1D,IAAI,SAAS,KAAK,0BAAc,IAAI,CAAC,UAAU,EAAE;YAC/C,OAAO,aAAa,CAAC;SACtB;QACD,MAAM,oBAAoB,GACxB,IAAI,CAAC,MAAM,CAAC,uBAAuB,EAAuB,CAAC;QAC7D,MAAM,aAAa,GAAG,IAAA,iBAAO,EAAC,oBAAoB,CAAC;aAChD,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,sBAAsB,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;aACrE,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;aACtB,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC;aAC1B,OAAO,EAAE,CAAC;QAEb,OAAO,aAAa,CAAC,MAAM,CAAC,aAAa,CAAM,CAAC;IAClD,CAAC;CACF;AArDD,wEAqDC","sourcesContent":["import { EXCEPTION_FILTERS_METADATA } from '@nestjs/common/constants';\nimport { Controller } from '@nestjs/common/interfaces';\nimport { ExceptionFilterMetadata } from '@nestjs/common/interfaces/exceptions';\nimport { isEmpty } from '@nestjs/common/utils/shared.utils';\nimport { ApplicationConfig } from '../application-config';\nimport { STATIC_CONTEXT } from '../injector/constants';\nimport { NestContainer } from '../injector/container';\nimport { InstanceWrapper } from '../injector/instance-wrapper';\nimport { RouterProxyCallback } from '../router/router-proxy';\nimport { BaseExceptionFilterContext } from './base-exception-filter-context';\nimport { ExternalExceptionsHandler } from './external-exceptions-handler';\nimport { iterate } from 'iterare';\n\nexport class ExternalExceptionFilterContext extends BaseExceptionFilterContext {\n  constructor(\n    container: NestContainer,\n    private readonly config?: ApplicationConfig,\n  ) {\n    super(container);\n  }\n\n  public create(\n    instance: Controller,\n    callback: RouterProxyCallback,\n    module: string,\n    contextId = STATIC_CONTEXT,\n    inquirerId?: string,\n  ): ExternalExceptionsHandler {\n    this.moduleContext = module;\n\n    const exceptionHandler = new ExternalExceptionsHandler();\n    const filters = this.createContext<ExceptionFilterMetadata[]>(\n      instance,\n      callback,\n      EXCEPTION_FILTERS_METADATA,\n      contextId,\n      inquirerId,\n    );\n    if (isEmpty(filters)) {\n      return exceptionHandler;\n    }\n    exceptionHandler.setCustomFilters(filters.reverse());\n    return exceptionHandler;\n  }\n\n  public getGlobalMetadata<T extends any[]>(\n    contextId = STATIC_CONTEXT,\n    inquirerId?: string,\n  ): T {\n    if (!this.config) {\n      return [] as T;\n    }\n    const globalFilters = this.config.getGlobalFilters() as T;\n    if (contextId === STATIC_CONTEXT && !inquirerId) {\n      return globalFilters;\n    }\n    const scopedFilterWrappers =\n      this.config.getGlobalRequestFilters() as InstanceWrapper[];\n    const scopedFilters = iterate(scopedFilterWrappers)\n      .map(wrapper => wrapper.getInstanceByContextId(contextId, inquirerId))\n      .filter(host => !!host)\n      .map(host => host.instance)\n      .toArray();\n\n    return globalFilters.concat(scopedFilters) as T;\n  }\n}\n"]}