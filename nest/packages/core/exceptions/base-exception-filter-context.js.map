{"version":3,"file":"base-exception-filter-context.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/core/","sources":["exceptions/base-exception-filter-context.ts"],"names":[],"mappings":";;;AAAA,wDAAmE;AAGnE,oEAAwE;AACxE,qCAAkC;AAClC,gEAA4D;AAC5D,qDAAuD;AAIvD,MAAa,0BAA2B,SAAQ,gCAAc;IAG5D,YAA6B,SAAwB;QACnD,KAAK,EAAE,CAAC;QADmB,cAAS,GAAT,SAAS,CAAe;IAErD,CAAC;IAEM,qBAAqB,CAC1B,QAAW,EACX,SAAS,GAAG,0BAAc,EAC1B,UAAmB;QAEnB,IAAI,IAAA,sBAAO,EAAC,QAAQ,CAAC,EAAE;YACrB,OAAO,EAAO,CAAC;SAChB;QACD,OAAO,IAAA,iBAAO,EAAC,QAAQ,CAAC;aACrB,MAAM,CACL,QAAQ,CAAC,EAAE,CAAC,QAAQ,IAAI,CAAC,IAAA,yBAAU,EAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,QAAQ,CAAC,IAAI,CAAC,CACtE;aACA,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;aACpE,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;aACtB,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YAChB,IAAI,EAAE,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC;YACnC,kBAAkB,EAAE,IAAI,CAAC,sBAAsB,CAAC,QAAQ,CAAC;SAC1D,CAAC,CAAC;aACF,OAAO,EAAO,CAAC;IACpB,CAAC;IAEM,iBAAiB,CACtB,MAAkC,EAClC,SAAS,GAAG,0BAAc,EAC1B,UAAmB;QAEnB,MAAM,QAAQ,GAAI,MAA0B,CAAC,KAAK,CAAC;QACnD,IAAI,QAAQ,EAAE;YACZ,OAAO,MAAyB,CAAC;SAClC;QACD,MAAM,eAAe,GAAG,IAAI,CAAC,qBAAqB,CAAC,MAAuB,CAAC,CAAC;QAC5E,IAAI,CAAC,eAAe,EAAE;YACpB,OAAO,IAAI,CAAC;SACb;QACD,MAAM,YAAY,GAAG,eAAe,CAAC,sBAAsB,CACzD,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,eAAe,CAAC,EAC7C,UAAU,CACX,CAAC;QACF,OAAO,YAAY,IAAI,YAAY,CAAC,QAAQ,CAAC;IAC/C,CAAC;IAEM,qBAAqB,CAC1B,QAAuB;QAEvB,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;YACvB,OAAO;SACR;QACD,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC;QAC/C,MAAM,SAAS,GAAG,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QACrD,IAAI,CAAC,SAAS,EAAE;YACd,OAAO;SACR;QACD,OAAO,SAAS,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAC7C,CAAC;IAEM,sBAAsB,CAAC,QAAyB;QACrD,MAAM,SAAS,GAAG,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;QAClD,OAAO,CACL,OAAO,CAAC,WAAW,CAAC,mCAAuB,EAAE,SAAS,CAAC,WAAW,CAAC,IAAI,EAAE,CAC1E,CAAC;IACJ,CAAC;CACF;AApED,gEAoEC","sourcesContent":["import { FILTER_CATCH_EXCEPTIONS } from '@nestjs/common/constants';\nimport { Type } from '@nestjs/common/interfaces';\nimport { ExceptionFilter } from '@nestjs/common/interfaces/exceptions/exception-filter.interface';\nimport { isEmpty, isFunction } from '@nestjs/common/utils/shared.utils';\nimport { iterate } from 'iterare';\nimport { ContextCreator } from '../helpers/context-creator';\nimport { STATIC_CONTEXT } from '../injector/constants';\nimport { NestContainer } from '../injector/container';\nimport { InstanceWrapper } from '../injector/instance-wrapper';\n\nexport class BaseExceptionFilterContext extends ContextCreator {\n  protected moduleContext: string;\n\n  constructor(private readonly container: NestContainer) {\n    super();\n  }\n\n  public createConcreteContext<T extends any[], R extends any[]>(\n    metadata: T,\n    contextId = STATIC_CONTEXT,\n    inquirerId?: string,\n  ): R {\n    if (isEmpty(metadata)) {\n      return [] as R;\n    }\n    return iterate(metadata)\n      .filter(\n        instance => instance && (isFunction(instance.catch) || instance.name),\n      )\n      .map(filter => this.getFilterInstance(filter, contextId, inquirerId))\n      .filter(item => !!item)\n      .map(instance => ({\n        func: instance.catch.bind(instance),\n        exceptionMetatypes: this.reflectCatchExceptions(instance),\n      }))\n      .toArray() as R;\n  }\n\n  public getFilterInstance(\n    filter: Function | ExceptionFilter,\n    contextId = STATIC_CONTEXT,\n    inquirerId?: string,\n  ): ExceptionFilter | null {\n    const isObject = (filter as ExceptionFilter).catch;\n    if (isObject) {\n      return filter as ExceptionFilter;\n    }\n    const instanceWrapper = this.getInstanceByMetatype(filter as Type<unknown>);\n    if (!instanceWrapper) {\n      return null;\n    }\n    const instanceHost = instanceWrapper.getInstanceByContextId(\n      this.getContextId(contextId, instanceWrapper),\n      inquirerId,\n    );\n    return instanceHost && instanceHost.instance;\n  }\n\n  public getInstanceByMetatype(\n    metatype: Type<unknown>,\n  ): InstanceWrapper | undefined {\n    if (!this.moduleContext) {\n      return;\n    }\n    const collection = this.container.getModules();\n    const moduleRef = collection.get(this.moduleContext);\n    if (!moduleRef) {\n      return;\n    }\n    return moduleRef.injectables.get(metatype);\n  }\n\n  public reflectCatchExceptions(instance: ExceptionFilter): Type<any>[] {\n    const prototype = Object.getPrototypeOf(instance);\n    return (\n      Reflect.getMetadata(FILTER_CATCH_EXCEPTIONS, prototype.constructor) || []\n    );\n  }\n}\n"]}