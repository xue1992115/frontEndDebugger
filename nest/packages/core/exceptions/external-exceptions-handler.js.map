{"version":3,"file":"external-exceptions-handler.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/core/","sources":["exceptions/external-exceptions-handler.ts"],"names":[],"mappings":";;;AAGA,oEAA4D;AAC5D,gHAA0G;AAC1G,2EAAsE;AAEtE,MAAa,yBAA0B,SAAQ,mDAAuB;IAAtE;;QACU,YAAO,GAA8B,EAAE,CAAC;IAkClD,CAAC;IAhCQ,IAAI,CAAC,SAAsB,EAAE,IAAmB;QACrD,MAAM,MAAM,GAAG,IAAI,CAAC,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;QACzD,IAAI,MAAM,EAAE;YACV,OAAO,MAAM,CAAC;SACf;QACD,OAAO,KAAK,CAAC,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;IACtC,CAAC;IAEM,gBAAgB,CAAC,OAAkC;QACxD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YAC3B,MAAM,IAAI,oEAA+B,EAAE,CAAC;SAC7C;QACD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAEM,mBAAmB,CACxB,SAAY,EACZ,IAAmB;QAEnB,IAAI,IAAA,sBAAO,EAAC,IAAI,CAAC,OAAO,CAAC,EAAE;YACzB,OAAO,IAAI,CAAC;SACb;QACD,MAAM,YAAY,GAAG,CAAC,QAAuB,EAAE,EAAE,CAC/C,SAAS,YAAY,QAAQ,CAAC;QAEhC,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,EAAE,kBAAkB,EAAE,EAAE,EAAE;YAC1D,MAAM,UAAU,GACd,CAAC,kBAAkB,CAAC,MAAM,IAAI,kBAAkB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YACtE,OAAO,UAAU,CAAC;QACpB,CAAC,CAAC,CAAC;QACH,OAAO,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IACtD,CAAC;CACF;AAnCD,8DAmCC","sourcesContent":["import { Type } from '@nestjs/common';\nimport { ExceptionFilterMetadata } from '@nestjs/common/interfaces/exceptions';\nimport { ArgumentsHost } from '@nestjs/common/interfaces/features/arguments-host.interface';\nimport { isEmpty } from '@nestjs/common/utils/shared.utils';\nimport { InvalidExceptionFilterException } from '../errors/exceptions/invalid-exception-filter.exception';\nimport { ExternalExceptionFilter } from './external-exception-filter';\n\nexport class ExternalExceptionsHandler extends ExternalExceptionFilter {\n  private filters: ExceptionFilterMetadata[] = [];\n\n  public next(exception: Error | any, host: ArgumentsHost): Promise<any> {\n    const result = this.invokeCustomFilters(exception, host);\n    if (result) {\n      return result;\n    }\n    return super.catch(exception, host);\n  }\n\n  public setCustomFilters(filters: ExceptionFilterMetadata[]) {\n    if (!Array.isArray(filters)) {\n      throw new InvalidExceptionFilterException();\n    }\n    this.filters = filters;\n  }\n\n  public invokeCustomFilters<T = any>(\n    exception: T,\n    host: ArgumentsHost,\n  ): Promise<any> | null {\n    if (isEmpty(this.filters)) {\n      return null;\n    }\n    const isInstanceOf = (metatype: Type<unknown>) =>\n      exception instanceof metatype;\n\n    const filter = this.filters.find(({ exceptionMetatypes }) => {\n      const typeExists =\n        !exceptionMetatypes.length || exceptionMetatypes.some(isInstanceOf);\n      return typeExists;\n    });\n    return filter ? filter.func(exception, host) : null;\n  }\n}\n"]}