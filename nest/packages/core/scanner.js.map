{"version":3,"file":"scanner.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/core/","sources":["scanner.ts"],"names":[],"mappings":"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","sourcesContent":["import { DynamicModule, ForwardReference, Provider } from '@nestjs/common';\nimport {\n  CATCH_WATERMARK,\n  CONTROLLER_WATERMARK,\n  EnhancerSubtype,\n  ENHANCER_KEY_TO_SUBTYPE_MAP,\n  EXCEPTION_FILTERS_METADATA,\n  GUARDS_METADATA,\n  INJECTABLE_WATERMARK,\n  INTERCEPTORS_METADATA,\n  MODULE_METADATA,\n  PIPES_METADATA,\n  ROUTE_ARGS_METADATA,\n} from '@nestjs/common/constants';\nimport {\n  CanActivate,\n  ClassProvider,\n  Controller,\n  ExceptionFilter,\n  ExistingProvider,\n  FactoryProvider,\n  Injectable,\n  InjectionToken,\n  NestInterceptor,\n  PipeTransform,\n  Scope,\n  Type,\n  ValueProvider,\n} from '@nestjs/common/interfaces';\nimport {\n  isFunction,\n  isNil,\n  isUndefined,\n} from '@nestjs/common/utils/shared.utils';\nimport { iterate } from 'iterare';\nimport { ApplicationConfig } from './application-config';\nimport {\n  APP_FILTER,\n  APP_GUARD,\n  APP_INTERCEPTOR,\n  APP_PIPE,\n  ENHANCER_TOKEN_TO_SUBTYPE_MAP,\n} from './constants';\nimport { CircularDependencyException } from './errors/exceptions/circular-dependency.exception';\nimport { InvalidClassModuleException } from './errors/exceptions/invalid-class-module.exception';\nimport { InvalidModuleException } from './errors/exceptions/invalid-module.exception';\nimport { UndefinedModuleException } from './errors/exceptions/undefined-module.exception';\nimport { getClassScope } from './helpers/get-class-scope';\nimport { NestContainer } from './injector/container';\nimport { InstanceWrapper } from './injector/instance-wrapper';\nimport { InternalCoreModuleFactory } from './injector/internal-core-module/internal-core-module-factory';\nimport { Module } from './injector/module';\nimport { GraphInspector } from './inspector/graph-inspector';\nimport { UuidFactory } from './inspector/uuid-factory';\nimport { MetadataScanner } from './metadata-scanner';\n\ninterface ApplicationProviderWrapper {\n  moduleKey: string;\n  providerKey: string;\n  type: InjectionToken;\n  scope?: Scope;\n}\n\nexport class DependenciesScanner {\n  private readonly applicationProvidersApplyMap: ApplicationProviderWrapper[] =\n    [];\n\n  constructor(\n    private readonly container: NestContainer,\n    private readonly metadataScanner: MetadataScanner,\n    private readonly graphInspector: GraphInspector,\n    private readonly applicationConfig = new ApplicationConfig(),\n  ) {}\n\n  public async scan(module: Type<any>) {\n    await this.registerCoreModule();\n    await this.scanForModules(module);\n    await this.scanModulesForDependencies();\n    this.calculateModulesDistance();\n\n    this.addScopedEnhancersMetadata();\n    this.container.bindGlobalScope();\n  }\n\n  public async scanForModules(\n    moduleDefinition:\n      | ForwardReference\n      | Type<unknown>\n      | DynamicModule\n      | Promise<DynamicModule>,\n    scope: Type<unknown>[] = [],\n    ctxRegistry: (ForwardReference | DynamicModule | Type<unknown>)[] = [],\n  ): Promise<Module[]> {\n    const moduleInstance = await this.insertModule(moduleDefinition, scope);\n    moduleDefinition =\n      moduleDefinition instanceof Promise\n        ? await moduleDefinition\n        : moduleDefinition;\n    ctxRegistry.push(moduleDefinition);\n\n    if (this.isForwardReference(moduleDefinition)) {\n      moduleDefinition = (moduleDefinition as ForwardReference).forwardRef();\n    }\n    const modules = !this.isDynamicModule(\n      moduleDefinition as Type<any> | DynamicModule,\n    )\n      ? this.reflectMetadata(\n          MODULE_METADATA.IMPORTS,\n          moduleDefinition as Type<any>,\n        )\n      : [\n          ...this.reflectMetadata(\n            MODULE_METADATA.IMPORTS,\n            (moduleDefinition as DynamicModule).module,\n          ),\n          ...((moduleDefinition as DynamicModule).imports || []),\n        ];\n\n    let registeredModuleRefs = [];\n    for (const [index, innerModule] of modules.entries()) {\n      // In case of a circular dependency (ES module system), JavaScript will resolve the type to `undefined`.\n      if (innerModule === undefined) {\n        throw new UndefinedModuleException(moduleDefinition, index, scope);\n      }\n      if (!innerModule) {\n        throw new InvalidModuleException(moduleDefinition, index, scope);\n      }\n      if (ctxRegistry.includes(innerModule)) {\n        continue;\n      }\n      const moduleRefs = await this.scanForModules(\n        innerModule,\n        [].concat(scope, moduleDefinition),\n        ctxRegistry,\n      );\n      registeredModuleRefs = registeredModuleRefs.concat(moduleRefs);\n    }\n    if (!moduleInstance) {\n      return registeredModuleRefs;\n    }\n    return [moduleInstance].concat(registeredModuleRefs);\n  }\n\n  public async insertModule(\n    moduleDefinition: any,\n    scope: Type<unknown>[],\n  ): Promise<Module | undefined> {\n    const moduleToAdd = this.isForwardReference(moduleDefinition)\n      ? moduleDefinition.forwardRef()\n      : moduleDefinition;\n\n    if (\n      this.isInjectable(moduleToAdd) ||\n      this.isController(moduleToAdd) ||\n      this.isExceptionFilter(moduleToAdd)\n    ) {\n      throw new InvalidClassModuleException(moduleDefinition, scope);\n    }\n\n    return this.container.addModule(moduleToAdd, scope);\n  }\n\n  public async scanModulesForDependencies(\n    modules: Map<string, Module> = this.container.getModules(),\n  ) {\n    for (const [token, { metatype }] of modules) {\n      await this.reflectImports(metatype, token, metatype.name);\n      this.reflectProviders(metatype, token);\n      this.reflectControllers(metatype, token);\n      this.reflectExports(metatype, token);\n    }\n  }\n\n  public async reflectImports(\n    module: Type<unknown>,\n    token: string,\n    context: string,\n  ) {\n    const modules = [\n      ...this.reflectMetadata(MODULE_METADATA.IMPORTS, module),\n      ...this.container.getDynamicMetadataByToken(\n        token,\n        MODULE_METADATA.IMPORTS as 'imports',\n      ),\n    ];\n    for (const related of modules) {\n      await this.insertImport(related, token, context);\n    }\n  }\n\n  public reflectProviders(module: Type<any>, token: string) {\n    const providers = [\n      ...this.reflectMetadata(MODULE_METADATA.PROVIDERS, module),\n      ...this.container.getDynamicMetadataByToken(\n        token,\n        MODULE_METADATA.PROVIDERS as 'providers',\n      ),\n    ];\n    providers.forEach(provider => {\n      this.insertProvider(provider, token);\n      this.reflectDynamicMetadata(provider, token);\n    });\n  }\n\n  public reflectControllers(module: Type<any>, token: string) {\n    const controllers = [\n      ...this.reflectMetadata(MODULE_METADATA.CONTROLLERS, module),\n      ...this.container.getDynamicMetadataByToken(\n        token,\n        MODULE_METADATA.CONTROLLERS as 'controllers',\n      ),\n    ];\n    controllers.forEach(item => {\n      this.insertController(item, token);\n      this.reflectDynamicMetadata(item, token);\n    });\n  }\n\n  public reflectDynamicMetadata(cls: Type<Injectable>, token: string) {\n    if (!cls || !cls.prototype) {\n      return;\n    }\n    this.reflectInjectables(cls, token, GUARDS_METADATA);\n    this.reflectInjectables(cls, token, INTERCEPTORS_METADATA);\n    this.reflectInjectables(cls, token, EXCEPTION_FILTERS_METADATA);\n    this.reflectInjectables(cls, token, PIPES_METADATA);\n    this.reflectParamInjectables(cls, token, ROUTE_ARGS_METADATA);\n  }\n\n  public reflectExports(module: Type<unknown>, token: string) {\n    const exports = [\n      ...this.reflectMetadata(MODULE_METADATA.EXPORTS, module),\n      ...this.container.getDynamicMetadataByToken(\n        token,\n        MODULE_METADATA.EXPORTS as 'exports',\n      ),\n    ];\n    exports.forEach(exportedProvider =>\n      this.insertExportedProvider(exportedProvider, token),\n    );\n  }\n\n  public reflectInjectables(\n    component: Type<Injectable>,\n    token: string,\n    metadataKey: string,\n  ) {\n    const controllerInjectables = this.reflectMetadata<Type<Injectable>>(\n      metadataKey,\n      component,\n    );\n    const methodInjectables = this.metadataScanner\n      .getAllMethodNames(component.prototype)\n      .reduce((acc, method) => {\n        const methodInjectable = this.reflectKeyMetadata(\n          component,\n          metadataKey,\n          method,\n        );\n\n        if (methodInjectable) {\n          acc.push(methodInjectable);\n        }\n\n        return acc;\n      }, []);\n\n    controllerInjectables.forEach(injectable =>\n      this.insertInjectable(\n        injectable,\n        token,\n        component,\n        ENHANCER_KEY_TO_SUBTYPE_MAP[metadataKey],\n      ),\n    );\n    methodInjectables.forEach(methodInjectable => {\n      methodInjectable.metadata.forEach(injectable =>\n        this.insertInjectable(\n          injectable,\n          token,\n          component,\n          ENHANCER_KEY_TO_SUBTYPE_MAP[metadataKey],\n          methodInjectable.methodKey,\n        ),\n      );\n    });\n  }\n\n  public reflectParamInjectables(\n    component: Type<Injectable>,\n    token: string,\n    metadataKey: string,\n  ) {\n    const paramsMethods = this.metadataScanner.getAllMethodNames(\n      component.prototype,\n    );\n\n    paramsMethods.forEach(methodKey => {\n      const metadata: Record<\n        string,\n        {\n          index: number;\n          data: unknown;\n          pipes: Array<Type<PipeTransform> | PipeTransform>;\n        }\n      > = Reflect.getMetadata(metadataKey, component, methodKey);\n\n      if (!metadata) {\n        return;\n      }\n\n      const params = Object.values(metadata);\n      params\n        .map(item => item.pipes)\n        .flat(1)\n        .forEach(injectable =>\n          this.insertInjectable(\n            injectable,\n            token,\n            component,\n            'pipe',\n            methodKey,\n          ),\n        );\n    });\n  }\n\n  public reflectKeyMetadata(\n    component: Type<Injectable>,\n    key: string,\n    methodKey: string,\n  ): { methodKey: string; metadata: any } | undefined {\n    let prototype = component.prototype;\n    do {\n      const descriptor = Reflect.getOwnPropertyDescriptor(prototype, methodKey);\n      if (!descriptor) {\n        continue;\n      }\n      const metadata = Reflect.getMetadata(key, descriptor.value);\n      if (!metadata) {\n        return;\n      }\n      return { methodKey, metadata };\n    } while (\n      (prototype = Reflect.getPrototypeOf(prototype)) &&\n      prototype !== Object.prototype &&\n      prototype\n    );\n    return undefined;\n  }\n\n  public calculateModulesDistance() {\n    const modulesGenerator = this.container.getModules().values();\n\n    // Skip \"InternalCoreModule\" from calculating distance\n    modulesGenerator.next();\n\n    const modulesStack = [];\n    const calculateDistance = (moduleRef: Module, distance = 1) => {\n      if (!moduleRef || modulesStack.includes(moduleRef)) {\n        return;\n      }\n      modulesStack.push(moduleRef);\n\n      const moduleImports = moduleRef.imports;\n      moduleImports.forEach(importedModuleRef => {\n        if (importedModuleRef) {\n          importedModuleRef.distance = distance;\n          calculateDistance(importedModuleRef, distance + 1);\n        }\n      });\n    };\n\n    const rootModule = modulesGenerator.next().value as Module;\n    calculateDistance(rootModule);\n  }\n\n  public async insertImport(related: any, token: string, context: string) {\n    if (isUndefined(related)) {\n      throw new CircularDependencyException(context);\n    }\n    if (this.isForwardReference(related)) {\n      return this.container.addImport(related.forwardRef(), token);\n    }\n    await this.container.addImport(related, token);\n  }\n\n  public isCustomProvider(\n    provider: Provider,\n  ): provider is\n    | ClassProvider\n    | ValueProvider\n    | FactoryProvider\n    | ExistingProvider {\n    return provider && !isNil((provider as any).provide);\n  }\n\n  public insertProvider(provider: Provider, token: string) {\n    const isCustomProvider = this.isCustomProvider(provider);\n    if (!isCustomProvider) {\n      return this.container.addProvider(provider as Type<any>, token);\n    }\n    const applyProvidersMap = this.getApplyProvidersMap();\n    const providersKeys = Object.keys(applyProvidersMap);\n    const type = (\n      provider as\n        | ClassProvider\n        | ValueProvider\n        | FactoryProvider\n        | ExistingProvider\n    ).provide;\n\n    if (!providersKeys.includes(type as string)) {\n      return this.container.addProvider(provider as any, token);\n    }\n    const uuid = UuidFactory.get(type.toString());\n    const providerToken = `${type as string} (UUID: ${uuid})`;\n\n    let scope = (provider as ClassProvider | FactoryProvider).scope;\n    if (isNil(scope) && (provider as ClassProvider).useClass) {\n      scope = getClassScope((provider as ClassProvider).useClass);\n    }\n    this.applicationProvidersApplyMap.push({\n      type,\n      moduleKey: token,\n      providerKey: providerToken,\n      scope,\n    });\n\n    const newProvider = {\n      ...provider,\n      provide: providerToken,\n      scope,\n    } as Provider;\n\n    const enhancerSubtype =\n      ENHANCER_TOKEN_TO_SUBTYPE_MAP[\n        type as\n          | typeof APP_GUARD\n          | typeof APP_PIPE\n          | typeof APP_FILTER\n          | typeof APP_INTERCEPTOR\n      ];\n    const factoryOrClassProvider = newProvider as\n      | FactoryProvider\n      | ClassProvider;\n    if (this.isRequestOrTransient(factoryOrClassProvider.scope)) {\n      return this.container.addInjectable(newProvider, token, enhancerSubtype);\n    }\n    this.container.addProvider(newProvider, token, enhancerSubtype);\n  }\n\n  public insertInjectable(\n    injectable: Type<Injectable> | object,\n    token: string,\n    host: Type<Injectable>,\n    subtype: EnhancerSubtype,\n    methodKey?: string,\n  ) {\n    if (isFunction(injectable)) {\n      const instanceWrapper = this.container.addInjectable(\n        injectable as Type,\n        token,\n        subtype,\n        host,\n      ) as InstanceWrapper;\n\n      this.graphInspector.insertEnhancerMetadataCache({\n        moduleToken: token,\n        classRef: host,\n        enhancerInstanceWrapper: instanceWrapper,\n        targetNodeId: instanceWrapper.id,\n        subtype,\n        methodKey,\n      });\n      return instanceWrapper;\n    } else {\n      this.graphInspector.insertEnhancerMetadataCache({\n        moduleToken: token,\n        classRef: host,\n        enhancerRef: injectable,\n        methodKey,\n        subtype,\n      });\n    }\n  }\n\n  public insertExportedProvider(\n    exportedProvider: Type<Injectable>,\n    token: string,\n  ) {\n    this.container.addExportedProvider(exportedProvider, token);\n  }\n\n  public insertController(controller: Type<Controller>, token: string) {\n    this.container.addController(controller, token);\n  }\n\n  public reflectMetadata<T = any>(\n    metadataKey: string,\n    metatype: Type<any>,\n  ): T[] {\n    return Reflect.getMetadata(metadataKey, metatype) || [];\n  }\n\n  public async registerCoreModule() {\n    const moduleDefinition = InternalCoreModuleFactory.create(\n      this.container,\n      this,\n      this.container.getModuleCompiler(),\n      this.container.getHttpAdapterHostRef(),\n      this.graphInspector,\n    );\n    const [instance] = await this.scanForModules(moduleDefinition);\n    this.container.registerCoreModuleRef(instance);\n  }\n\n  /**\n   * Add either request or transient globally scoped enhancers\n   * to all controllers metadata storage\n   */\n  public addScopedEnhancersMetadata() {\n    iterate(this.applicationProvidersApplyMap)\n      .filter(wrapper => this.isRequestOrTransient(wrapper.scope))\n      .forEach(({ moduleKey, providerKey }) => {\n        const modulesContainer = this.container.getModules();\n        const { injectables } = modulesContainer.get(moduleKey);\n        const instanceWrapper = injectables.get(providerKey);\n\n        const iterableIterator = modulesContainer.values();\n        iterate(iterableIterator)\n          .map(moduleRef =>\n            Array.from<InstanceWrapper>(moduleRef.controllers.values()).concat(\n              moduleRef.entryProviders,\n            ),\n          )\n          .flatten()\n          .forEach(controllerOrEntryProvider =>\n            controllerOrEntryProvider.addEnhancerMetadata(instanceWrapper),\n          );\n      });\n  }\n\n  public applyApplicationProviders() {\n    const applyProvidersMap = this.getApplyProvidersMap();\n    const applyRequestProvidersMap = this.getApplyRequestProvidersMap();\n\n    const getInstanceWrapper = (\n      moduleKey: string,\n      providerKey: string,\n      collectionKey: 'providers' | 'injectables',\n    ) => {\n      const modules = this.container.getModules();\n      const collection = modules.get(moduleKey)[collectionKey];\n      return collection.get(providerKey);\n    };\n\n    // Add global enhancers to the application config\n    this.applicationProvidersApplyMap.forEach(\n      ({ moduleKey, providerKey, type, scope }) => {\n        let instanceWrapper: InstanceWrapper;\n        if (this.isRequestOrTransient(scope)) {\n          instanceWrapper = getInstanceWrapper(\n            moduleKey,\n            providerKey,\n            'injectables',\n          );\n\n          this.graphInspector.insertAttachedEnhancer(instanceWrapper);\n          return applyRequestProvidersMap[type as string](instanceWrapper);\n        }\n        instanceWrapper = getInstanceWrapper(\n          moduleKey,\n          providerKey,\n          'providers',\n        );\n        this.graphInspector.insertAttachedEnhancer(instanceWrapper);\n        applyProvidersMap[type as string](instanceWrapper.instance);\n      },\n    );\n  }\n\n  public getApplyProvidersMap(): { [type: string]: Function } {\n    return {\n      [APP_INTERCEPTOR]: (interceptor: NestInterceptor) =>\n        this.applicationConfig.addGlobalInterceptor(interceptor),\n      [APP_PIPE]: (pipe: PipeTransform) =>\n        this.applicationConfig.addGlobalPipe(pipe),\n      [APP_GUARD]: (guard: CanActivate) =>\n        this.applicationConfig.addGlobalGuard(guard),\n      [APP_FILTER]: (filter: ExceptionFilter) =>\n        this.applicationConfig.addGlobalFilter(filter),\n    };\n  }\n\n  public getApplyRequestProvidersMap(): { [type: string]: Function } {\n    return {\n      [APP_INTERCEPTOR]: (interceptor: InstanceWrapper<NestInterceptor>) =>\n        this.applicationConfig.addGlobalRequestInterceptor(interceptor),\n      [APP_PIPE]: (pipe: InstanceWrapper<PipeTransform>) =>\n        this.applicationConfig.addGlobalRequestPipe(pipe),\n      [APP_GUARD]: (guard: InstanceWrapper<CanActivate>) =>\n        this.applicationConfig.addGlobalRequestGuard(guard),\n      [APP_FILTER]: (filter: InstanceWrapper<ExceptionFilter>) =>\n        this.applicationConfig.addGlobalRequestFilter(filter),\n    };\n  }\n\n  public isDynamicModule(\n    module: Type<any> | DynamicModule,\n  ): module is DynamicModule {\n    return module && !!(module as DynamicModule).module;\n  }\n\n  /**\n   * @param metatype\n   * @returns `true` if `metatype` is annotated with the `@Injectable()` decorator.\n   */\n  private isInjectable(metatype: Type<any>): boolean {\n    return !!Reflect.getMetadata(INJECTABLE_WATERMARK, metatype);\n  }\n\n  /**\n   * @param metatype\n   * @returns `true` if `metatype` is annotated with the `@Controller()` decorator.\n   */\n  private isController(metatype: Type<any>): boolean {\n    return !!Reflect.getMetadata(CONTROLLER_WATERMARK, metatype);\n  }\n\n  /**\n   * @param metatype\n   * @returns `true` if `metatype` is annotated with the `@Catch()` decorator.\n   */\n  private isExceptionFilter(metatype: Type<any>): boolean {\n    return !!Reflect.getMetadata(CATCH_WATERMARK, metatype);\n  }\n\n  private isForwardReference(\n    module: Type<any> | DynamicModule | ForwardReference,\n  ): module is ForwardReference {\n    return module && !!(module as ForwardReference).forwardRef;\n  }\n\n  private isRequestOrTransient(scope: Scope): boolean {\n    return scope === Scope.REQUEST || scope === Scope.TRANSIENT;\n  }\n}\n"]}