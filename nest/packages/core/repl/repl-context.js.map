{"version":3,"file":"repl-context.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/core/","sources":["repl/repl-context.ts"],"names":[],"mappings":";;;AAAA,2CAIwB;AACxB,8DAA0D;AAC1D,0CAAuD;AACvD,gGAA2F;AAE3F,yDAO4B;AAY5B,MAAa,WAAW;IAUtB,YACkB,GAA4B,EAC5C,wBAA8C;QAD9B,QAAG,GAAH,GAAG,CAAyB;QAV9B,WAAM,GAAG,IAAI,eAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAC/C,kBAAa,GAAwC,EAAE,CAAC;QAC/C,gBAAW,GAAc,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC7C,oBAAe,GAAG,IAAI,GAAG,EAGtC,CAAC;QAOF,IAAI,CAAC,SAAS,GAAI,GAAW,CAAC,SAAS,CAAC,CAAC,qDAAqD;QAE9F,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACzB,IAAI,CAAC,yBAAyB,CAAC,wBAAwB,IAAI,EAAE,CAAC,CAAC;IACjE,CAAC;IAEM,aAAa,CAAC,IAAY;QAC/B,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;IAEO,iBAAiB;QACvB,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC;QAE5C,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;YAC1B,IAAI,UAAU,GAAG,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC;YACzC,IAAI,UAAU,KAAK,yCAAkB,CAAC,IAAI,EAAE;gBAC1C,OAAO;aACR;YACD,IAAI,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,EAAE;gBAChC,UAAU,IAAI,KAAK,SAAS,CAAC,KAAK,GAAG,CAAC;aACvC;YAED,IAAI,CAAC,oBAAoB,CAAC,SAAS,EAAE,UAAU,EAAE,WAAW,CAAC,CAAC;YAC9D,IAAI,CAAC,oBAAoB,CAAC,SAAS,EAAE,UAAU,EAAE,aAAa,CAAC,CAAC;YAEhE,0CAA0C;YAC1C,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,WAAW,EAAE,UAAU,EAAE;gBAClD,KAAK,EAAE,SAAS,CAAC,QAAQ;gBACzB,YAAY,EAAE,KAAK;gBACnB,UAAU,EAAE,IAAI;aACjB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,oBAAoB,CAC1B,SAAiB,EACjB,SAAoB,EACpB,UAAkC;;QAElC,MAAM,gBAAgB,GAAG,EAAE,CAAC;QAC5B,SAAS,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE;YAC1C,MAAM,gBAAgB,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;YACpD,IACE,gBAAgB,KAAK,sCAAiB,CAAC,IAAI;gBAC3C,gBAAgB,KAAK,SAAS,CAAC,QAAQ,CAAC,IAAI,EAC5C;gBACA,OAAO;aACR;YAED,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,EAAE;gBACvC,0CAA0C;gBAC1C,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,WAAW,EAAE,gBAAgB,EAAE;oBACxD,KAAK,EAAE,KAAK;oBACZ,YAAY,EAAE,KAAK;oBACnB,UAAU,EAAE,IAAI;iBACjB,CAAC,CAAC;aACJ;YAED,IAAI,gBAAgB,KAAK,oBAAS,CAAC,IAAI,EAAE;gBACvC,OAAO;aACR;YAED,gBAAgB,CAAC,gBAAgB,CAAC,GAAG,KAAK,CAAC;QAC7C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,mCACxB,MAAA,IAAI,CAAC,aAAa,0CAAG,SAAS,CAAC,KAClC,CAAC,UAAU,CAAC,EAAE,gBAAgB,GAC/B,CAAC;IACJ,CAAC;IAEO,cAAc,CAAC,KAAc;QACnC,OAAO,OAAO,KAAK,KAAK,QAAQ;YAC9B,CAAC,CAAC,OAAO,KAAK,KAAK,UAAU;gBAC3B,CAAC,CAAC,KAAK,CAAC,IAAI;gBACZ,CAAC,CAAC,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,QAAQ,EAAE;YACrB,CAAC,CAAC,IAAI,KAAK,GAAG,CAAC;IACnB,CAAC;IAEO,iBAAiB,CACvB,iBAAoC;;QAEpC,MAAM,cAAc,GAAG,IAAI,iBAAiB,CAAC,IAAI,CAAC,CAAC;QACnD,MAAM,eAAe,GAAG,CAAC,cAAc,CAAC,CAAC;QAEzC,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,cAAc,CAAC,YAAY,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;QAE3E,MAAA,cAAc,CAAC,YAAY,CAAC,OAAO,0CAAE,OAAO,CAAC,SAAS,CAAC,EAAE;YACvD,MAAM,mBAAmB,GACvB,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;YAChC,mBAAmB,CAAC,YAAY,GAAG;gBACjC,IAAI,EAAE,SAAS;gBACf,WAAW,EAAE,mBAAmB,CAAC,YAAY,CAAC,WAAW;gBACzD,SAAS,EAAE,mBAAmB,CAAC,YAAY,CAAC,SAAS;aACtD,CAAC;YACF,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,SAAS,EAAE,mBAAmB,CAAC,CAAC;YACzD,eAAe,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,OAAO,eAAe,CAAC;IACzB,CAAC;IAEO,+BAA+B,CACrC,cAA+C;QAE/C,qCAAqC;QACrC,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,YAAY,CAAC,IAAI,CAAC;YAChD,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAE7C,oEAAoE;QACpE,MAAM,gBAAgB,GACpB,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QACrD,MAAM,CAAC,cAAc,CAAC,gBAAgB,EAAE,MAAM,EAAE;YAC9C,UAAU,EAAE,KAAK;YACjB,YAAY,EAAE,KAAK;YACnB,GAAG,EAAE,GAAG,EAAE;YACR,oEAAoE;YACpE,iBAAiB;YACjB,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,eAAe,EAAE,CAAC;SACvD,CAAC,CAAC;IACL,CAAC;IAEO,yBAAyB,CAC/B,wBAA6C;QAE7C,MAAM,yBAAyB,GAAwB;YACrD,6BAAU;YACV,4BAAS;YACT,gCAAa;YACb,+BAAY;YACZ,8BAAW;YACX,gCAAa;SACd,CAAC;QAEF,yBAAyB;aACtB,MAAM,CAAC,wBAAwB,CAAC;aAChC,OAAO,CAAC,cAAc,CAAC,EAAE;YACxB,MAAM,eAAe,GAAG,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAC;YAC/D,eAAe,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE;gBACvC,IAAI,CAAC,+BAA+B,CAAC,cAAc,CAAC,CAAC;YACvD,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;CACF;AA7JD,kCA6JC","sourcesContent":["import {\n  INestApplicationContext,\n  InjectionToken,\n  Logger,\n} from '@nestjs/common';\nimport { ApplicationConfig } from '../application-config';\nimport { ModuleRef, NestContainer } from '../injector';\nimport { InternalCoreModule } from '../injector/internal-core-module/internal-core-module';\nimport { Module } from '../injector/module';\nimport {\n  DebugReplFn,\n  GetReplFn,\n  HelpReplFn,\n  MethodsReplFn,\n  ResolveReplFn,\n  SelectReplFn,\n} from './native-functions';\nimport { ReplFunction } from './repl-function';\nimport type { ReplFunctionClass } from './repl.interfaces';\n\ntype ModuleKey = string;\nexport type ModuleDebugEntry = {\n  controllers: Record<string, InjectionToken>;\n  providers: Record<string, InjectionToken>;\n};\n\ntype ReplScope = Record<string, any>;\n\nexport class ReplContext {\n  public readonly logger = new Logger(ReplContext.name);\n  public debugRegistry: Record<ModuleKey, ModuleDebugEntry> = {};\n  public readonly globalScope: ReplScope = Object.create(null);\n  public readonly nativeFunctions = new Map<\n    string,\n    InstanceType<ReplFunctionClass>\n  >();\n  private readonly container: NestContainer;\n\n  constructor(\n    public readonly app: INestApplicationContext,\n    nativeFunctionsClassRefs?: ReplFunctionClass[],\n  ) {\n    this.container = (app as any).container; // Using `any` because `app.container` is not public.\n\n    this.initializeContext();\n    this.initializeNativeFunctions(nativeFunctionsClassRefs || []);\n  }\n\n  public writeToStdout(text: string) {\n    process.stdout.write(text);\n  }\n\n  private initializeContext() {\n    const modules = this.container.getModules();\n\n    modules.forEach(moduleRef => {\n      let moduleName = moduleRef.metatype.name;\n      if (moduleName === InternalCoreModule.name) {\n        return;\n      }\n      if (this.globalScope[moduleName]) {\n        moduleName += ` (${moduleRef.token})`;\n      }\n\n      this.introspectCollection(moduleRef, moduleName, 'providers');\n      this.introspectCollection(moduleRef, moduleName, 'controllers');\n\n      // For in REPL auto-complete functionality\n      Object.defineProperty(this.globalScope, moduleName, {\n        value: moduleRef.metatype,\n        configurable: false,\n        enumerable: true,\n      });\n    });\n  }\n\n  private introspectCollection(\n    moduleRef: Module,\n    moduleKey: ModuleKey,\n    collection: keyof ModuleDebugEntry,\n  ) {\n    const moduleDebugEntry = {};\n    moduleRef[collection].forEach(({ token }) => {\n      const stringifiedToken = this.stringifyToken(token);\n      if (\n        stringifiedToken === ApplicationConfig.name ||\n        stringifiedToken === moduleRef.metatype.name\n      ) {\n        return;\n      }\n\n      if (!this.globalScope[stringifiedToken]) {\n        // For in REPL auto-complete functionality\n        Object.defineProperty(this.globalScope, stringifiedToken, {\n          value: token,\n          configurable: false,\n          enumerable: true,\n        });\n      }\n\n      if (stringifiedToken === ModuleRef.name) {\n        return;\n      }\n\n      moduleDebugEntry[stringifiedToken] = token;\n    });\n\n    this.debugRegistry[moduleKey] = {\n      ...this.debugRegistry?.[moduleKey],\n      [collection]: moduleDebugEntry,\n    };\n  }\n\n  private stringifyToken(token: unknown): string {\n    return typeof token !== 'string'\n      ? typeof token === 'function'\n        ? token.name\n        : token?.toString()\n      : `\"${token}\"`;\n  }\n\n  private addNativeFunction(\n    NativeFunctionRef: ReplFunctionClass,\n  ): InstanceType<ReplFunctionClass>[] {\n    const nativeFunction = new NativeFunctionRef(this);\n    const nativeFunctions = [nativeFunction];\n\n    this.nativeFunctions.set(nativeFunction.fnDefinition.name, nativeFunction);\n\n    nativeFunction.fnDefinition.aliases?.forEach(aliasName => {\n      const aliasNativeFunction: InstanceType<ReplFunctionClass> =\n        Object.create(nativeFunction);\n      aliasNativeFunction.fnDefinition = {\n        name: aliasName,\n        description: aliasNativeFunction.fnDefinition.description,\n        signature: aliasNativeFunction.fnDefinition.signature,\n      };\n      this.nativeFunctions.set(aliasName, aliasNativeFunction);\n      nativeFunctions.push(aliasNativeFunction);\n    });\n\n    return nativeFunctions;\n  }\n\n  private registerFunctionIntoGlobalScope(\n    nativeFunction: InstanceType<ReplFunctionClass>,\n  ) {\n    // Bind the method to REPL's context:\n    this.globalScope[nativeFunction.fnDefinition.name] =\n      nativeFunction.action.bind(nativeFunction);\n\n    // Load the help trigger as a `help` getter on each native function:\n    const functionBoundRef: ReplFunction['action'] =\n      this.globalScope[nativeFunction.fnDefinition.name];\n    Object.defineProperty(functionBoundRef, 'help', {\n      enumerable: false,\n      configurable: false,\n      get: () =>\n        // Dynamically builds the help message as will unlikely to be called\n        // several times.\n        this.writeToStdout(nativeFunction.makeHelpMessage()),\n    });\n  }\n\n  private initializeNativeFunctions(\n    nativeFunctionsClassRefs: ReplFunctionClass[],\n  ): void {\n    const builtInFunctionsClassRefs: ReplFunctionClass[] = [\n      HelpReplFn,\n      GetReplFn,\n      ResolveReplFn,\n      SelectReplFn,\n      DebugReplFn,\n      MethodsReplFn,\n    ];\n\n    builtInFunctionsClassRefs\n      .concat(nativeFunctionsClassRefs)\n      .forEach(NativeFunction => {\n        const nativeFunctions = this.addNativeFunction(NativeFunction);\n        nativeFunctions.forEach(nativeFunction => {\n          this.registerFunctionIntoGlobalScope(nativeFunction);\n        });\n      });\n  }\n}\n"]}