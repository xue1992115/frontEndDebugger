{"version":3,"file":"methods-repl-fn.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/core/","sources":["repl/native-functions/methods-repl-fn.ts"],"names":[],"mappings":";;;AACA,0EAA2D;AAC3D,6DAAyD;AACzD,oDAAgD;AAGhD,MAAa,aAAc,SAAQ,4BAAY;IAA/C;;QACS,iBAAY,GAAqB;YACtC,IAAI,EAAE,SAAS;YACf,WAAW,EACT,yEAAyE;YAC3E,SAAS,EAAE,oCAAoC;SAChD,CAAC;QAEe,oBAAe,GAAG,IAAI,kCAAe,EAAE,CAAC;IAiB3D,CAAC;IAfC,MAAM,CAAC,KAA6B;QAClC,MAAM,KAAK,GACT,OAAO,KAAK,KAAK,UAAU;YACzB,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YAChD,CAAC,CAAC,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,SAAS,CAAC;QAEvB,MAAM,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;QAE9D,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAC7B,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,GAAG,qBAAG,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QACrD,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,CAC3B,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,IAAI,qBAAG,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,UAAU,IAAI,CAAC,CAC9D,CAAC;QACF,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC;CACF;AAzBD,sCAyBC","sourcesContent":["import type { Type } from '@nestjs/common';\nimport { clc } from '@nestjs/common/utils/cli-colors.util';\nimport { MetadataScanner } from '../../metadata-scanner';\nimport { ReplFunction } from '../repl-function';\nimport type { ReplFnDefinition } from '../repl.interfaces';\n\nexport class MethodsReplFn extends ReplFunction {\n  public fnDefinition: ReplFnDefinition = {\n    name: 'methods',\n    description:\n      'Display all public methods available on a given provider or controller.',\n    signature: '(token: ClassRef | string) => void',\n  };\n\n  private readonly metadataScanner = new MetadataScanner();\n\n  action(token: Type<unknown> | string): void {\n    const proto =\n      typeof token !== 'function'\n        ? Object.getPrototypeOf(this.ctx.app.get(token))\n        : token?.prototype;\n\n    const methods = this.metadataScanner.getAllMethodNames(proto);\n\n    this.ctx.writeToStdout('\\n');\n    this.ctx.writeToStdout(`${clc.green('Methods')}:\\n`);\n    methods.forEach(methodName =>\n      this.ctx.writeToStdout(` ${clc.yellow('â—»')} ${methodName}\\n`),\n    );\n    this.ctx.writeToStdout('\\n');\n  }\n}\n"]}