{"version":3,"file":"repl-native-commands.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/core/","sources":["repl/repl-native-commands.ts"],"names":[],"mappings":";;;AAEA;;;;;GAKG;AACH,SAAS,eAAe,CAAC,UAAsB;IAC7C,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC;SAC7B,IAAI,EAAE;SACN,OAAO,CAAC,IAAI,CAAC,EAAE;QACd,MAAM,GAAG,GAAG,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACtC,IAAI,GAAG,EAAE;YACP,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,IAAI,KAAK,GAAG,CAAC,IAAI,IAAI,EAAE,IAAI,CAAC,CAAC;SACzD;IACH,CAAC,CAAC,CAAC;AACP,CAAC;AAED,SAAgB,2BAA2B,CAAC,UAAsB;IAChE,UAAU,CAAC,aAAa,CAAC,MAAM,EAAE;QAC/B,IAAI,EAAE,mBAAmB;QACzB,MAAM,CAAC,IAAa;YAClB,IAAI,CAAC,oBAAoB,EAAE,CAAC;YAE5B,IAAI,IAAI,EAAE;gBACR,uEAAuE;gBACvE,MAAM,uBAAuB,GAC3B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBAC5C,4EAA4E;gBAC5E,yEAAyE;gBACzE,sEAAsE;gBACtE,0DAA0D;gBAC1D,MAAM,WAAW,GAAG,uBAAuB,aAAvB,uBAAuB,uBAAvB,uBAAuB,CAAE,IAAI,CAAC;gBAClD,IAAI,WAAW,EAAE;oBACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,WAAW,IAAI,CAAC,CAAC;iBACvC;aACF;iBAAM;gBACL,eAAe,CAAC,IAAI,CAAC,CAAC;gBACtB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;gBAC1B,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;gBACpB,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,uEAAuE,CACxE,CAAC;aACH;YAED,IAAI,CAAC,aAAa,EAAE,CAAC;QACvB,CAAC;KACF,CAAC,CAAC;AACL,CAAC;AA9BD,kEA8BC","sourcesContent":["import type { REPLServer } from 'repl';\n\n/**\n * Displays a list of available commands in the REPL alongside with their\n * descriptions.\n * (c) This code was inspired by the 'help' command from Node.js core:\n * {@link https://github.com/nodejs/node/blob/58b60c1393dd65cd228a8b0084a19acd2c1d16aa/lib/repl.js#L1741-L1759}\n */\nfunction listAllCommands(replServer: REPLServer) {\n  Object.keys(replServer.commands)\n    .sort()\n    .forEach(name => {\n      const cmd = replServer.commands[name];\n      if (cmd) {\n        replServer.output.write(`${name}\\t${cmd.help || ''}\\n`);\n      }\n    });\n}\n\nexport function defineDefaultCommandsOnRepl(replServer: REPLServer): void {\n  replServer.defineCommand('help', {\n    help: 'Show REPL options',\n    action(name?: string) {\n      this.clearBufferedCommand();\n\n      if (name) {\n        // Considering native commands before native nestjs injected functions.\n        const nativeCommandOrFunction =\n          this.commands[name] || this.context[name];\n        // NOTE: If the command was retrieve from the context, it will have a `help`\n        // getter property that outputs the helper message and returns undefined.\n        // But if the command was retrieve from the `commands` object, it will\n        // have a `help` property that returns the helper message.\n        const helpMessage = nativeCommandOrFunction?.help;\n        if (helpMessage) {\n          this.output.write(`${helpMessage}\\n`);\n        }\n      } else {\n        listAllCommands(this);\n        this.output.write('\\n\\n');\n        this.context.help();\n        this.output.write(\n          '\\nPress Ctrl+C to abort current expression, Ctrl+D to exit the REPL\\n',\n        );\n      }\n\n      this.displayPrompt();\n    },\n  });\n}\n"]}