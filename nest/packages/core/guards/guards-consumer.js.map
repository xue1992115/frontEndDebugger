{"version":3,"file":"guards-consumer.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/core/","sources":["guards/guards-consumer.ts"],"names":[],"mappings":";;;AAEA,oEAA4D;AAC5D,+BAAiD;AACjD,8EAAyE;AAEzE,MAAa,cAAc;IAClB,KAAK,CAAC,WAAW,CACtB,MAAqB,EACrB,IAAe,EACf,QAAoB,EACpB,QAAyC,EACzC,IAAe;QAEf,IAAI,CAAC,MAAM,IAAI,IAAA,sBAAO,EAAC,MAAM,CAAC,EAAE;YAC9B,OAAO,IAAI,CAAC;SACb;QACD,MAAM,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAC7D,OAAO,CAAC,OAAO,CAAW,IAAI,CAAC,CAAC;QAEhC,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE;YAC1B,MAAM,MAAM,GAAG,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;YAC1C,IAAI,MAAM,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;gBACjC,SAAS;aACV;YACD,OAAO,KAAK,CAAC;SACd;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,aAAa,CAClB,IAAe,EACf,QAAoB,EACpB,QAAyC;QAEzC,OAAO,IAAI,6CAAoB,CAC7B,IAAI,EACJ,QAAQ,CAAC,WAAkB,EAC3B,QAAQ,CACT,CAAC;IACJ,CAAC;IAEM,KAAK,CAAC,UAAU,CACrB,MAAwD;QAExD,IAAI,MAAM,YAAY,iBAAU,EAAE;YAChC,OAAO,IAAA,oBAAa,EAAC,MAAM,CAAC,CAAC;SAC9B;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;CACF;AA5CD,wCA4CC","sourcesContent":["import { CanActivate } from '@nestjs/common';\nimport { ContextType, Controller } from '@nestjs/common/interfaces';\nimport { isEmpty } from '@nestjs/common/utils/shared.utils';\nimport { lastValueFrom, Observable } from 'rxjs';\nimport { ExecutionContextHost } from '../helpers/execution-context-host';\n\nexport class GuardsConsumer {\n  public async tryActivate<TContext extends string = ContextType>(\n    guards: CanActivate[],\n    args: unknown[],\n    instance: Controller,\n    callback: (...args: unknown[]) => unknown,\n    type?: TContext,\n  ): Promise<boolean> {\n    if (!guards || isEmpty(guards)) {\n      return true;\n    }\n    const context = this.createContext(args, instance, callback);\n    context.setType<TContext>(type);\n\n    for (const guard of guards) {\n      const result = guard.canActivate(context);\n      if (await this.pickResult(result)) {\n        continue;\n      }\n      return false;\n    }\n    return true;\n  }\n\n  public createContext(\n    args: unknown[],\n    instance: Controller,\n    callback: (...args: unknown[]) => unknown,\n  ): ExecutionContextHost {\n    return new ExecutionContextHost(\n      args,\n      instance.constructor as any,\n      callback,\n    );\n  }\n\n  public async pickResult(\n    result: boolean | Promise<boolean> | Observable<boolean>,\n  ): Promise<boolean> {\n    if (result instanceof Observable) {\n      return lastValueFrom(result);\n    }\n    return result;\n  }\n}\n"]}