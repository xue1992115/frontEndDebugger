{"version":3,"file":"metadata-scanner.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/core/","sources":["metadata-scanner.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@nestjs/common/interfaces/injectable.interface';\nimport {\n  isConstructor,\n  isFunction,\n  isNil,\n} from '@nestjs/common/utils/shared.utils';\n\nexport class MetadataScanner {\n  private readonly cachedScannedPrototypes: Map<object, string[]> = new Map();\n\n  /**\n   * @deprecated \n   * @see {@link getAllMethodNames}\n   * @see getAllMethodNames\n   */\n  public scanFromPrototype<T extends Injectable, R = any>(\n    instance: T,\n    prototype: object,\n    callback: (name: string) => R,\n  ): R[] {\n    if (!prototype) {\n      return [];\n    }\n\n    const visitedNames = new Map<string, boolean>();\n    const result: R[] = [];\n\n    do {\n      for (const property of Object.getOwnPropertyNames(prototype)) {\n        if (visitedNames.has(property)) {\n          continue;\n        }\n\n        visitedNames.set(property, true);\n\n        // reason: https://github.com/nestjs/nest/pull/10821#issuecomment-1411916533\n        const descriptor = Object.getOwnPropertyDescriptor(prototype, property);\n\n        if (\n          descriptor.set ||\n          descriptor.get ||\n          isConstructor(property) ||\n          !isFunction(prototype[property])\n        ) {\n          continue;\n        }\n\n        const value = callback(property);\n\n        if (isNil(value)) {\n          continue;\n        }\n\n        result.push(value);\n      }\n    } while (\n      (prototype = Reflect.getPrototypeOf(prototype)) &&\n      prototype !== Object.prototype\n    );\n\n    return result;\n  }\n\n  /**\n   * @deprecated \n   * @see {@link getAllMethodNames}\n   * @see getAllMethodNames\n   */\n  public *getAllFilteredMethodNames(\n    prototype: object,\n  ): IterableIterator<string> {\n    yield* this.getAllMethodNames(prototype);\n  }\n\n  public getAllMethodNames(prototype: object | null): string[] {\n    if (!prototype) {\n      return [];\n    }\n\n    if (this.cachedScannedPrototypes.has(prototype)) {\n      return this.cachedScannedPrototypes.get(prototype);\n    }\n\n    const visitedNames = new Map<string, boolean>();\n    const result: string[] = [];\n\n    this.cachedScannedPrototypes.set(prototype, result);\n\n    do {\n      for (const property of Object.getOwnPropertyNames(prototype)) {\n        if (visitedNames.has(property)) {\n          continue;\n        }\n\n        visitedNames.set(property, true);\n\n        // reason: https://github.com/nestjs/nest/pull/10821#issuecomment-1411916533\n        const descriptor = Object.getOwnPropertyDescriptor(prototype, property);\n\n        if (\n          descriptor.set ||\n          descriptor.get ||\n          isConstructor(property) ||\n          !isFunction(prototype[property])\n        ) {\n          continue;\n        }\n\n        result.push(property);\n      }\n    } while (\n      (prototype = Reflect.getPrototypeOf(prototype)) &&\n      prototype !== Object.prototype\n    );\n\n    return result;\n  }\n}\n"]}