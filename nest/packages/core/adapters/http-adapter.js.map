{"version":3,"file":"http-adapter.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/core/","sources":["adapters/http-adapter.ts"],"names":[],"mappings":";;;AAQA;;GAEG;AACH,MAAsB,mBAAmB;IAQvC,YAAsB,QAAc;QAAd,aAAQ,GAAR,QAAQ,CAAM;IAAG,CAAC;IAExC,gEAAgE;IACzD,KAAK,CAAC,IAAI,KAAI,CAAC;IAEf,GAAG,CAAC,GAAG,IAAW;QACvB,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC;IACpC,CAAC;IAIM,GAAG,CAAC,GAAG,IAAW;QACvB,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC;IACpC,CAAC;IAIM,IAAI,CAAC,GAAG,IAAW;QACxB,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;IACrC,CAAC;IAIM,IAAI,CAAC,GAAG,IAAW;QACxB,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;IACrC,CAAC;IAIM,MAAM,CAAC,GAAG,IAAW;QAC1B,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC;IACvC,CAAC;IAIM,GAAG,CAAC,GAAG,IAAW;QACvB,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC;IACpC,CAAC;IAIM,KAAK,CAAC,GAAG,IAAW;QACzB,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,CAAC;IACtC,CAAC;IAIM,GAAG,CAAC,GAAG,IAAW;QACvB,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC;IACpC,CAAC;IAIM,OAAO,CAAC,GAAG,IAAW;QAC3B,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,CAAC;IACxC,CAAC;IAIM,MAAM,CAAC,IAAS,EAAE,QAAc,EAAE,QAAc;QACrD,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;IACxD,CAAC;IAEM,aAAa;QAClB,OAAO,IAAI,CAAC,UAAqB,CAAC;IACpC,CAAC;IAEM,aAAa,CAAC,UAAmB;QACtC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IAC/B,CAAC;IAEM,WAAW,CAAU,QAAW;QACrC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IAEM,WAAW;QAChB,OAAO,IAAI,CAAC,QAAa,CAAC;IAC5B,CAAC;CAkCF;AAvHD,kDAuHC","sourcesContent":["import { HttpServer, RequestMethod, VersioningOptions } from '@nestjs/common';\nimport { RequestHandler, VersionValue } from '@nestjs/common/interfaces';\nimport {\n  CorsOptions,\n  CorsOptionsDelegate,\n} from '@nestjs/common/interfaces/external/cors-options.interface';\nimport { NestApplicationOptions } from '@nestjs/common/interfaces/nest-application-options.interface';\n\n/**\n * @publicApi\n */\nexport abstract class AbstractHttpAdapter<\n  TServer = any,\n  TRequest = any,\n  TResponse = any,\n> implements HttpServer<TRequest, TResponse>\n{\n  protected httpServer: TServer;\n\n  constructor(protected instance?: any) {}\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  public async init() {}\n\n  public use(...args: any[]) {\n    return this.instance.use(...args);\n  }\n\n  public get(handler: RequestHandler);\n  public get(path: any, handler: RequestHandler);\n  public get(...args: any[]) {\n    return this.instance.get(...args);\n  }\n\n  public post(handler: RequestHandler);\n  public post(path: any, handler: RequestHandler);\n  public post(...args: any[]) {\n    return this.instance.post(...args);\n  }\n\n  public head(handler: RequestHandler);\n  public head(path: any, handler: RequestHandler);\n  public head(...args: any[]) {\n    return this.instance.head(...args);\n  }\n\n  public delete(handler: RequestHandler);\n  public delete(path: any, handler: RequestHandler);\n  public delete(...args: any[]) {\n    return this.instance.delete(...args);\n  }\n\n  public put(handler: RequestHandler);\n  public put(path: any, handler: RequestHandler);\n  public put(...args: any[]) {\n    return this.instance.put(...args);\n  }\n\n  public patch(handler: RequestHandler);\n  public patch(path: any, handler: RequestHandler);\n  public patch(...args: any[]) {\n    return this.instance.patch(...args);\n  }\n\n  public all(handler: RequestHandler);\n  public all(path: any, handler: RequestHandler);\n  public all(...args: any[]) {\n    return this.instance.all(...args);\n  }\n\n  public options(handler: RequestHandler);\n  public options(path: any, handler: RequestHandler);\n  public options(...args: any[]) {\n    return this.instance.options(...args);\n  }\n\n  public listen(port: string | number, callback?: () => void);\n  public listen(port: string | number, hostname: string, callback?: () => void);\n  public listen(port: any, hostname?: any, callback?: any) {\n    return this.instance.listen(port, hostname, callback);\n  }\n\n  public getHttpServer(): TServer {\n    return this.httpServer as TServer;\n  }\n\n  public setHttpServer(httpServer: TServer) {\n    this.httpServer = httpServer;\n  }\n\n  public setInstance<T = any>(instance: T) {\n    this.instance = instance;\n  }\n\n  public getInstance<T = any>(): T {\n    return this.instance as T;\n  }\n\n  abstract close();\n  abstract initHttpServer(options: NestApplicationOptions);\n  abstract useStaticAssets(...args: any[]);\n  abstract setViewEngine(engine: string);\n  abstract getRequestHostname(request: any);\n  abstract getRequestMethod(request: any);\n  abstract getRequestUrl(request: any);\n  abstract status(response: any, statusCode: number);\n  abstract reply(response: any, body: any, statusCode?: number);\n  abstract end(response: any, message?: string);\n  abstract render(response: any, view: string, options: any);\n  abstract redirect(response: any, statusCode: number, url: string);\n  abstract setErrorHandler(handler: Function, prefix?: string);\n  abstract setNotFoundHandler(handler: Function, prefix?: string);\n  abstract isHeadersSent(response: any);\n  abstract setHeader(response: any, name: string, value: string);\n  abstract registerParserMiddleware(prefix?: string, rawBody?: boolean);\n  abstract enableCors(\n    options: CorsOptions | CorsOptionsDelegate<TRequest>,\n    prefix?: string,\n  );\n  abstract createMiddlewareFactory(\n    requestMethod: RequestMethod,\n  ):\n    | ((path: string, callback: Function) => any)\n    | Promise<(path: string, callback: Function) => any>;\n  abstract getType(): string;\n  abstract applyVersionFilter(\n    handler: Function,\n    version: VersionValue,\n    versioningOptions: VersioningOptions,\n  ): (req: TRequest, res: TResponse, next: () => void) => Function;\n}\n"]}