{"version":3,"file":"reflector.service.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/core/","sources":["services/reflector.service.ts"],"names":[],"mappings":";;;AACA,oEAAsE;AAEtE;;;;;;GAMG;AACH,MAAa,SAAS;IACpB;;;;;;;;;OASG;IACI,GAAG,CACR,WAAiB,EACjB,MAA4B;QAE5B,OAAO,OAAO,CAAC,WAAW,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;IAClD,CAAC;IAED;;;;;;OAMG;IACI,MAAM,CACX,WAAiB,EACjB,OAAiC;QAEjC,OAAO,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAClC,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,MAAM,CAAC,CACnB,CAAC;IACf,CAAC;IAED;;;;;;OAMG;IACI,cAAc,CACnB,WAAiB,EACjB,OAAiC;QAEjC,MAAM,kBAAkB,GAAG,IAAI,CAAC,MAAM,CACpC,WAAW,EACX,OAAO,CACR,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC;QAErC,IAAI,IAAA,sBAAO,EAAC,kBAAkB,CAAC,EAAE;YAC/B,OAAO,kBAA6B,CAAC;SACtC;QACD,OAAO,kBAAkB,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;YACxC,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;gBACpB,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;aACpB;YACD,IAAI,IAAA,uBAAQ,EAAC,CAAC,CAAC,IAAI,IAAA,uBAAQ,EAAC,CAAC,CAAC,EAAE;gBAC9B,uCACK,CAAC,GACD,CAAC,EACJ;aACH;YACD,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAChB,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;;;OAMG;IACI,iBAAiB,CACtB,WAAiB,EACjB,OAAiC;QAEjC,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;YAC5B,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;YAC7C,IAAI,MAAM,KAAK,SAAS,EAAE;gBACxB,OAAO,MAAM,CAAC;aACf;SACF;QACD,OAAO,SAAS,CAAC;IACnB,CAAC;CACF;AAtFD,8BAsFC","sourcesContent":["import { Type } from '@nestjs/common';\nimport { isEmpty, isObject } from '@nestjs/common/utils/shared.utils';\n\n/**\n * Helper class providing Nest reflection capabilities.\n *\n * @see [Reflection](https://docs.nestjs.com/guards#putting-it-all-together)\n *\n * @publicApi\n */\nexport class Reflector {\n  /**\n   * Retrieve metadata for a specified key for a specified target.\n   *\n   * @example\n   * `const roles = this.reflector.get<string[]>('roles', context.getHandler());`\n   *\n   * @param metadataKey lookup key for metadata to retrieve\n   * @param target context (decorated object) to retrieve metadata from\n   *\n   */\n  public get<TResult = any, TKey = any>(\n    metadataKey: TKey,\n    target: Type<any> | Function,\n  ): TResult {\n    return Reflect.getMetadata(metadataKey, target);\n  }\n\n  /**\n   * Retrieve metadata for a specified key for a specified set of targets.\n   *\n   * @param metadataKey lookup key for metadata to retrieve\n   * @param targets context (decorated objects) to retrieve metadata from\n   *\n   */\n  public getAll<TResult extends any[] = any[], TKey = any>(\n    metadataKey: TKey,\n    targets: (Type<any> | Function)[],\n  ): TResult {\n    return (targets || []).map(target =>\n      this.get(metadataKey, target),\n    ) as TResult;\n  }\n\n  /**\n   * Retrieve metadata for a specified key for a specified set of targets and merge results.\n   *\n   * @param metadataKey lookup key for metadata to retrieve\n   * @param targets context (decorated objects) to retrieve metadata from\n   *\n   */\n  public getAllAndMerge<TResult extends any[] = any[], TKey = any>(\n    metadataKey: TKey,\n    targets: (Type<any> | Function)[],\n  ): TResult {\n    const metadataCollection = this.getAll<TResult, TKey>(\n      metadataKey,\n      targets,\n    ).filter(item => item !== undefined);\n\n    if (isEmpty(metadataCollection)) {\n      return metadataCollection as TResult;\n    }\n    return metadataCollection.reduce((a, b) => {\n      if (Array.isArray(a)) {\n        return a.concat(b);\n      }\n      if (isObject(a) && isObject(b)) {\n        return {\n          ...a,\n          ...b,\n        };\n      }\n      return [a, b];\n    });\n  }\n\n  /**\n   * Retrieve metadata for a specified key for a specified set of targets and return a first not undefined value.\n   *\n   * @param metadataKey lookup key for metadata to retrieve\n   * @param targets context (decorated objects) to retrieve metadata from\n   *\n   */\n  public getAllAndOverride<TResult = any, TKey = any>(\n    metadataKey: TKey,\n    targets: (Type<any> | Function)[],\n  ): TResult {\n    for (const target of targets) {\n      const result = this.get(metadataKey, target);\n      if (result !== undefined) {\n        return result;\n      }\n    }\n    return undefined;\n  }\n}\n"]}