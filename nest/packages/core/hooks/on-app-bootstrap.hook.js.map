{"version":3,"file":"on-app-bootstrap.hook.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/core/","sources":["hooks/on-app-bootstrap.hook.ts"],"names":[],"mappings":";;;AACA,oEAAsE;AACtE,qCAAkC;AAClC,iFAGiD;AAIjD;;;;GAIG;AACH,SAAS,qBAAqB,CAC5B,QAAiB;IAEjB,OAAO,IAAA,yBAAU,EACd,QAAmC,CAAC,sBAAsB,CAC5D,CAAC;AACJ,CAAC;AAED;;GAEG;AACH,SAAS,YAAY,CAAC,SAA4B;IAChD,OAAO,IAAA,iBAAO,EAAC,SAAS,CAAC;SACtB,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,IAAA,oBAAK,EAAC,QAAQ,CAAC,CAAC;SACpC,MAAM,CAAC,qBAAqB,CAAC;SAC7B,GAAG,CAAC,KAAK,EAAC,QAAQ,EAAC,EAAE,CACnB,QAA0C,CAAC,sBAAsB,EAAE,CACrE;SACA,OAAO,EAAE,CAAC;AACf,CAAC;AAED;;;;;GAKG;AACI,KAAK,UAAU,uBAAuB,CAAC,MAAc;IAC1D,MAAM,SAAS,GAAG,MAAM,CAAC,oBAAoB,EAAE,CAAC;IAChD,sEAAsE;IACtE,4EAA4E;IAC5E,MAAM,CAAC,CAAC,EAAE,eAAe,CAAC,GAAG,SAAS,CAAC,KAAK,EAAE,CAAC;IAC/C,MAAM,SAAS,GAAG;QAChB,GAAG,MAAM,CAAC,WAAW;QACrB,GAAG,SAAS;QACZ,GAAG,MAAM,CAAC,WAAW;QACrB,GAAG,MAAM,CAAC,WAAW;KACtB,CAAC;IAEF,MAAM,qBAAqB,GAAG,IAAA,8CAAwB,EAAC,SAAS,CAAC,CAAC;IAClE,MAAM,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,qBAAqB,CAAC,CAAC,CAAC;IACvD,MAAM,kBAAkB,GAAG,IAAA,2CAAqB,EAAC,SAAS,CAAC,CAAC;IAC5D,MAAM,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,kBAAkB,CAAC,CAAC,CAAC;IAEpD,2BAA2B;IAC3B,MAAM,mBAAmB,GAAG,eAAe,CAAC,QAAQ,CAAC;IACrD,IACE,mBAAmB;QACnB,qBAAqB,CAAC,mBAAmB,CAAC;QAC1C,eAAe,CAAC,sBAAsB,EAAE,EACxC;QACA,MACE,mBACD,CAAC,sBAAsB,EAAE,CAAC;KAC5B;AACH,CAAC;AA5BD,0DA4BC","sourcesContent":["import { OnApplicationBootstrap } from '@nestjs/common';\nimport { isFunction, isNil } from '@nestjs/common/utils/shared.utils';\nimport { iterate } from 'iterare';\nimport {\n  getNonTransientInstances,\n  getTransientInstances,\n} from '../injector/helpers/transient-instances';\nimport { InstanceWrapper } from '../injector/instance-wrapper';\nimport { Module } from '../injector/module';\n\n/**\n * Checks if the given instance has the `onApplicationBootstrap` function\n *\n * @param instance The instance which should be checked\n */\nfunction hasOnAppBootstrapHook(\n  instance: unknown,\n): instance is OnApplicationBootstrap {\n  return isFunction(\n    (instance as OnApplicationBootstrap).onApplicationBootstrap,\n  );\n}\n\n/**\n * Calls the given instances\n */\nfunction callOperator(instances: InstanceWrapper[]): Promise<any>[] {\n  return iterate(instances)\n    .filter(instance => !isNil(instance))\n    .filter(hasOnAppBootstrapHook)\n    .map(async instance =>\n      (instance as any as OnApplicationBootstrap).onApplicationBootstrap(),\n    )\n    .toArray();\n}\n\n/**\n * Calls the `onApplicationBootstrap` function on the module and its children\n * (providers / controllers).\n *\n * @param module The module which will be initialized\n */\nexport async function callModuleBootstrapHook(module: Module): Promise<any> {\n  const providers = module.getNonAliasProviders();\n  // Module (class) instance is the first element of the providers array\n  // Lifecycle hook has to be called once all classes are properly initialized\n  const [_, moduleClassHost] = providers.shift();\n  const instances = [\n    ...module.controllers,\n    ...providers,\n    ...module.injectables,\n    ...module.middlewares,\n  ];\n\n  const nonTransientInstances = getNonTransientInstances(instances);\n  await Promise.all(callOperator(nonTransientInstances));\n  const transientInstances = getTransientInstances(instances);\n  await Promise.all(callOperator(transientInstances));\n\n  // Call the instance itself\n  const moduleClassInstance = moduleClassHost.instance;\n  if (\n    moduleClassInstance &&\n    hasOnAppBootstrapHook(moduleClassInstance) &&\n    moduleClassHost.isDependencyTreeStatic()\n  ) {\n    await (\n      moduleClassInstance as OnApplicationBootstrap\n    ).onApplicationBootstrap();\n  }\n}\n"]}