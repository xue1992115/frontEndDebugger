{"version":3,"file":"before-app-shutdown.hook.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/core/","sources":["hooks/before-app-shutdown.hook.ts"],"names":[],"mappings":";;;AACA,oEAAsE;AACtE,qCAAkC;AAClC,iFAGiD;AAIjD;;;;GAIG;AACH,SAAS,gCAAgC,CACvC,QAAiB;IAEjB,OAAO,IAAA,yBAAU,EACd,QAAsC,CAAC,yBAAyB,CAClE,CAAC;AACJ,CAAC;AAED;;GAEG;AACH,SAAS,YAAY,CACnB,SAA4B,EAC5B,MAAe;IAEf,OAAO,IAAA,iBAAO,EAAC,SAAS,CAAC;SACtB,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,IAAA,oBAAK,EAAC,QAAQ,CAAC,CAAC;SACpC,MAAM,CAAC,gCAAgC,CAAC;SACxC,GAAG,CAAC,KAAK,EAAC,QAAQ,EAAC,EAAE,CACnB,QAA6C,CAAC,yBAAyB,CACtE,MAAM,CACP,CACF;SACA,OAAO,EAAE,CAAC;AACf,CAAC;AAED;;;;;;GAMG;AACI,KAAK,UAAU,yBAAyB,CAC7C,MAAc,EACd,MAAe;IAEf,MAAM,SAAS,GAAG,MAAM,CAAC,oBAAoB,EAAE,CAAC;IAChD,MAAM,CAAC,CAAC,EAAE,eAAe,CAAC,GAAG,SAAS,CAAC,KAAK,EAAE,CAAC;IAC/C,MAAM,SAAS,GAAG;QAChB,GAAG,MAAM,CAAC,WAAW;QACrB,GAAG,SAAS;QACZ,GAAG,MAAM,CAAC,WAAW;QACrB,GAAG,MAAM,CAAC,WAAW;KACtB,CAAC;IAEF,MAAM,qBAAqB,GAAG,IAAA,8CAAwB,EAAC,SAAS,CAAC,CAAC;IAClE,MAAM,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,qBAAqB,EAAE,MAAM,CAAC,CAAC,CAAC;IAC/D,MAAM,kBAAkB,GAAG,IAAA,2CAAqB,EAAC,SAAS,CAAC,CAAC;IAC5D,MAAM,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,kBAAkB,EAAE,MAAM,CAAC,CAAC,CAAC;IAE5D,MAAM,mBAAmB,GAAG,eAAe,CAAC,QAAQ,CAAC;IACrD,IACE,mBAAmB;QACnB,gCAAgC,CAAC,mBAAmB,CAAC;QACrD,eAAe,CAAC,sBAAsB,EAAE,EACxC;QACA,MACE,mBACD,CAAC,yBAAyB,CAAC,MAAM,CAAC,CAAC;KACrC;AACH,CAAC;AA5BD,8DA4BC","sourcesContent":["import { BeforeApplicationShutdown } from '@nestjs/common';\nimport { isFunction, isNil } from '@nestjs/common/utils/shared.utils';\nimport { iterate } from 'iterare';\nimport {\n  getNonTransientInstances,\n  getTransientInstances,\n} from '../injector/helpers/transient-instances';\nimport { InstanceWrapper } from '../injector/instance-wrapper';\nimport { Module } from '../injector/module';\n\n/**\n * Checks if the given instance has the `beforeApplicationShutdown` function\n *\n * @param instance The instance which should be checked\n */\nfunction hasBeforeApplicationShutdownHook(\n  instance: unknown,\n): instance is BeforeApplicationShutdown {\n  return isFunction(\n    (instance as BeforeApplicationShutdown).beforeApplicationShutdown,\n  );\n}\n\n/**\n * Calls the given instances\n */\nfunction callOperator(\n  instances: InstanceWrapper[],\n  signal?: string,\n): Promise<any>[] {\n  return iterate(instances)\n    .filter(instance => !isNil(instance))\n    .filter(hasBeforeApplicationShutdownHook)\n    .map(async instance =>\n      (instance as any as BeforeApplicationShutdown).beforeApplicationShutdown(\n        signal,\n      ),\n    )\n    .toArray();\n}\n\n/**\n * Calls the `beforeApplicationShutdown` function on the module and its children\n * (providers / controllers).\n *\n * @param module The module which will be initialized\n * @param signal The signal which caused the shutdown\n */\nexport async function callBeforeAppShutdownHook(\n  module: Module,\n  signal?: string,\n): Promise<void> {\n  const providers = module.getNonAliasProviders();\n  const [_, moduleClassHost] = providers.shift();\n  const instances = [\n    ...module.controllers,\n    ...providers,\n    ...module.injectables,\n    ...module.middlewares,\n  ];\n\n  const nonTransientInstances = getNonTransientInstances(instances);\n  await Promise.all(callOperator(nonTransientInstances, signal));\n  const transientInstances = getTransientInstances(instances);\n  await Promise.all(callOperator(transientInstances, signal));\n\n  const moduleClassInstance = moduleClassHost.instance;\n  if (\n    moduleClassInstance &&\n    hasBeforeApplicationShutdownHook(moduleClassInstance) &&\n    moduleClassHost.isDependencyTreeStatic()\n  ) {\n    await (\n      moduleClassInstance as BeforeApplicationShutdown\n    ).beforeApplicationShutdown(signal);\n  }\n}\n"]}