{"version":3,"file":"nest-factory.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/core/","sources":["nest-factory.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  HttpServer,\n  INestApplication,\n  INestApplicationContext,\n  INestMicroservice,\n} from '@nestjs/common';\nimport { NestMicroserviceOptions } from '@nestjs/common/interfaces/microservices/nest-microservice-options.interface';\nimport { NestApplicationContextOptions } from '@nestjs/common/interfaces/nest-application-context-options.interface';\nimport { NestApplicationOptions } from '@nestjs/common/interfaces/nest-application-options.interface';\nimport { Logger } from '@nestjs/common/services/logger.service';\nimport { loadPackage } from '@nestjs/common/utils/load-package.util';\nimport { isFunction, isNil } from '@nestjs/common/utils/shared.utils';\nimport { AbstractHttpAdapter } from './adapters/http-adapter';\nimport { ApplicationConfig } from './application-config';\nimport { MESSAGES } from './constants';\nimport { ExceptionsZone } from './errors/exceptions-zone';\nimport { loadAdapter } from './helpers/load-adapter';\nimport { rethrow } from './helpers/rethrow';\nimport { NestContainer } from './injector/container';\nimport { Injector } from './injector/injector';\nimport { InstanceLoader } from './injector/instance-loader';\nimport { GraphInspector } from './inspector/graph-inspector';\nimport { NoopGraphInspector } from './inspector/noop-graph-inspector';\nimport { UuidFactory, UuidFactoryMode } from './inspector/uuid-factory';\nimport { MetadataScanner } from './metadata-scanner';\nimport { NestApplication } from './nest-application';\nimport { NestApplicationContext } from './nest-application-context';\nimport { DependenciesScanner } from './scanner';\n\n/**\n * @publicApi\n */\nexport class NestFactoryStatic {\n  private readonly logger = new Logger('NestFactory', {\n    timestamp: true,\n  });\n  private abortOnError = true;\n  private autoFlushLogs = false;\n\n  /**\n   * Creates an instance of NestApplication.\n   *\n   * @param module Entry (root) application module class\n   * @param options List of options to initialize NestApplication\n   *\n   * @returns A promise that, when resolved,\n   * contains a reference to the NestApplication instance.\n   */\n  public async create<T extends INestApplication = INestApplication>(\n    module: any,\n    options?: NestApplicationOptions,\n  ): Promise<T>;\n  /**\n   * Creates an instance of NestApplication with the specified `httpAdapter`.\n   *\n   * @param module Entry (root) application module class\n   * @param httpAdapter Adapter to proxy the request/response cycle to\n   *    the underlying HTTP server\n   * @param options List of options to initialize NestApplication\n   *\n   * @returns A promise that, when resolved,\n   * contains a reference to the NestApplication instance.\n   */\n  public async create<T extends INestApplication = INestApplication>(\n    module: any,\n    httpAdapter: AbstractHttpAdapter,\n    options?: NestApplicationOptions,\n  ): Promise<T>;\n  public async create<T extends INestApplication = INestApplication>(\n    moduleCls: any,\n    serverOrOptions?: AbstractHttpAdapter | NestApplicationOptions,\n    options?: NestApplicationOptions,\n  ): Promise<T> {\n    const [httpServer, appOptions] = this.isHttpServer(serverOrOptions)\n      ? [serverOrOptions, options]\n      : [this.createHttpAdapter(), serverOrOptions];\n\n    const applicationConfig = new ApplicationConfig();\n    const container = new NestContainer(applicationConfig);\n    const graphInspector = this.createGraphInspector(appOptions, container);\n\n    this.setAbortOnError(serverOrOptions, options);\n    this.registerLoggerConfiguration(appOptions);\n\n    await this.initialize(\n      moduleCls,\n      container,\n      graphInspector,\n      applicationConfig,\n      appOptions,\n      httpServer,\n    );\n\n    const instance = new NestApplication(\n      container,\n      httpServer,\n      applicationConfig,\n      graphInspector,\n      appOptions,\n    );\n    const target = this.createNestInstance(instance);\n    return this.createAdapterProxy<T>(target, httpServer);\n  }\n\n  /**\n   * Creates an instance of NestMicroservice.\n   *\n   * @param moduleCls Entry (root) application module class\n   * @param options Optional microservice configuration\n   *\n   * @returns A promise that, when resolved,\n   * contains a reference to the NestMicroservice instance.\n   */\n  public async createMicroservice<T extends object>(\n    moduleCls: any,\n    options?: NestMicroserviceOptions & T,\n  ): Promise<INestMicroservice> {\n    const { NestMicroservice } = loadPackage(\n      '@nestjs/microservices',\n      'NestFactory',\n      () => require('@nestjs/microservices'),\n    );\n    const applicationConfig = new ApplicationConfig();\n    const container = new NestContainer(applicationConfig);\n    const graphInspector = this.createGraphInspector(options, container);\n\n    this.setAbortOnError(options);\n    this.registerLoggerConfiguration(options);\n\n    await this.initialize(\n      moduleCls,\n      container,\n      graphInspector,\n      applicationConfig,\n      options,\n    );\n    return this.createNestInstance<INestMicroservice>(\n      new NestMicroservice(\n        container,\n        options,\n        graphInspector,\n        applicationConfig,\n      ),\n    );\n  }\n\n  /**\n   * Creates an instance of NestApplicationContext.\n   *\n   * @param moduleCls Entry (root) application module class\n   * @param options Optional Nest application configuration\n   *\n   * @returns A promise that, when resolved,\n   * contains a reference to the NestApplicationContext instance.\n   */\n  public async createApplicationContext(\n    moduleCls: any,\n    options?: NestApplicationContextOptions,\n  ): Promise<INestApplicationContext> {\n    const container = new NestContainer();\n    const graphInspector = this.createGraphInspector(options, container);\n\n    this.setAbortOnError(options);\n    this.registerLoggerConfiguration(options);\n\n    const applicationConfig = undefined;\n    await this.initialize(\n      moduleCls,\n      container,\n      graphInspector,\n      applicationConfig,\n      options,\n    );\n\n    const modules = container.getModules().values();\n    const root = modules.next().value;\n\n    const context = this.createNestInstance<NestApplicationContext>(\n      new NestApplicationContext(container, options, root),\n    );\n    if (this.autoFlushLogs) {\n      context.flushLogsOnOverride();\n    }\n    return context.init();\n  }\n\n  private createNestInstance<T>(instance: T): T {\n    return this.createProxy(instance);\n  }\n\n  private async initialize(\n    module: any,\n    container: NestContainer,\n    graphInspector: GraphInspector,\n    config = new ApplicationConfig(),\n    options: NestApplicationContextOptions = {},\n    httpServer: HttpServer = null,\n  ) {\n    UuidFactory.mode = options.snapshot\n      ? UuidFactoryMode.Deterministic\n      : UuidFactoryMode.Random;\n\n    const injector = new Injector({ preview: options.preview });\n    const instanceLoader = new InstanceLoader(\n      container,\n      injector,\n      graphInspector,\n    );\n    const metadataScanner = new MetadataScanner();\n    const dependenciesScanner = new DependenciesScanner(\n      container,\n      metadataScanner,\n      graphInspector,\n      config,\n    );\n    container.setHttpAdapter(httpServer);\n\n    const teardown = this.abortOnError === false ? rethrow : undefined;\n    await httpServer?.init();\n    try {\n      this.logger.log(MESSAGES.APPLICATION_START);\n\n      await ExceptionsZone.asyncRun(\n        async () => {\n          await dependenciesScanner.scan(module);\n          await instanceLoader.createInstancesOfDependencies();\n          dependenciesScanner.applyApplicationProviders();\n        },\n        teardown,\n        this.autoFlushLogs,\n      );\n    } catch (e) {\n      this.handleInitializationError(e);\n    }\n  }\n\n  private handleInitializationError(err: unknown) {\n    if (this.abortOnError) {\n      process.abort();\n    }\n    rethrow(err);\n  }\n\n  private createProxy(target: any) {\n    const proxy = this.createExceptionProxy();\n    return new Proxy(target, {\n      get: proxy,\n      set: proxy,\n    });\n  }\n\n  private createExceptionProxy() {\n    return (receiver: Record<string, any>, prop: string) => {\n      if (!(prop in receiver)) {\n        return;\n      }\n      if (isFunction(receiver[prop])) {\n        return this.createExceptionZone(receiver, prop);\n      }\n      return receiver[prop];\n    };\n  }\n\n  private createExceptionZone(\n    receiver: Record<string, any>,\n    prop: string,\n  ): Function {\n    const teardown = this.abortOnError === false ? rethrow : undefined;\n\n    return (...args: unknown[]) => {\n      let result: unknown;\n      ExceptionsZone.run(() => {\n        result = receiver[prop](...args);\n      }, teardown);\n\n      return result;\n    };\n  }\n\n  private registerLoggerConfiguration(\n    options: NestApplicationContextOptions | undefined,\n  ) {\n    if (!options) {\n      return;\n    }\n    const { logger, bufferLogs, autoFlushLogs } = options;\n    if ((logger as boolean) !== true && !isNil(logger)) {\n      Logger.overrideLogger(logger);\n    }\n    if (bufferLogs) {\n      Logger.attachBuffer();\n    }\n    this.autoFlushLogs = autoFlushLogs ?? true;\n  }\n\n  private createHttpAdapter<T = any>(httpServer?: T): AbstractHttpAdapter {\n    const { ExpressAdapter } = loadAdapter(\n      '@nestjs/platform-express',\n      'HTTP',\n      () => require('@nestjs/platform-express'),\n    );\n    return new ExpressAdapter(httpServer);\n  }\n\n  private isHttpServer(\n    serverOrOptions: AbstractHttpAdapter | NestApplicationOptions,\n  ): serverOrOptions is AbstractHttpAdapter {\n    return !!(\n      serverOrOptions && (serverOrOptions as AbstractHttpAdapter).patch\n    );\n  }\n\n  private setAbortOnError(\n    serverOrOptions?: AbstractHttpAdapter | NestApplicationOptions,\n    options?: NestApplicationContextOptions | NestApplicationOptions,\n  ) {\n    this.abortOnError = this.isHttpServer(serverOrOptions)\n      ? !(options && options.abortOnError === false)\n      : !(serverOrOptions && serverOrOptions.abortOnError === false);\n  }\n\n  private createAdapterProxy<T>(app: NestApplication, adapter: HttpServer): T {\n    const proxy = new Proxy(app, {\n      get: (receiver: Record<string, any>, prop: string) => {\n        const mapToProxy = (result: unknown) => {\n          return result instanceof Promise\n            ? result.then(mapToProxy)\n            : result instanceof NestApplication\n            ? proxy\n            : result;\n        };\n\n        if (!(prop in receiver) && prop in adapter) {\n          return (...args: unknown[]) => {\n            const result = this.createExceptionZone(adapter, prop)(...args);\n            return mapToProxy(result);\n          };\n        }\n        if (isFunction(receiver[prop])) {\n          return (...args: unknown[]) => {\n            const result = receiver[prop](...args);\n            return mapToProxy(result);\n          };\n        }\n        return receiver[prop];\n      },\n    });\n    return proxy as unknown as T;\n  }\n\n  private createGraphInspector(\n    appOptions: NestApplicationContextOptions,\n    container: NestContainer,\n  ) {\n    return appOptions?.snapshot\n      ? new GraphInspector(container)\n      : NoopGraphInspector;\n  }\n}\n\n/**\n * Use NestFactory to create an application instance.\n *\n * ### Specifying an entry module\n *\n * Pass the required *root module* for the application via the module parameter.\n * By convention, it is usually called `ApplicationModule`.  Starting with this\n * module, Nest assembles the dependency graph and begins the process of\n * Dependency Injection and instantiates the classes needed to launch your\n * application.\n *\n * @publicApi\n */\nexport const NestFactory = new NestFactoryStatic();\n"]}