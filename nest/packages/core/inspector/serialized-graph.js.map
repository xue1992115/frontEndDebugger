{"version":3,"file":"serialized-graph.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/core/","sources":["inspector/serialized-graph.ts"],"names":[],"mappings":"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","sourcesContent":["import { InjectionToken } from '@nestjs/common';\nimport { ApplicationConfig } from '../application-config';\nimport { ExternalContextCreator } from '../helpers/external-context-creator';\nimport { HttpAdapterHost } from '../helpers/http-adapter-host';\nimport { INQUIRER } from '../injector/inquirer/inquirer-constants';\nimport { LazyModuleLoader } from '../injector/lazy-module-loader/lazy-module-loader';\nimport { ModuleRef } from '../injector/module-ref';\nimport { ModulesContainer } from '../injector/modules-container';\nimport { REQUEST } from '../router/request/request-constants';\nimport { Reflector } from '../services/reflector.service';\nimport { DeterministicUuidRegistry } from './deterministic-uuid-registry';\nimport { Edge } from './interfaces/edge.interface';\nimport { Entrypoint } from './interfaces/entrypoint.interface';\nimport {\n  Extras,\n  OrphanedEnhancerDefinition,\n} from './interfaces/extras.interface';\nimport { Node } from './interfaces/node.interface';\nimport { SerializedGraphJson } from './interfaces/serialized-graph-json.interface';\nimport { SerializedGraphMetadata } from './interfaces/serialized-graph-metadata.interface';\n\nexport type SerializedGraphStatus = 'partial' | 'complete';\ntype WithOptionalId<T extends Record<'id', string>> = Omit<T, 'id'> &\n  Partial<Pick<T, 'id'>>;\n\nexport class SerializedGraph {\n  private readonly nodes = new Map<string, Node>();\n  private readonly edges = new Map<string, Edge>();\n  private readonly entrypoints = new Map<string, Entrypoint<unknown>[]>();\n  private readonly extras: Extras = {\n    orphanedEnhancers: [],\n    attachedEnhancers: [],\n  };\n  private _status: SerializedGraphStatus = 'complete';\n  private _metadata?: SerializedGraphMetadata;\n\n  private static readonly INTERNAL_PROVIDERS: Array<InjectionToken> = [\n    ApplicationConfig,\n    ModuleRef,\n    HttpAdapterHost,\n    LazyModuleLoader,\n    ExternalContextCreator,\n    ModulesContainer,\n    Reflector,\n    SerializedGraph,\n    HttpAdapterHost.name,\n    Reflector.name,\n    REQUEST,\n    INQUIRER,\n  ];\n\n  set status(status: SerializedGraphStatus) {\n    this._status = status;\n  }\n\n  set metadata(metadata: SerializedGraphMetadata) {\n    this._metadata = metadata;\n  }\n\n  public insertNode(nodeDefinition: Node) {\n    if (\n      nodeDefinition.metadata.type === 'provider' &&\n      SerializedGraph.INTERNAL_PROVIDERS.includes(nodeDefinition.metadata.token)\n    ) {\n      nodeDefinition.metadata = {\n        ...nodeDefinition.metadata,\n        internal: true,\n      };\n    }\n    if (this.nodes.has(nodeDefinition.id)) {\n      return this.nodes.get(nodeDefinition.id);\n    }\n    this.nodes.set(nodeDefinition.id, nodeDefinition);\n    return nodeDefinition;\n  }\n\n  public insertEdge(edgeDefinition: WithOptionalId<Edge>) {\n    if (\n      edgeDefinition.metadata.type === 'class-to-class' &&\n      (SerializedGraph.INTERNAL_PROVIDERS.includes(\n        edgeDefinition.metadata.sourceClassToken,\n      ) ||\n        SerializedGraph.INTERNAL_PROVIDERS.includes(\n          edgeDefinition.metadata.targetClassToken,\n        ))\n    ) {\n      edgeDefinition.metadata = {\n        ...edgeDefinition.metadata,\n        internal: true,\n      };\n    }\n    const id =\n      edgeDefinition.id ?? this.generateUuidByEdgeDefinition(edgeDefinition);\n    const edge = {\n      ...edgeDefinition,\n      id,\n    };\n    this.edges.set(id, edge);\n    return edge;\n  }\n\n  public insertEntrypoint<T>(definition: Entrypoint<T>, parentId: string) {\n    if (this.entrypoints.has(parentId)) {\n      const existingCollection = this.entrypoints.get(parentId);\n      existingCollection.push(definition);\n    } else {\n      this.entrypoints.set(parentId, [definition]);\n    }\n  }\n\n  public insertOrphanedEnhancer(entry: OrphanedEnhancerDefinition) {\n    this.extras.orphanedEnhancers.push(entry);\n  }\n\n  public insertAttachedEnhancer(nodeId: string) {\n    this.extras.attachedEnhancers.push({\n      nodeId,\n    });\n  }\n\n  public getNodeById(id: string) {\n    return this.nodes.get(id);\n  }\n\n  public toJSON(): SerializedGraphJson {\n    const json: SerializedGraphJson = {\n      nodes: Object.fromEntries(this.nodes),\n      edges: Object.fromEntries(this.edges),\n      entrypoints: Object.fromEntries(this.entrypoints),\n      extras: this.extras,\n    };\n\n    if (this._status) {\n      json['status'] = this._status;\n    }\n    if (this._metadata) {\n      json['metadata'] = this._metadata;\n    }\n    return json;\n  }\n\n  public toString() {\n    const replacer = (key: string, value: unknown) => {\n      if (typeof value === 'symbol') {\n        return value.toString();\n      }\n      return typeof value === 'function' ? value.name ?? 'Function' : value;\n    };\n    return JSON.stringify(this.toJSON(), replacer, 2);\n  }\n\n  private generateUuidByEdgeDefinition(\n    edgeDefinition: WithOptionalId<Edge>,\n  ): string {\n    return DeterministicUuidRegistry.get(JSON.stringify(edgeDefinition));\n  }\n}\n"]}