{"version":3,"file":"node.interface.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/core/","sources":["inspector/interfaces/node.interface.ts"],"names":[],"mappings":"","sourcesContent":["import { InjectionToken, Scope } from '@nestjs/common';\nimport { EnhancerSubtype } from '@nestjs/common/constants';\n\nexport type ModuleNode = {\n  metadata: {\n    type: 'module';\n    global: boolean;\n    dynamic: boolean;\n    internal: boolean;\n  };\n};\n\nexport type ClassNode = {\n  parent: string;\n  metadata: {\n    type: 'provider' | 'controller' | 'middleware' | 'injectable';\n    subtype?: EnhancerSubtype;\n    sourceModuleName: string;\n    durable: boolean;\n    static: boolean;\n    transient: boolean;\n    exported: boolean;\n    scope: Scope;\n    token: InjectionToken;\n    initTime: number;\n    /**\n     * Enhancers metadata collection\n     */\n    enhancers?: Array<\n      | { id: string; subtype: EnhancerSubtype }\n      | { name: string; methodKey?: string; subtype: EnhancerSubtype }\n    >;\n    /**\n     * If true, node is a globally registered enhancer\n     */\n    global?: boolean;\n    /**\n     * If true, indicates that this node represents an internal provider\n     */\n    internal?: boolean;\n  };\n};\n\nexport type Node = {\n  id: string;\n  label: string;\n} & (ClassNode | ModuleNode);\n"]}