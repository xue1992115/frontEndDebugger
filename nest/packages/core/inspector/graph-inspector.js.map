{"version":3,"file":"graph-inspector.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/core/","sources":["inspector/graph-inspector.ts"],"names":[],"mappings":"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","sourcesContent":["import { UnknownDependenciesException } from '../errors/exceptions/unknown-dependencies.exception';\nimport { NestContainer } from '../injector/container';\nimport { InstanceWrapper } from '../injector/instance-wrapper';\nimport { Module } from '../injector/module';\nimport { DeterministicUuidRegistry } from './deterministic-uuid-registry';\nimport { EnhancerMetadataCacheEntry } from './interfaces/enhancer-metadata-cache-entry.interface';\nimport { Entrypoint } from './interfaces/entrypoint.interface';\nimport { OrphanedEnhancerDefinition } from './interfaces/extras.interface';\nimport { ClassNode, Node } from './interfaces/node.interface';\nimport { PartialGraphHost } from './partial-graph.host';\nimport { SerializedGraph } from './serialized-graph';\n\nexport class GraphInspector {\n  private readonly graph: SerializedGraph;\n  private readonly enhancersMetadataCache =\n    new Array<EnhancerMetadataCacheEntry>();\n\n  constructor(private readonly container: NestContainer) {\n    this.graph = container.serializedGraph;\n  }\n\n  public inspectModules(\n    modules: Map<string, Module> = this.container.getModules(),\n  ) {\n    for (const moduleRef of modules.values()) {\n      this.insertModuleNode(moduleRef);\n      this.insertClassNodes(moduleRef);\n      this.insertModuleToModuleEdges(moduleRef);\n    }\n\n    this.enhancersMetadataCache.forEach(entry =>\n      this.insertEnhancerEdge(entry),\n    );\n\n    DeterministicUuidRegistry.clear();\n  }\n\n  public registerPartial(error: unknown) {\n    this.graph.status = 'partial';\n\n    if (error instanceof UnknownDependenciesException) {\n      this.graph.metadata = {\n        cause: {\n          type: 'unknown-dependencies',\n          context: error.context,\n          moduleId: error.moduleRef?.id,\n          nodeId: error.metadata?.id,\n        },\n      };\n    } else {\n      this.graph.metadata = {\n        cause: {\n          type: 'unknown',\n          error,\n        },\n      };\n    }\n    PartialGraphHost.register(this.graph);\n  }\n\n  public inspectInstanceWrapper<T = any>(\n    source: InstanceWrapper<T>,\n    moduleRef: Module,\n  ) {\n    const ctorMetadata = source.getCtorMetadata();\n    ctorMetadata?.forEach((target, index) =>\n      this.insertClassToClassEdge(\n        source,\n        target,\n        moduleRef,\n        index,\n        'constructor',\n      ),\n    );\n\n    const propertiesMetadata = source.getPropertiesMetadata();\n    propertiesMetadata?.forEach(({ key, wrapper: target }) =>\n      this.insertClassToClassEdge(source, target, moduleRef, key, 'property'),\n    );\n  }\n\n  public insertEnhancerMetadataCache(entry: EnhancerMetadataCacheEntry) {\n    this.enhancersMetadataCache.push(entry);\n  }\n\n  public insertOrphanedEnhancer(entry: OrphanedEnhancerDefinition) {\n    this.graph.insertOrphanedEnhancer({\n      ...entry,\n      ref: entry.ref?.constructor?.name ?? 'Object',\n    });\n  }\n\n  public insertAttachedEnhancer(wrapper: InstanceWrapper) {\n    const existingNode = this.graph.getNodeById(wrapper.id);\n    existingNode.metadata.global = true;\n\n    this.graph.insertAttachedEnhancer(existingNode.id);\n  }\n\n  public insertEntrypointDefinition<T>(\n    definition: Entrypoint<T>,\n    parentId: string,\n  ) {\n    definition = {\n      ...definition,\n      id: `${definition.classNodeId}_${definition.methodName}`,\n    };\n    this.graph.insertEntrypoint(definition, parentId);\n  }\n\n  public insertClassNode(\n    moduleRef: Module,\n    wrapper: InstanceWrapper,\n    type: Exclude<Node['metadata']['type'], 'module'>,\n  ) {\n    this.graph.insertNode({\n      id: wrapper.id,\n      label: wrapper.name,\n      parent: moduleRef.id,\n      metadata: {\n        type,\n        internal: wrapper.metatype === moduleRef.metatype,\n        sourceModuleName: moduleRef.name,\n        durable: wrapper.isDependencyTreeDurable(),\n        static: wrapper.isDependencyTreeStatic(),\n        scope: wrapper.scope,\n        transient: wrapper.isTransient,\n        exported: moduleRef.exports.has(wrapper.token),\n        token: wrapper.token,\n        subtype: wrapper.subtype,\n        initTime: wrapper.initTime,\n      },\n    });\n  }\n\n  private insertModuleNode(moduleRef: Module) {\n    const dynamicMetadata = this.container.getDynamicMetadataByToken(\n      moduleRef.token,\n    );\n    const node: Node = {\n      id: moduleRef.id,\n      label: moduleRef.name,\n      metadata: {\n        type: 'module',\n        global: moduleRef.isGlobal,\n        dynamic: !!dynamicMetadata,\n        internal: moduleRef.name === 'InternalCoreModule',\n      },\n    };\n    this.graph.insertNode(node);\n  }\n\n  private insertModuleToModuleEdges(moduleRef: Module) {\n    for (const targetModuleRef of moduleRef.imports) {\n      this.graph.insertEdge({\n        source: moduleRef.id,\n        target: targetModuleRef.id,\n        metadata: {\n          type: 'module-to-module',\n          sourceModuleName: moduleRef.name,\n          targetModuleName: targetModuleRef.name,\n        },\n      });\n    }\n  }\n\n  private insertEnhancerEdge(entry: EnhancerMetadataCacheEntry) {\n    const moduleRef = this.container.getModuleByKey(entry.moduleToken);\n    const sourceInstanceWrapper =\n      moduleRef.controllers.get(entry.classRef) ??\n      moduleRef.providers.get(entry.classRef);\n    const existingSourceNode = this.graph.getNodeById(\n      sourceInstanceWrapper.id,\n    ) as ClassNode;\n    const enhancers = existingSourceNode.metadata.enhancers ?? [];\n\n    if (entry.enhancerInstanceWrapper) {\n      this.insertClassToClassEdge(\n        sourceInstanceWrapper,\n        entry.enhancerInstanceWrapper,\n        moduleRef,\n        undefined,\n        'decorator',\n      );\n\n      enhancers.push({\n        id: entry.enhancerInstanceWrapper.id,\n        methodKey: entry.methodKey,\n        subtype: entry.subtype,\n      });\n    } else {\n      const name =\n        entry.enhancerRef.constructor?.name ??\n        (entry.enhancerRef as Function).name;\n\n      enhancers.push({\n        name,\n        methodKey: entry.methodKey,\n        subtype: entry.subtype,\n      });\n    }\n    existingSourceNode.metadata.enhancers = enhancers;\n  }\n\n  private insertClassToClassEdge<T>(\n    source: InstanceWrapper<T>,\n    target: InstanceWrapper,\n    moduleRef: Module,\n    keyOrIndex: number | string | symbol | undefined,\n    injectionType: 'constructor' | 'property' | 'decorator',\n  ) {\n    this.graph.insertEdge({\n      source: source.id,\n      target: target.id,\n      metadata: {\n        type: 'class-to-class',\n        sourceModuleName: moduleRef.name,\n        sourceClassName: source.name,\n        targetClassName: target.name,\n        sourceClassToken: source.token,\n        targetClassToken: target.token,\n        targetModuleName: target.host?.name,\n        keyOrIndex,\n        injectionType,\n      },\n    });\n  }\n\n  private insertClassNodes(moduleRef: Module) {\n    moduleRef.providers.forEach(value =>\n      this.insertClassNode(moduleRef, value, 'provider'),\n    );\n    moduleRef.injectables.forEach(value =>\n      this.insertClassNode(moduleRef, value, 'injectable'),\n    );\n    moduleRef.controllers.forEach(value =>\n      this.insertClassNode(moduleRef, value, 'controller'),\n    );\n  }\n}\n"]}