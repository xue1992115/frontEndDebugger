{"version":3,"file":"transient-instances.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/core/","sources":["injector/helpers/transient-instances.ts"],"names":[],"mappings":";;;AAAA,qCAAkC;AAIlC;;;GAGG;AACH,SAAgB,qBAAqB,CACnC,SAA6C;IAE7C,OAAO,IAAA,iBAAO,EAAC,SAAS,CAAC;SACtB,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,sBAAsB,EAAE,CAAC;SAC1D,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,2BAA2B,EAAE,CAAC;SAC5D,OAAO,EAAE;SACT,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;SACtB,GAAG,CAAC,CAAC,EAAE,QAAQ,EAAO,EAAE,EAAE,CAAC,QAAQ,CAAC;SACpC,OAAO,EAAuB,CAAC;AACpC,CAAC;AAVD,sDAUC;AAED;;;GAGG;AACH,SAAgB,wBAAwB,CACtC,SAA6C;IAE7C,OAAO,IAAA,iBAAO,EAAC,SAAS,CAAC;SACtB,MAAM,CACL,CAAC,CAAC,GAAG,EAAE,OAAO,CAAC,EAAE,EAAE,CACjB,OAAO,CAAC,sBAAsB,EAAE,IAAI,CAAC,OAAO,CAAC,WAAW,CAC3D;SACA,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,QAAQ,CAAC;SACtC,OAAO,EAAuB,CAAC;AACpC,CAAC;AAVD,4DAUC","sourcesContent":["import { iterate } from 'iterare';\nimport { InstanceWrapper } from '../instance-wrapper';\nimport { InstanceToken } from '../module';\n\n/**\n * Returns the instances which are transient\n * @param instances The instances which should be checked whether they are transient\n */\nexport function getTransientInstances(\n  instances: [InstanceToken, InstanceWrapper][],\n): InstanceWrapper[] {\n  return iterate(instances)\n    .filter(([_, wrapper]) => wrapper.isDependencyTreeStatic())\n    .map(([_, wrapper]) => wrapper.getStaticTransientInstances())\n    .flatten()\n    .filter(item => !!item)\n    .map(({ instance }: any) => instance)\n    .toArray() as InstanceWrapper[];\n}\n\n/**\n * Returns the instances which are not transient\n * @param instances The instances which should be checked whether they are transient\n */\nexport function getNonTransientInstances(\n  instances: [InstanceToken, InstanceWrapper][],\n): InstanceWrapper[] {\n  return iterate(instances)\n    .filter(\n      ([key, wrapper]) =>\n        wrapper.isDependencyTreeStatic() && !wrapper.isTransient,\n    )\n    .map(([key, { instance }]) => instance)\n    .toArray() as InstanceWrapper[];\n}\n"]}