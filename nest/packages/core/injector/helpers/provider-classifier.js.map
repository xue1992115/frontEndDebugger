{"version":3,"file":"provider-classifier.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/core/","sources":["injector/helpers/provider-classifier.ts"],"names":[],"mappings":";;;AAMA,oEAAgE;AAEhE,SAAgB,eAAe,CAC7B,QAAkB;IAElB,OAAO,OAAO,CAAE,QAA6B,aAA7B,QAAQ,uBAAR,QAAQ,CAAuB,QAAQ,CAAC,CAAC;AAC3D,CAAC;AAJD,0CAIC;AAED,SAAgB,eAAe,CAC7B,QAAkB;IAElB,MAAM,aAAa,GAAI,QAA0B,aAA1B,QAAQ,uBAAR,QAAQ,CAAoB,QAAQ,CAAC;IAC5D,OAAO,CAAC,IAAA,0BAAW,EAAC,aAAa,CAAC,CAAC;AACrC,CAAC;AALD,0CAKC;AAED,SAAgB,iBAAiB,CAC/B,QAAkB;IAElB,OAAO,OAAO,CAAE,QAA4B,CAAC,UAAU,CAAC,CAAC;AAC3D,CAAC;AAJD,8CAIC","sourcesContent":["import {\n  ClassProvider,\n  FactoryProvider,\n  Provider,\n  ValueProvider,\n} from '@nestjs/common';\nimport { isUndefined } from '@nestjs/common/utils/shared.utils';\n\nexport function isClassProvider<T = any>(\n  provider: Provider,\n): provider is ClassProvider<T> {\n  return Boolean((provider as ClassProvider<T>)?.useClass);\n}\n\nexport function isValueProvider<T = any>(\n  provider: Provider,\n): provider is ValueProvider<T> {\n  const providerValue = (provider as ValueProvider)?.useValue;\n  return !isUndefined(providerValue);\n}\n\nexport function isFactoryProvider<T = any>(\n  provider: Provider,\n): provider is FactoryProvider<T> {\n  return Boolean((provider as FactoryProvider).useFactory);\n}\n"]}