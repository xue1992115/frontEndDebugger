{"version":3,"file":"instance-links-host.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/core/","sources":["injector/instance-links-host.ts"],"names":[],"mappings":";;;AAAA,oEAA+D;AAC/D,8FAAyF;AAczF,MAAa,iBAAiB;IAG5B,YAA6B,SAAwB;QAAxB,cAAS,GAAT,SAAS,CAAe;QAFpC,kBAAa,GAAG,IAAI,GAAG,EAAiC,CAAC;QAGxE,IAAI,CAAC,UAAU,EAAE,CAAC;IACpB,CAAC;IAOD,GAAG,CACD,KAAoB,EACpB,UAAiD,EAAE;QAEnD,MAAM,0BAA0B,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAEjE,IAAI,CAAC,0BAA0B,EAAE;YAC/B,MAAM,IAAI,mDAAuB,CAAC,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC,CAAC;SACvE;QAED,IAAI,OAAO,CAAC,IAAI,EAAE;YAChB,OAAO,0BAA0B,CAAC;SACnC;QAED,MAAM,YAAY,GAAG,OAAO,CAAC,QAAQ;YACnC,CAAC,CAAC,0BAA0B,CAAC,IAAI,CAC7B,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,KAAK,OAAO,CAAC,QAAQ,CAC3C;YACH,CAAC,CAAC,0BAA0B,CAAC,0BAA0B,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAEtE,IAAI,CAAC,YAAY,EAAE;YACjB,MAAM,IAAI,mDAAuB,CAAC,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC,CAAC;SACvE;QACD,OAAO,YAAY,CAAC;IACtB,CAAC;IAEO,UAAU;QAChB,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC;QAC5C,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;YAC1B,MAAM,EAAE,SAAS,EAAE,WAAW,EAAE,WAAW,EAAE,GAAG,SAAS,CAAC;YAC1D,SAAS,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE,CACnC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,EAAE,SAAS,EAAE,WAAW,CAAC,CACrD,CAAC;YACF,WAAW,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE,CACrC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,EAAE,SAAS,EAAE,aAAa,CAAC,CACvD,CAAC;YACF,WAAW,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE,CACrC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,EAAE,SAAS,EAAE,aAAa,CAAC,CACvD,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,OAAO,CACb,OAAwB,EACxB,KAAoB,EACpB,SAAiB,EACjB,cAA8B;QAE9B,MAAM,YAAY,GAAiB;YACjC,QAAQ,EAAE,SAAS,CAAC,EAAE;YACtB,UAAU,EAAE,OAAO;YACnB,UAAU,EAAE,SAAS,CAAC,cAAc,CAAC;YACrC,KAAK;SACN,CAAC;QACF,MAAM,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACpD,IAAI,CAAC,aAAa,EAAE;YAClB,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC;SAC/C;aAAM;YACL,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;SAClC;IACH,CAAC;IAEO,sBAAsB,CAAC,KAAoB;QACjD,OAAO,IAAA,yBAAU,EAAC,KAAK,CAAC,CAAC,CAAC,CAAE,KAAkB,aAAlB,KAAK,uBAAL,KAAK,CAAe,IAAI,CAAC,CAAC,CAAE,KAAgB,CAAC;IAC3E,CAAC;CACF;AA7ED,8CA6EC","sourcesContent":["import { isFunction } from '@nestjs/common/utils/shared.utils';\nimport { UnknownElementException } from '../errors/exceptions/unknown-element.exception';\nimport { NestContainer } from './container';\nimport { InstanceWrapper } from './instance-wrapper';\nimport { InstanceToken, Module } from './module';\n\ntype HostCollection = 'providers' | 'controllers' | 'injectables';\n\nexport interface InstanceLink<T = any> {\n  token: InstanceToken;\n  wrapperRef: InstanceWrapper<T>;\n  collection: Map<any, InstanceWrapper>;\n  moduleId: string;\n}\n\nexport class InstanceLinksHost {\n  private readonly instanceLinks = new Map<InstanceToken, InstanceLink[]>();\n\n  constructor(private readonly container: NestContainer) {\n    this.initialize();\n  }\n\n  get<T = any>(token: InstanceToken): InstanceLink<T>;\n  get<T = any>(\n    token: InstanceToken,\n    options?: { moduleId?: string; each?: boolean },\n  ): InstanceLink<T> | Array<InstanceLink<T>>;\n  get<T = any>(\n    token: InstanceToken,\n    options: { moduleId?: string; each?: boolean } = {},\n  ): InstanceLink<T> | Array<InstanceLink<T>> {\n    const instanceLinksForGivenToken = this.instanceLinks.get(token);\n\n    if (!instanceLinksForGivenToken) {\n      throw new UnknownElementException(this.getInstanceNameByToken(token));\n    }\n\n    if (options.each) {\n      return instanceLinksForGivenToken;\n    }\n\n    const instanceLink = options.moduleId\n      ? instanceLinksForGivenToken.find(\n          item => item.moduleId === options.moduleId,\n        )\n      : instanceLinksForGivenToken[instanceLinksForGivenToken.length - 1];\n\n    if (!instanceLink) {\n      throw new UnknownElementException(this.getInstanceNameByToken(token));\n    }\n    return instanceLink;\n  }\n\n  private initialize() {\n    const modules = this.container.getModules();\n    modules.forEach(moduleRef => {\n      const { providers, injectables, controllers } = moduleRef;\n      providers.forEach((wrapper, token) =>\n        this.addLink(wrapper, token, moduleRef, 'providers'),\n      );\n      injectables.forEach((wrapper, token) =>\n        this.addLink(wrapper, token, moduleRef, 'injectables'),\n      );\n      controllers.forEach((wrapper, token) =>\n        this.addLink(wrapper, token, moduleRef, 'controllers'),\n      );\n    });\n  }\n\n  private addLink(\n    wrapper: InstanceWrapper,\n    token: InstanceToken,\n    moduleRef: Module,\n    collectionName: HostCollection,\n  ) {\n    const instanceLink: InstanceLink = {\n      moduleId: moduleRef.id,\n      wrapperRef: wrapper,\n      collection: moduleRef[collectionName],\n      token,\n    };\n    const existingLinks = this.instanceLinks.get(token);\n    if (!existingLinks) {\n      this.instanceLinks.set(token, [instanceLink]);\n    } else {\n      existingLinks.push(instanceLink);\n    }\n  }\n\n  private getInstanceNameByToken(token: InstanceToken): string {\n    return isFunction(token) ? (token as Function)?.name : (token as string);\n  }\n}\n"]}