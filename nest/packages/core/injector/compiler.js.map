{"version":3,"file":"compiler.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/core/","sources":["injector/compiler.ts"],"names":[],"mappings":";;;;AAKA,iEAA4D;AAQ5D,MAAa,cAAc;IACzB,YAA6B,qBAAqB,IAAI,yCAAkB,EAAE;QAA7C,uBAAkB,GAAlB,kBAAkB,CAA2B;IAAG,CAAC;IAEvE,KAAK,CAAC,OAAO,CAClB,QAA4D;QAE5D,MAAM,EAAE,IAAI,EAAE,eAAe,EAAE,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,QAAQ,CAAC,CAAC;QACvE,MAAM,KAAK,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,IAAI,EAAE,eAAe,CAAC,CAAC;QACpE,OAAO,EAAE,IAAI,EAAE,eAAe,EAAE,KAAK,EAAE,CAAC;IAC1C,CAAC;IAEM,eAAe,CACpB,QAAsD;QAKtD,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,EAAE;YACnC,OAAO;gBACL,IAAI,EAAE,CAAC,QAA6B,aAA7B,QAAQ,uBAAR,QAAQ,CAAuB,UAAU;oBAC9C,CAAC,CAAE,QAA6B,CAAC,UAAU,EAAE;oBAC7C,CAAC,CAAC,QAAQ;aACb,CAAC;SACH;QACD,MAAM,EAAE,MAAM,EAAE,IAAI,KAAyB,QAAQ,EAA5B,eAAe,kBAAK,QAAQ,EAA/C,UAAoC,CAAW,CAAC;QACtD,OAAO,EAAE,IAAI,EAAE,eAAe,EAAE,CAAC;IACnC,CAAC;IAEM,eAAe,CACpB,MAAoD;QAEpD,OAAO,CAAC,CAAE,MAAwB,CAAC,MAAM,CAAC;IAC5C,CAAC;CACF;AAjCD,wCAiCC","sourcesContent":["import {\n  DynamicModule,\n  ForwardReference,\n  Type,\n} from '@nestjs/common/interfaces';\nimport { ModuleTokenFactory } from './module-token-factory';\n\nexport interface ModuleFactory {\n  type: Type<any>;\n  token: string;\n  dynamicMetadata?: Partial<DynamicModule>;\n}\n\nexport class ModuleCompiler {\n  constructor(private readonly moduleTokenFactory = new ModuleTokenFactory()) {}\n\n  public async compile(\n    metatype: Type<any> | DynamicModule | Promise<DynamicModule>,\n  ): Promise<ModuleFactory> {\n    const { type, dynamicMetadata } = this.extractMetadata(await metatype);\n    const token = this.moduleTokenFactory.create(type, dynamicMetadata);\n    return { type, dynamicMetadata, token };\n  }\n\n  public extractMetadata(\n    metatype: Type<any> | ForwardReference | DynamicModule,\n  ): {\n    type: Type<any>;\n    dynamicMetadata?: Partial<DynamicModule> | undefined;\n  } {\n    if (!this.isDynamicModule(metatype)) {\n      return {\n        type: (metatype as ForwardReference)?.forwardRef\n          ? (metatype as ForwardReference).forwardRef()\n          : metatype,\n      };\n    }\n    const { module: type, ...dynamicMetadata } = metatype;\n    return { type, dynamicMetadata };\n  }\n\n  public isDynamicModule(\n    module: Type<any> | DynamicModule | ForwardReference,\n  ): module is DynamicModule {\n    return !!(module as DynamicModule).module;\n  }\n}\n"]}