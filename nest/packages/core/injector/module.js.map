{"version":3,"file":"module.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/core/","sources":["injector/module.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  EnhancerSubtype,\n  ENTRY_PROVIDER_WATERMARK,\n} from '@nestjs/common/constants';\nimport {\n  ClassProvider,\n  Controller,\n  DynamicModule,\n  ExistingProvider,\n  FactoryProvider,\n  Injectable,\n  InjectionToken,\n  NestModule,\n  Provider,\n  Type,\n  ValueProvider,\n} from '@nestjs/common/interfaces';\nimport { randomStringGenerator } from '@nestjs/common/utils/random-string-generator.util';\nimport {\n  isFunction,\n  isNil,\n  isString,\n  isSymbol,\n  isUndefined,\n  isObject,\n} from '@nestjs/common/utils/shared.utils';\nimport { iterate } from 'iterare';\nimport { ApplicationConfig } from '../application-config';\nimport {\n  InvalidClassException,\n  RuntimeException,\n  UnknownExportException,\n} from '../errors/exceptions';\nimport { createContextId } from '../helpers/context-id-factory';\nimport { getClassScope } from '../helpers/get-class-scope';\nimport { isDurable } from '../helpers/is-durable';\nimport { UuidFactory } from '../inspector/uuid-factory';\nimport { CONTROLLER_ID_KEY } from './constants';\nimport { NestContainer } from './container';\nimport { InstanceWrapper } from './instance-wrapper';\nimport { ModuleRef, ModuleRefGetOrResolveOpts } from './module-ref';\n\n/**\n * @note\n * Left for backward compatibility\n */\nexport type InstanceToken = InjectionToken;\n\nexport class Module {\n  private readonly _id: string;\n  private readonly _imports = new Set<Module>();\n  private readonly _providers = new Map<\n    InstanceToken,\n    InstanceWrapper<Injectable>\n  >();\n  private readonly _injectables = new Map<\n    InstanceToken,\n    InstanceWrapper<Injectable>\n  >();\n  private readonly _middlewares = new Map<\n    InstanceToken,\n    InstanceWrapper<Injectable>\n  >();\n  private readonly _controllers = new Map<\n    InstanceToken,\n    InstanceWrapper<Controller>\n  >();\n  private readonly _entryProviderKeys = new Set<InstanceToken>();\n  private readonly _exports = new Set<InstanceToken>();\n\n  private _distance = 0;\n  private _initOnPreview = false;\n  private _isGlobal = false;\n  private _token: string;\n\n  constructor(\n    private readonly _metatype: Type<any>,\n    private readonly container: NestContainer,\n  ) {\n    this.addCoreProviders();\n    this._id = this.generateUuid();\n  }\n\n  get id(): string {\n    return this._id;\n  }\n\n  get token(): string {\n    return this._token;\n  }\n\n  set token(token: string) {\n    this._token = token;\n  }\n\n  get name() {\n    return this.metatype.name;\n  }\n\n  get isGlobal() {\n    return this._isGlobal;\n  }\n\n  set isGlobal(global: boolean) {\n    this._isGlobal = global;\n  }\n\n  get initOnPreview() {\n    return this._initOnPreview;\n  }\n\n  set initOnPreview(initOnPreview: boolean) {\n    this._initOnPreview = initOnPreview;\n  }\n\n  get providers(): Map<InstanceToken, InstanceWrapper<Injectable>> {\n    return this._providers;\n  }\n\n  get middlewares(): Map<InstanceToken, InstanceWrapper<Injectable>> {\n    return this._middlewares;\n  }\n\n  get imports(): Set<Module> {\n    return this._imports;\n  }\n\n  /**\n   * Left for backward-compatibility reasons\n   */\n  get relatedModules(): Set<Module> {\n    return this._imports;\n  }\n\n  /**\n   * Left for backward-compatibility reasons\n   */\n  get components(): Map<InstanceToken, InstanceWrapper<Injectable>> {\n    return this._providers;\n  }\n\n  /**\n   * Left for backward-compatibility reasons\n   */\n  get routes(): Map<InstanceToken, InstanceWrapper<Controller>> {\n    return this._controllers;\n  }\n\n  get injectables(): Map<InstanceToken, InstanceWrapper<Injectable>> {\n    return this._injectables;\n  }\n\n  get controllers(): Map<InstanceToken, InstanceWrapper<Controller>> {\n    return this._controllers;\n  }\n\n  get entryProviders(): Array<InstanceWrapper<Injectable>> {\n    return Array.from(this._entryProviderKeys).map(token =>\n      this.providers.get(token),\n    );\n  }\n\n  get exports(): Set<InstanceToken> {\n    return this._exports;\n  }\n\n  get instance(): NestModule {\n    if (!this._providers.has(this._metatype)) {\n      throw new RuntimeException();\n    }\n    const module = this._providers.get(this._metatype);\n    return module.instance as NestModule;\n  }\n\n  get metatype(): Type<any> {\n    return this._metatype;\n  }\n\n  get distance(): number {\n    return this._distance;\n  }\n\n  set distance(value: number) {\n    this._distance = value;\n  }\n\n  public addCoreProviders() {\n    this.addModuleAsProvider();\n    this.addModuleRef();\n    this.addApplicationConfig();\n  }\n\n  public addModuleRef() {\n    const moduleRef = this.createModuleReferenceType();\n    this._providers.set(\n      ModuleRef,\n      new InstanceWrapper({\n        token: ModuleRef,\n        name: ModuleRef.name,\n        metatype: ModuleRef as any,\n        isResolved: true,\n        instance: new moduleRef(),\n        host: this,\n      }),\n    );\n  }\n\n  public addModuleAsProvider() {\n    this._providers.set(\n      this._metatype,\n      new InstanceWrapper({\n        token: this._metatype,\n        name: this._metatype.name,\n        metatype: this._metatype,\n        isResolved: false,\n        instance: null,\n        host: this,\n      }),\n    );\n  }\n\n  public addApplicationConfig() {\n    this._providers.set(\n      ApplicationConfig,\n      new InstanceWrapper({\n        token: ApplicationConfig,\n        name: ApplicationConfig.name,\n        isResolved: true,\n        instance: this.container.applicationConfig,\n        host: this,\n      }),\n    );\n  }\n\n  public addInjectable<T extends Injectable>(\n    injectable: Provider,\n    enhancerSubtype: EnhancerSubtype,\n    host?: Type<T>,\n  ) {\n    if (this.isCustomProvider(injectable)) {\n      return this.addCustomProvider(\n        injectable,\n        this._injectables,\n        enhancerSubtype,\n      );\n    }\n    let instanceWrapper = this.injectables.get(injectable);\n    if (!instanceWrapper) {\n      instanceWrapper = new InstanceWrapper({\n        token: injectable,\n        name: injectable.name,\n        metatype: injectable,\n        instance: null,\n        isResolved: false,\n        scope: getClassScope(injectable),\n        durable: isDurable(injectable),\n        subtype: enhancerSubtype,\n        host: this,\n      });\n      this._injectables.set(injectable, instanceWrapper);\n    }\n    if (host) {\n      const hostWrapper =\n        this._controllers.get(host) || this._providers.get(host);\n      hostWrapper && hostWrapper.addEnhancerMetadata(instanceWrapper);\n    }\n    return instanceWrapper;\n  }\n\n  public addProvider(provider: Provider): Provider | InjectionToken;\n  public addProvider(\n    provider: Provider,\n    enhancerSubtype: EnhancerSubtype,\n  ): Provider | InjectionToken;\n  public addProvider(provider: Provider, enhancerSubtype?: EnhancerSubtype) {\n    if (this.isCustomProvider(provider)) {\n      if (this.isEntryProvider(provider.provide)) {\n        this._entryProviderKeys.add(provider.provide);\n      }\n      return this.addCustomProvider(provider, this._providers, enhancerSubtype);\n    }\n\n    this._providers.set(\n      provider,\n      new InstanceWrapper({\n        token: provider,\n        name: (provider as Type<Injectable>).name,\n        metatype: provider as Type<Injectable>,\n        instance: null,\n        isResolved: false,\n        scope: getClassScope(provider),\n        durable: isDurable(provider),\n        host: this,\n      }),\n    );\n\n    if (this.isEntryProvider(provider)) {\n      this._entryProviderKeys.add(provider);\n    }\n\n    return provider as Type<Injectable>;\n  }\n\n  public isCustomProvider(\n    provider: Provider,\n  ): provider is\n    | ClassProvider\n    | FactoryProvider\n    | ValueProvider\n    | ExistingProvider {\n    return !isNil(\n      (\n        provider as\n          | ClassProvider\n          | FactoryProvider\n          | ValueProvider\n          | ExistingProvider\n      ).provide,\n    );\n  }\n\n  public addCustomProvider(\n    provider:\n      | ClassProvider\n      | FactoryProvider\n      | ValueProvider\n      | ExistingProvider,\n    collection: Map<Function | string | symbol, any>,\n    enhancerSubtype?: EnhancerSubtype,\n  ) {\n    if (this.isCustomClass(provider)) {\n      this.addCustomClass(provider, collection, enhancerSubtype);\n    } else if (this.isCustomValue(provider)) {\n      this.addCustomValue(provider, collection, enhancerSubtype);\n    } else if (this.isCustomFactory(provider)) {\n      this.addCustomFactory(provider, collection, enhancerSubtype);\n    } else if (this.isCustomUseExisting(provider)) {\n      this.addCustomUseExisting(provider, collection, enhancerSubtype);\n    }\n    return provider.provide;\n  }\n\n  public isCustomClass(provider: any): provider is ClassProvider {\n    return !isUndefined((provider as ClassProvider).useClass);\n  }\n\n  public isCustomValue(provider: any): provider is ValueProvider {\n    return (\n      isObject(provider) &&\n      Object.prototype.hasOwnProperty.call(provider, 'useValue')\n    );\n  }\n\n  public isCustomFactory(provider: any): provider is FactoryProvider {\n    return !isUndefined((provider as FactoryProvider).useFactory);\n  }\n\n  public isCustomUseExisting(provider: any): provider is ExistingProvider {\n    return !isUndefined((provider as ExistingProvider).useExisting);\n  }\n\n  public isDynamicModule(exported: any): exported is DynamicModule {\n    return exported && exported.module;\n  }\n\n  public addCustomClass(\n    provider: ClassProvider,\n    collection: Map<InstanceToken, InstanceWrapper>,\n    enhancerSubtype?: EnhancerSubtype,\n  ) {\n    let { scope, durable } = provider;\n\n    const { useClass } = provider;\n    if (isUndefined(scope)) {\n      scope = getClassScope(useClass);\n    }\n    if (isUndefined(durable)) {\n      durable = isDurable(useClass);\n    }\n\n    const token = provider.provide;\n    collection.set(\n      token,\n      new InstanceWrapper({\n        token,\n        name: useClass?.name || useClass,\n        metatype: useClass,\n        instance: null,\n        isResolved: false,\n        scope,\n        durable,\n        host: this,\n        subtype: enhancerSubtype,\n      }),\n    );\n  }\n\n  public addCustomValue(\n    provider: ValueProvider,\n    collection: Map<Function | string | symbol, InstanceWrapper>,\n    enhancerSubtype?: EnhancerSubtype,\n  ) {\n    const { useValue: value, provide: providerToken } = provider;\n    collection.set(\n      providerToken,\n      new InstanceWrapper({\n        token: providerToken,\n        name: (providerToken as Function)?.name || providerToken,\n        metatype: null,\n        instance: value,\n        isResolved: true,\n        async: value instanceof Promise,\n        host: this,\n        subtype: enhancerSubtype,\n      }),\n    );\n  }\n\n  public addCustomFactory(\n    provider: FactoryProvider,\n    collection: Map<Function | string | symbol, InstanceWrapper>,\n    enhancerSubtype?: EnhancerSubtype,\n  ) {\n    const {\n      useFactory: factory,\n      inject,\n      scope,\n      durable,\n      provide: providerToken,\n    } = provider;\n\n    collection.set(\n      providerToken,\n      new InstanceWrapper({\n        token: providerToken,\n        name: (providerToken as Function)?.name || providerToken,\n        metatype: factory as any,\n        instance: null,\n        isResolved: false,\n        inject: inject || [],\n        scope,\n        durable,\n        host: this,\n        subtype: enhancerSubtype,\n      }),\n    );\n  }\n\n  public addCustomUseExisting(\n    provider: ExistingProvider,\n    collection: Map<Function | string | symbol, InstanceWrapper>,\n    enhancerSubtype?: EnhancerSubtype,\n  ) {\n    const { useExisting, provide: providerToken } = provider;\n    collection.set(\n      providerToken,\n      new InstanceWrapper({\n        token: providerToken,\n        name: (providerToken as Function)?.name || providerToken,\n        metatype: (instance => instance) as any,\n        instance: null,\n        isResolved: false,\n        inject: [useExisting],\n        host: this,\n        isAlias: true,\n        subtype: enhancerSubtype,\n      }),\n    );\n  }\n\n  public addExportedProvider(\n    provider: Provider | string | symbol | DynamicModule,\n  ) {\n    const addExportedUnit = (token: InstanceToken) =>\n      this._exports.add(this.validateExportedProvider(token));\n\n    if (this.isCustomProvider(provider as any)) {\n      return this.addCustomExportedProvider(provider as any);\n    } else if (isString(provider) || isSymbol(provider)) {\n      return addExportedUnit(provider);\n    } else if (this.isDynamicModule(provider)) {\n      const { module: moduleClassRef } = provider;\n      return addExportedUnit(moduleClassRef);\n    }\n    addExportedUnit(provider as Type<any>);\n  }\n\n  public addCustomExportedProvider(\n    provider:\n      | FactoryProvider\n      | ValueProvider\n      | ClassProvider\n      | ExistingProvider,\n  ) {\n    const provide = provider.provide;\n    if (isString(provide) || isSymbol(provide)) {\n      return this._exports.add(this.validateExportedProvider(provide));\n    }\n    this._exports.add(this.validateExportedProvider(provide));\n  }\n\n  public validateExportedProvider(token: InstanceToken) {\n    if (this._providers.has(token)) {\n      return token;\n    }\n    const imports = iterate(this._imports.values())\n      .filter(item => !!item)\n      .map(({ metatype }) => metatype)\n      .filter(metatype => !!metatype)\n      .toArray();\n\n    if (!imports.includes(token as Type<unknown>)) {\n      const { name } = this.metatype;\n      const providerName = isFunction(token) ? (token as Function).name : token;\n      throw new UnknownExportException(providerName as string, name);\n    }\n    return token;\n  }\n\n  public addController(controller: Type<Controller>) {\n    this._controllers.set(\n      controller,\n      new InstanceWrapper({\n        token: controller,\n        name: controller.name,\n        metatype: controller,\n        instance: null,\n        isResolved: false,\n        scope: getClassScope(controller),\n        durable: isDurable(controller),\n        host: this,\n      }),\n    );\n\n    this.assignControllerUniqueId(controller);\n  }\n\n  public assignControllerUniqueId(controller: Type<Controller>) {\n    Object.defineProperty(controller, CONTROLLER_ID_KEY, {\n      enumerable: false,\n      writable: false,\n      configurable: true,\n      value: randomStringGenerator(),\n    });\n  }\n\n  public addRelatedModule(module: Module) {\n    this._imports.add(module);\n  }\n\n  public replace(toReplace: InstanceToken, options: any) {\n    if (options.isProvider && this.hasProvider(toReplace)) {\n      const originalProvider = this._providers.get(toReplace);\n\n      return originalProvider.mergeWith({ provide: toReplace, ...options });\n    } else if (!options.isProvider && this.hasInjectable(toReplace)) {\n      const originalInjectable = this._injectables.get(toReplace);\n\n      return originalInjectable.mergeWith({\n        provide: toReplace,\n        ...options,\n      });\n    }\n  }\n\n  public hasProvider(token: InstanceToken): boolean {\n    return this._providers.has(token);\n  }\n\n  public hasInjectable(token: InstanceToken): boolean {\n    return this._injectables.has(token);\n  }\n\n  public getProviderByKey<T = any>(name: InstanceToken): InstanceWrapper<T> {\n    return this._providers.get(name) as InstanceWrapper<T>;\n  }\n\n  public getProviderById<T = any>(id: string): InstanceWrapper<T> | undefined {\n    return Array.from(this._providers.values()).find(\n      item => item.id === id,\n    ) as InstanceWrapper<T>;\n  }\n\n  public getControllerById<T = any>(\n    id: string,\n  ): InstanceWrapper<T> | undefined {\n    return Array.from(this._controllers.values()).find(\n      item => item.id === id,\n    ) as InstanceWrapper<T>;\n  }\n\n  public getInjectableById<T = any>(\n    id: string,\n  ): InstanceWrapper<T> | undefined {\n    return Array.from(this._injectables.values()).find(\n      item => item.id === id,\n    ) as InstanceWrapper<T>;\n  }\n\n  public getMiddlewareById<T = any>(\n    id: string,\n  ): InstanceWrapper<T> | undefined {\n    return Array.from(this._middlewares.values()).find(\n      item => item.id === id,\n    ) as InstanceWrapper<T>;\n  }\n\n  public getNonAliasProviders(): Array<\n    [InstanceToken, InstanceWrapper<Injectable>]\n  > {\n    return [...this._providers].filter(([_, wrapper]) => !wrapper.isAlias);\n  }\n\n  public createModuleReferenceType(): Type<ModuleRef> {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self = this;\n    return class extends ModuleRef {\n      constructor() {\n        super(self.container);\n      }\n\n      public get<TInput = any, TResult = TInput>(\n        typeOrToken: Type<TInput> | string | symbol,\n        options: ModuleRefGetOrResolveOpts = {},\n      ): TResult | Array<TResult> {\n        options.strict ??= true;\n        options.each ??= false;\n\n        return this.find<TInput, TResult>(\n          typeOrToken,\n          options.strict\n            ? {\n                moduleId: self.id,\n                each: options.each,\n              }\n            : options,\n        );\n      }\n\n      public resolve<TInput = any, TResult = TInput>(\n        typeOrToken: Type<TInput> | string | symbol,\n        contextId = createContextId(),\n        options: ModuleRefGetOrResolveOpts = {},\n      ): Promise<TResult | Array<TResult>> {\n        options.strict ??= true;\n        options.each ??= false;\n\n        return this.resolvePerContext<TInput, TResult>(\n          typeOrToken,\n          self,\n          contextId,\n          options,\n        );\n      }\n\n      public async create<T = any>(type: Type<T>): Promise<T> {\n        if (!(type && isFunction(type) && type.prototype)) {\n          throw new InvalidClassException(type);\n        }\n        return this.instantiateClass<T>(type, self);\n      }\n    };\n  }\n\n  private isEntryProvider(metatype: InjectionToken): boolean {\n    return typeof metatype === 'function'\n      ? !!Reflect.getMetadata(ENTRY_PROVIDER_WATERMARK, metatype)\n      : false;\n  }\n\n  private generateUuid(): string {\n    const prefix = 'M_';\n    const key = this.name?.toString() ?? this.token?.toString();\n    return key ? UuidFactory.get(`${prefix}_${key}`) : randomStringGenerator();\n  }\n}\n"]}