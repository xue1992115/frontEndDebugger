{"version":3,"file":"container.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/core/","sources":["injector/container.ts"],"names":[],"mappings":"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","sourcesContent":["import { DynamicModule, Provider } from '@nestjs/common';\nimport {\n  EnhancerSubtype,\n  GLOBAL_MODULE_METADATA,\n} from '@nestjs/common/constants';\nimport { Injectable, Type } from '@nestjs/common/interfaces';\nimport { ApplicationConfig } from '../application-config';\nimport {\n  CircularDependencyException,\n  UndefinedForwardRefException,\n  UnknownModuleException,\n} from '../errors/exceptions';\nimport { InitializeOnPreviewAllowlist } from '../inspector/initialize-on-preview.allowlist';\nimport { SerializedGraph } from '../inspector/serialized-graph';\nimport { REQUEST } from '../router/request/request-constants';\nimport { ModuleCompiler } from './compiler';\nimport { ContextId } from './instance-wrapper';\nimport { InternalCoreModule } from './internal-core-module/internal-core-module';\nimport { InternalProvidersStorage } from './internal-providers-storage';\nimport { Module } from './module';\nimport { ModuleTokenFactory } from './module-token-factory';\nimport { ModulesContainer } from './modules-container';\n\nexport class NestContainer {\n  private readonly globalModules = new Set<Module>();\n  private readonly moduleTokenFactory = new ModuleTokenFactory();\n  private readonly moduleCompiler = new ModuleCompiler(this.moduleTokenFactory);\n  private readonly modules = new ModulesContainer();\n  private readonly dynamicModulesMetadata = new Map<\n    string,\n    Partial<DynamicModule>\n  >();\n  private readonly internalProvidersStorage = new InternalProvidersStorage();\n  private readonly _serializedGraph = new SerializedGraph();\n  private internalCoreModule: Module;\n\n  constructor(\n    private readonly _applicationConfig: ApplicationConfig = undefined,\n  ) {}\n\n  get serializedGraph(): SerializedGraph {\n    return this._serializedGraph;\n  }\n\n  get applicationConfig(): ApplicationConfig | undefined {\n    return this._applicationConfig;\n  }\n\n  public setHttpAdapter(httpAdapter: any) {\n    this.internalProvidersStorage.httpAdapter = httpAdapter;\n\n    if (!this.internalProvidersStorage.httpAdapterHost) {\n      return;\n    }\n    const host = this.internalProvidersStorage.httpAdapterHost;\n    host.httpAdapter = httpAdapter;\n  }\n\n  public getHttpAdapterRef() {\n    return this.internalProvidersStorage.httpAdapter;\n  }\n\n  public getHttpAdapterHostRef() {\n    return this.internalProvidersStorage.httpAdapterHost;\n  }\n\n  public async addModule(\n    metatype: Type<any> | DynamicModule | Promise<DynamicModule>,\n    scope: Type<any>[],\n  ): Promise<Module | undefined> {\n    // In DependenciesScanner#scanForModules we already check for undefined or invalid modules\n    // We still need to catch the edge-case of `forwardRef(() => undefined)`\n    if (!metatype) {\n      throw new UndefinedForwardRefException(scope);\n    }\n    const { type, dynamicMetadata, token } = await this.moduleCompiler.compile(\n      metatype,\n    );\n    if (this.modules.has(token)) {\n      return this.modules.get(token);\n    }\n    const moduleRef = new Module(type, this);\n    moduleRef.token = token;\n    moduleRef.initOnPreview = this.shouldInitOnPreview(type);\n    this.modules.set(token, moduleRef);\n\n    const updatedScope = [].concat(scope, type);\n    await this.addDynamicMetadata(token, dynamicMetadata, updatedScope);\n\n    if (this.isGlobalModule(type, dynamicMetadata)) {\n      moduleRef.isGlobal = true;\n      this.addGlobalModule(moduleRef);\n    }\n    return moduleRef;\n  }\n\n  public async addDynamicMetadata(\n    token: string,\n    dynamicModuleMetadata: Partial<DynamicModule>,\n    scope: Type<any>[],\n  ) {\n    if (!dynamicModuleMetadata) {\n      return;\n    }\n    this.dynamicModulesMetadata.set(token, dynamicModuleMetadata);\n\n    const { imports } = dynamicModuleMetadata;\n    await this.addDynamicModules(imports, scope);\n  }\n\n  public async addDynamicModules(modules: any[], scope: Type<any>[]) {\n    if (!modules) {\n      return;\n    }\n    await Promise.all(modules.map(module => this.addModule(module, scope)));\n  }\n\n  public isGlobalModule(\n    metatype: Type<any>,\n    dynamicMetadata?: Partial<DynamicModule>,\n  ): boolean {\n    if (dynamicMetadata && dynamicMetadata.global) {\n      return true;\n    }\n    return !!Reflect.getMetadata(GLOBAL_MODULE_METADATA, metatype);\n  }\n\n  public addGlobalModule(module: Module) {\n    this.globalModules.add(module);\n  }\n\n  public getModules(): ModulesContainer {\n    return this.modules;\n  }\n\n  public getModuleCompiler(): ModuleCompiler {\n    return this.moduleCompiler;\n  }\n\n  public getModuleByKey(moduleKey: string): Module {\n    return this.modules.get(moduleKey);\n  }\n\n  public getInternalCoreModuleRef(): Module | undefined {\n    return this.internalCoreModule;\n  }\n\n  public async addImport(\n    relatedModule: Type<any> | DynamicModule,\n    token: string,\n  ) {\n    if (!this.modules.has(token)) {\n      return;\n    }\n    const moduleRef = this.modules.get(token);\n    const { token: relatedModuleToken } = await this.moduleCompiler.compile(\n      relatedModule,\n    );\n    const related = this.modules.get(relatedModuleToken);\n    moduleRef.addRelatedModule(related);\n  }\n\n  public addProvider(\n    provider: Provider,\n    token: string,\n    enhancerSubtype?: EnhancerSubtype,\n  ): string | symbol | Function {\n    const moduleRef = this.modules.get(token);\n    if (!provider) {\n      throw new CircularDependencyException(moduleRef?.metatype.name);\n    }\n    if (!moduleRef) {\n      throw new UnknownModuleException();\n    }\n    return moduleRef.addProvider(provider, enhancerSubtype) as Function;\n  }\n\n  public addInjectable(\n    injectable: Provider,\n    token: string,\n    enhancerSubtype: EnhancerSubtype,\n    host?: Type<Injectable>,\n  ) {\n    if (!this.modules.has(token)) {\n      throw new UnknownModuleException();\n    }\n    const moduleRef = this.modules.get(token);\n    return moduleRef.addInjectable(injectable, enhancerSubtype, host);\n  }\n\n  public addExportedProvider(provider: Type<any>, token: string) {\n    if (!this.modules.has(token)) {\n      throw new UnknownModuleException();\n    }\n    const moduleRef = this.modules.get(token);\n    moduleRef.addExportedProvider(provider);\n  }\n\n  public addController(controller: Type<any>, token: string) {\n    if (!this.modules.has(token)) {\n      throw new UnknownModuleException();\n    }\n    const moduleRef = this.modules.get(token);\n    moduleRef.addController(controller);\n  }\n\n  public clear() {\n    this.modules.clear();\n  }\n\n  public replace(toReplace: any, options: any & { scope: any[] | null }) {\n    this.modules.forEach(moduleRef => moduleRef.replace(toReplace, options));\n  }\n\n  public bindGlobalScope() {\n    this.modules.forEach(moduleRef => this.bindGlobalsToImports(moduleRef));\n  }\n\n  public bindGlobalsToImports(moduleRef: Module) {\n    this.globalModules.forEach(globalModule =>\n      this.bindGlobalModuleToModule(moduleRef, globalModule),\n    );\n  }\n\n  public bindGlobalModuleToModule(target: Module, globalModule: Module) {\n    if (target === globalModule || target === this.internalCoreModule) {\n      return;\n    }\n    target.addRelatedModule(globalModule);\n  }\n\n  public getDynamicMetadataByToken(token: string): Partial<DynamicModule>;\n  public getDynamicMetadataByToken<\n    K extends Exclude<keyof DynamicModule, 'global' | 'module'>,\n  >(token: string, metadataKey: K): DynamicModule[K];\n  public getDynamicMetadataByToken(\n    token: string,\n    metadataKey?: Exclude<keyof DynamicModule, 'global' | 'module'>,\n  ) {\n    const metadata = this.dynamicModulesMetadata.get(token);\n    return metadataKey ? metadata?.[metadataKey] ?? [] : metadata;\n  }\n\n  public registerCoreModuleRef(moduleRef: Module) {\n    this.internalCoreModule = moduleRef;\n    this.modules[InternalCoreModule.name] = moduleRef;\n  }\n\n  public getModuleTokenFactory(): ModuleTokenFactory {\n    return this.moduleTokenFactory;\n  }\n\n  public registerRequestProvider<T = any>(request: T, contextId: ContextId) {\n    const wrapper = this.internalCoreModule.getProviderByKey(REQUEST);\n    wrapper.setInstanceByContextId(contextId, {\n      instance: request,\n      isResolved: true,\n    });\n  }\n\n  private shouldInitOnPreview(type: Type) {\n    return InitializeOnPreviewAllowlist.has(type);\n  }\n}\n"]}