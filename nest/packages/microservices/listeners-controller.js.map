{"version":3,"file":"listeners-controller.js","sourceRoot":"","sources":["listeners-controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@nestjs/common/interfaces';\nimport { Controller } from '@nestjs/common/interfaces/controllers/controller.interface';\nimport { isUndefined } from '@nestjs/common/utils/shared.utils';\nimport { ContextIdFactory } from '@nestjs/core/helpers/context-id-factory';\nimport { ExecutionContextHost } from '@nestjs/core/helpers/execution-context-host';\nimport { STATIC_CONTEXT } from '@nestjs/core/injector/constants';\nimport { NestContainer } from '@nestjs/core/injector/container';\nimport { Injector } from '@nestjs/core/injector/injector';\nimport {\n  ContextId,\n  InstanceWrapper,\n} from '@nestjs/core/injector/instance-wrapper';\nimport { Module } from '@nestjs/core/injector/module';\nimport { GraphInspector } from '@nestjs/core/inspector/graph-inspector';\nimport { MetadataScanner } from '@nestjs/core/metadata-scanner';\nimport { REQUEST_CONTEXT_ID } from '@nestjs/core/router/request/request-constants';\nimport {\n  forkJoin,\n  from as fromPromise,\n  isObservable,\n  mergeMap,\n  Observable,\n  ObservedValueOf,\n  of,\n} from 'rxjs';\nimport { IClientProxyFactory } from './client/client-proxy-factory';\nimport { ClientsContainer } from './container';\nimport { ExceptionFiltersContext } from './context/exception-filters-context';\nimport { RequestContextHost } from './context/request-context-host';\nimport { RpcContextCreator } from './context/rpc-context-creator';\nimport {\n  DEFAULT_CALLBACK_METADATA,\n  DEFAULT_GRPC_CALLBACK_METADATA,\n} from './context/rpc-metadata-constants';\nimport { BaseRpcContext } from './ctx-host/base-rpc.context';\nimport { Transport } from './enums';\nimport {\n  CustomTransportStrategy,\n  MessageHandler,\n  PatternMetadata,\n  RequestContext,\n} from './interfaces';\nimport { MicroserviceEntrypointMetadata } from './interfaces/microservice-entrypoint-metadata.interface';\nimport {\n  EventOrMessageListenerDefinition,\n  ListenerMetadataExplorer,\n} from './listener-metadata-explorer';\nimport { ServerGrpc } from './server';\nimport { Server } from './server/server';\n\nexport class ListenersController {\n  private readonly metadataExplorer = new ListenerMetadataExplorer(\n    new MetadataScanner(),\n  );\n  private readonly exceptionFiltersCache = new WeakMap();\n\n  constructor(\n    private readonly clientsContainer: ClientsContainer,\n    private readonly contextCreator: RpcContextCreator,\n    private readonly container: NestContainer,\n    private readonly injector: Injector,\n    private readonly clientFactory: IClientProxyFactory,\n    private readonly exceptionFiltersContext: ExceptionFiltersContext,\n    private readonly graphInspector: GraphInspector,\n  ) {}\n\n  public registerPatternHandlers(\n    instanceWrapper: InstanceWrapper<Controller | Injectable>,\n    server: Server & CustomTransportStrategy,\n    moduleKey: string,\n  ) {\n    const { instance } = instanceWrapper;\n\n    const isStatic = instanceWrapper.isDependencyTreeStatic();\n    const patternHandlers = this.metadataExplorer.explore(instance as object);\n    const moduleRef = this.container.getModuleByKey(moduleKey);\n    const defaultCallMetadata =\n      server instanceof ServerGrpc\n        ? DEFAULT_GRPC_CALLBACK_METADATA\n        : DEFAULT_CALLBACK_METADATA;\n\n    patternHandlers\n      .filter(\n        ({ transport }) =>\n          isUndefined(transport) ||\n          isUndefined(server.transportId) ||\n          transport === server.transportId,\n      )\n      .reduce((acc, handler) => {\n        // Optional chaining for backward-compatibility\n        handler.patterns?.forEach(pattern =>\n          acc.push({ ...handler, patterns: [pattern] }),\n        );\n        return acc;\n      }, [])\n      .forEach((definition: EventOrMessageListenerDefinition) => {\n        const {\n          patterns: [pattern],\n          targetCallback,\n          methodKey,\n          extras,\n          isEventHandler,\n        } = definition;\n\n        this.insertEntrypointDefinition(\n          instanceWrapper,\n          definition,\n          server.transportId,\n        );\n\n        if (isStatic) {\n          const proxy = this.contextCreator.create(\n            instance as object,\n            targetCallback,\n            moduleKey,\n            methodKey,\n            STATIC_CONTEXT,\n            undefined,\n            defaultCallMetadata,\n          );\n          if (isEventHandler) {\n            const eventHandler: MessageHandler = async (...args: unknown[]) => {\n              const originalArgs = args;\n              const [dataOrContextHost] = originalArgs;\n              if (dataOrContextHost instanceof RequestContextHost) {\n                args = args.slice(1, args.length);\n              }\n              const returnValue = proxy(...args);\n              return this.forkJoinHandlersIfAttached(\n                returnValue,\n                originalArgs,\n                eventHandler,\n              );\n            };\n            return server.addHandler(\n              pattern,\n              eventHandler,\n              isEventHandler,\n              extras,\n            );\n          } else {\n            return server.addHandler(pattern, proxy, isEventHandler, extras);\n          }\n        }\n        const asyncHandler = this.createRequestScopedHandler(\n          instanceWrapper,\n          pattern,\n          moduleRef,\n          moduleKey,\n          methodKey,\n          defaultCallMetadata,\n          isEventHandler,\n        );\n        server.addHandler(pattern, asyncHandler, isEventHandler, extras);\n      });\n  }\n\n  public insertEntrypointDefinition(\n    instanceWrapper: InstanceWrapper,\n    definition: EventOrMessageListenerDefinition,\n    transportId: Transport | symbol,\n  ) {\n    this.graphInspector.insertEntrypointDefinition<MicroserviceEntrypointMetadata>(\n      {\n        type: 'microservice',\n        methodName: definition.methodKey,\n        className: instanceWrapper.metatype?.name,\n        classNodeId: instanceWrapper.id,\n        metadata: {\n          key: definition.patterns.toString(),\n          transportId:\n            typeof transportId === 'number'\n              ? (Transport[transportId] as keyof typeof Transport)\n              : transportId,\n          patterns: definition.patterns,\n          isEventHandler: definition.isEventHandler,\n          extras: definition.extras,\n        },\n      },\n      instanceWrapper.id,\n    );\n  }\n\n  public forkJoinHandlersIfAttached(\n    currentReturnValue: Promise<unknown> | Observable<unknown>,\n    originalArgs: unknown[],\n    handlerRef: MessageHandler,\n  ) {\n    if (handlerRef.next) {\n      const returnedValueWrapper = handlerRef.next(\n        ...(originalArgs as Parameters<MessageHandler>),\n      );\n      return forkJoin({\n        current: this.transformToObservable(currentReturnValue),\n        next: this.transformToObservable(returnedValueWrapper),\n      });\n    }\n    return currentReturnValue;\n  }\n\n  public assignClientsToProperties(instance: Controller | Injectable) {\n    for (const {\n      property,\n      metadata,\n    } of this.metadataExplorer.scanForClientHooks(instance as object)) {\n      const client = this.clientFactory.create(metadata);\n      this.clientsContainer.addClient(client);\n\n      this.assignClientToInstance(instance as object, property, client);\n    }\n  }\n\n  public assignClientToInstance<T = any>(\n    instance: Controller | Injectable,\n    property: string,\n    client: T,\n  ) {\n    Reflect.set(instance as object, property, client);\n  }\n\n  public createRequestScopedHandler(\n    wrapper: InstanceWrapper,\n    pattern: PatternMetadata,\n    moduleRef: Module,\n    moduleKey: string,\n    methodKey: string,\n    defaultCallMetadata: Record<string, any> = DEFAULT_CALLBACK_METADATA,\n    isEventHandler = false,\n  ) {\n    const collection = moduleRef.controllers;\n    const { instance } = wrapper;\n\n    const isTreeDurable = wrapper.isDependencyTreeDurable();\n\n    const requestScopedHandler: MessageHandler = async (...args: unknown[]) => {\n      try {\n        let contextId: ContextId;\n\n        let [dataOrContextHost] = args;\n        if (dataOrContextHost instanceof RequestContextHost) {\n          contextId = this.getContextId(dataOrContextHost, isTreeDurable);\n          args.shift();\n        } else {\n          const [data, reqCtx] = args;\n          const request = RequestContextHost.create(\n            pattern,\n            data,\n            reqCtx as BaseRpcContext,\n          );\n          contextId = this.getContextId(request, isTreeDurable);\n          dataOrContextHost = request;\n        }\n\n        const contextInstance = await this.injector.loadPerContext(\n          instance,\n          moduleRef,\n          collection,\n          contextId,\n        );\n        const proxy = this.contextCreator.create(\n          contextInstance,\n          contextInstance[methodKey],\n          moduleKey,\n          methodKey,\n          contextId,\n          wrapper.id,\n          defaultCallMetadata,\n        );\n\n        const returnValue = proxy(...args);\n        if (isEventHandler) {\n          return this.forkJoinHandlersIfAttached(\n            returnValue,\n            [dataOrContextHost, ...args],\n            requestScopedHandler,\n          );\n        }\n        return returnValue;\n      } catch (err) {\n        let exceptionFilter = this.exceptionFiltersCache.get(\n          instance[methodKey],\n        );\n        if (!exceptionFilter) {\n          exceptionFilter = this.exceptionFiltersContext.create(\n            instance,\n            instance[methodKey],\n            moduleKey,\n          );\n          this.exceptionFiltersCache.set(instance[methodKey], exceptionFilter);\n        }\n        const host = new ExecutionContextHost(args);\n        host.setType('rpc');\n        return exceptionFilter.handle(err, host);\n      }\n    };\n    return requestScopedHandler;\n  }\n\n  private getContextId<T extends RequestContext = any>(\n    request: T,\n    isTreeDurable: boolean,\n  ): ContextId {\n    const contextId = ContextIdFactory.getByRequest(request);\n    if (!request[REQUEST_CONTEXT_ID as any]) {\n      Object.defineProperty(request, REQUEST_CONTEXT_ID, {\n        value: contextId,\n        enumerable: false,\n        writable: false,\n        configurable: false,\n      });\n\n      const requestProviderValue = isTreeDurable ? contextId.payload : request;\n      this.container.registerRequestProvider(requestProviderValue, contextId);\n    }\n    return contextId;\n  }\n\n  public transformToObservable<T>(\n    resultOrDeferred: Observable<T> | Promise<T>,\n  ): Observable<T>;\n  public transformToObservable<T>(\n    resultOrDeferred: T,\n  ): never extends Observable<ObservedValueOf<T>>\n    ? Observable<T>\n    : Observable<ObservedValueOf<T>>;\n  public transformToObservable(resultOrDeferred: any) {\n    if (resultOrDeferred instanceof Promise) {\n      return fromPromise(resultOrDeferred).pipe(\n        mergeMap(val => (isObservable(val) ? val : of(val))),\n      );\n    }\n\n    if (isObservable(resultOrDeferred)) {\n      return resultOrDeferred;\n    }\n\n    return of(resultOrDeferred);\n  }\n}\n"]}