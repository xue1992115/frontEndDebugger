{"version":3,"file":"transform-pattern.utils.js","sourceRoot":"","sources":["transform-pattern.utils.ts"],"names":[],"mappings":";;;AAAA,oEAI2C;AAG3C;;;;;;;;;;;GAWG;AACH,SAAgB,uBAAuB,CAAC,OAAkB;IACxD,IAAI,IAAA,uBAAQ,EAAC,OAAO,CAAC,IAAI,IAAA,uBAAQ,EAAC,OAAO,CAAC,EAAE;QAC1C,OAAO,GAAG,OAAO,EAAE,CAAC;KACrB;IACD,IAAI,CAAC,IAAA,uBAAQ,EAAC,OAAO,CAAC,EAAE;QACtB,OAAO,OAAO,CAAC;KAChB;IAED,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CACpD,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAC1B,CAAC;IAEF,sFAAsF;IACtF,MAAM,mBAAmB,GAAG,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;QAC/C,IAAI,YAAY,GAAG,IAAI,GAAG,IAAI,CAAC;QAC/B,YAAY,IAAI,IAAA,uBAAQ,EAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YACpC,CAAC,CAAC,IAAI,uBAAuB,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG;YAC9C,CAAC,CAAC,uBAAuB,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;QAC1C,OAAO,YAAY,CAAC;IACtB,CAAC,CAAC,CAAC;IAEH,MAAM,KAAK,GAAG,mBAAmB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC5C,OAAO,IAAI,KAAK,GAAG,CAAC;AACtB,CAAC;AAvBD,0DAuBC","sourcesContent":["import {\n  isObject,\n  isString,\n  isNumber,\n} from '@nestjs/common/utils/shared.utils';\nimport { MsPattern } from '../interfaces';\n\n/**\n * Transforms the Pattern to Route.\n * 1. If Pattern is a `string`, it will be returned as it is.\n * 2. If Pattern is a `number`, it will be converted to `string`.\n * 3. If Pattern is a `JSON` object, it will be transformed to Route. For that end,\n * the function will sort properties of `JSON` Object and creates `route` string\n * according to the following template:\n * <key1>:<value1>/<key2>:<value2>/.../<keyN>:<valueN>\n *\n * @param  {MsPattern} pattern - client pattern\n * @returns string\n */\nexport function transformPatternToRoute(pattern: MsPattern): string {\n  if (isString(pattern) || isNumber(pattern)) {\n    return `${pattern}`;\n  }\n  if (!isObject(pattern)) {\n    return pattern;\n  }\n\n  const sortedKeys = Object.keys(pattern).sort((a, b) =>\n    ('' + a).localeCompare(b),\n  );\n\n  // Creates the array of Pattern params from sorted keys and their corresponding values\n  const sortedPatternParams = sortedKeys.map(key => {\n    let partialRoute = `\"${key}\":`;\n    partialRoute += isString(pattern[key])\n      ? `\"${transformPatternToRoute(pattern[key])}\"`\n      : transformPatternToRoute(pattern[key]);\n    return partialRoute;\n  });\n\n  const route = sortedPatternParams.join(',');\n  return `{${route}}`;\n}\n"]}