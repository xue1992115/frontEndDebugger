{"version":3,"file":"mqtt-options.interface.js","sourceRoot":"","sources":["mqtt-options.interface.ts"],"names":[],"mappings":"","sourcesContent":["/**\n * @see https://github.com/mqttjs/MQTT.js/\n *\n * @publicApi\n */\nexport declare type QoS = 0 | 1 | 2;\n\nexport interface MqttClientOptions extends ISecureClientOptions {\n  port?: number; // port is made into a number subsequently\n  host?: string; // host does NOT include port\n  hostname?: string;\n  path?: string;\n  protocol?: 'wss' | 'ws' | 'mqtt' | 'mqtts' | 'tcp' | 'ssl' | 'wx' | 'wxs';\n\n  wsOptions?: {\n    [x: string]: any;\n  };\n  /**\n   *  10 seconds, set to 0 to disable\n   */\n  keepalive?: number;\n  /**\n   * 'mqttjs_' + Math.random().toString(16).substr(2, 8)\n   */\n  clientId?: string;\n  /**\n   * 'MQTT'\n   */\n  protocolId?: string;\n  /**\n   * 4\n   */\n  protocolVersion?: number;\n  /**\n   * true, set to false to receive QoS 1 and 2 messages while offline\n   */\n  clean?: boolean;\n  /**\n   * 1000 milliseconds, interval between two reconnections\n   */\n  reconnectPeriod?: number;\n  /**\n   * 30 * 1000 milliseconds, time to wait before a CONNACK is received\n   */\n  connectTimeout?: number;\n  /**\n   * the username required by your broker, if any\n   */\n  username?: string;\n  /**\n   * the password required by your broker, if any\n   */\n  password?: string;\n  /**\n   * a any for the incoming packets\n   */\n  incomingStore?: any;\n  /**\n   * a any for the outgoing packets\n   */\n  outgoingStore?: any;\n  queueQoSZero?: boolean;\n  reschedulePings?: boolean;\n  servers?: Array<{\n    host: string;\n    port: number;\n  }>;\n  /**\n   * true, set to false to disable re-subscribe functionality\n   */\n  resubscribe?: boolean;\n  /**\n   * a message that will sent by the broker automatically when the client disconnect badly.\n   */\n  will?: {\n    /**\n     * the topic to publish\n     */\n    topic: string;\n    /**\n     * the message to publish\n     */\n    payload: string;\n    /**\n     * the QoS\n     */\n    qos: QoS;\n    /**\n     * the retain flag\n     */\n    retain: boolean;\n  };\n  transformWsUrl?: (url: string, options: any, client: any) => string;\n}\nexport interface ISecureClientOptions {\n  /**\n   * optional private keys in PEM format\n   */\n  key?: string | string[] | Buffer | Buffer[] | Record<string, any>[];\n  /**\n   * optional cert chains in PEM format\n   */\n  cert?: string | string[] | Buffer | Buffer[];\n  /**\n   * Optionally override the trusted CA certificates in PEM format\n   */\n  ca?: string | string[] | Buffer | Buffer[];\n  rejectUnauthorized?: boolean;\n}\nexport interface IClientPublishOptions {\n  /**\n   * the QoS\n   */\n  qos: QoS;\n  /**\n   * the retain flag\n   */\n  retain?: boolean;\n  /**\n   * whether or not mark a message as duplicate\n   */\n  dup?: boolean;\n}\nexport interface IClientSubscribeOptions {\n  /**\n   * the QoS\n   */\n  qos: QoS;\n}\nexport interface IClientReconnectOptions {\n  /**\n   * a any for the incoming packets\n   */\n  incomingStore?: any;\n  /**\n   * a any for the outgoing packets\n   */\n  outgoingStore?: any;\n}\n"]}