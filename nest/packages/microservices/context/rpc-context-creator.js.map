{"version":3,"file":"rpc-context-creator.js","sourceRoot":"","sources":["rpc-context-creator.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  CUSTOM_ROUTE_ARGS_METADATA,\n  PARAMTYPES_METADATA,\n} from '@nestjs/common/constants';\nimport {\n  ContextType,\n  Controller,\n  PipeTransform,\n} from '@nestjs/common/interfaces';\nimport { isEmpty } from '@nestjs/common/utils/shared.utils';\nimport { FORBIDDEN_MESSAGE } from '@nestjs/core/guards/constants';\nimport { GuardsConsumer } from '@nestjs/core/guards/guards-consumer';\nimport { GuardsContextCreator } from '@nestjs/core/guards/guards-context-creator';\nimport {\n  ContextUtils,\n  ParamProperties,\n} from '@nestjs/core/helpers/context-utils';\nimport { ExecutionContextHost } from '@nestjs/core/helpers/execution-context-host';\nimport { HandlerMetadataStorage } from '@nestjs/core/helpers/handler-metadata-storage';\nimport { ParamsMetadata } from '@nestjs/core/helpers/interfaces';\nimport { STATIC_CONTEXT } from '@nestjs/core/injector/constants';\nimport { InterceptorsConsumer } from '@nestjs/core/interceptors/interceptors-consumer';\nimport { InterceptorsContextCreator } from '@nestjs/core/interceptors/interceptors-context-creator';\nimport { PipesConsumer } from '@nestjs/core/pipes/pipes-consumer';\nimport { PipesContextCreator } from '@nestjs/core/pipes/pipes-context-creator';\nimport { Observable } from 'rxjs';\nimport { PARAM_ARGS_METADATA } from '../constants';\nimport { RpcException } from '../exceptions';\nimport { RpcParamsFactory } from '../factories/rpc-params-factory';\nimport { ExceptionFiltersContext } from './exception-filters-context';\nimport { DEFAULT_CALLBACK_METADATA } from './rpc-metadata-constants';\nimport { RpcProxy } from './rpc-proxy';\n\ntype RpcParamProperties = ParamProperties & { metatype?: any };\nexport interface RpcHandlerMetadata {\n  argsLength: number;\n  paramtypes: any[];\n  getParamsMetadata: (moduleKey: string) => RpcParamProperties[];\n}\n\nexport class RpcContextCreator {\n  private readonly contextUtils = new ContextUtils();\n  private readonly rpcParamsFactory = new RpcParamsFactory();\n  private readonly handlerMetadataStorage =\n    new HandlerMetadataStorage<RpcHandlerMetadata>();\n\n  constructor(\n    private readonly rpcProxy: RpcProxy,\n    private readonly exceptionFiltersContext: ExceptionFiltersContext,\n    private readonly pipesContextCreator: PipesContextCreator,\n    private readonly pipesConsumer: PipesConsumer,\n    private readonly guardsContextCreator: GuardsContextCreator,\n    private readonly guardsConsumer: GuardsConsumer,\n    private readonly interceptorsContextCreator: InterceptorsContextCreator,\n    private readonly interceptorsConsumer: InterceptorsConsumer,\n  ) {}\n\n  public create<T extends ParamsMetadata = ParamsMetadata>(\n    instance: Controller,\n    callback: (...args: unknown[]) => Observable<any>,\n    moduleKey: string,\n    methodName: string,\n    contextId = STATIC_CONTEXT,\n    inquirerId?: string,\n    defaultCallMetadata: Record<string, any> = DEFAULT_CALLBACK_METADATA,\n  ): (...args: any[]) => Promise<Observable<any>> {\n    const contextType: ContextType = 'rpc';\n    const { argsLength, paramtypes, getParamsMetadata } = this.getMetadata<T>(\n      instance,\n      methodName,\n      defaultCallMetadata,\n      contextType,\n    );\n\n    const exceptionHandler = this.exceptionFiltersContext.create(\n      instance,\n      callback,\n      moduleKey,\n      contextId,\n      inquirerId,\n    );\n    const pipes = this.pipesContextCreator.create(\n      instance,\n      callback,\n      moduleKey,\n      contextId,\n      inquirerId,\n    );\n    const guards = this.guardsContextCreator.create(\n      instance,\n      callback,\n      moduleKey,\n      contextId,\n      inquirerId,\n    );\n    const interceptors = this.interceptorsContextCreator.create(\n      instance,\n      callback,\n      moduleKey,\n      contextId,\n      inquirerId,\n    );\n\n    const paramsMetadata = getParamsMetadata(moduleKey);\n    const paramsOptions = paramsMetadata\n      ? this.contextUtils.mergeParamsMetatypes(paramsMetadata, paramtypes)\n      : [];\n    const fnApplyPipes = this.createPipesFn(pipes, paramsOptions);\n\n    const fnCanActivate = this.createGuardsFn(\n      guards,\n      instance,\n      callback,\n      contextType,\n    );\n\n    const handler = (initialArgs: unknown[], args: unknown[]) => async () => {\n      if (fnApplyPipes) {\n        await fnApplyPipes(initialArgs, ...args);\n        return callback.apply(instance, initialArgs);\n      }\n      return callback.apply(instance, args);\n    };\n\n    return this.rpcProxy.create(async (...args: unknown[]) => {\n      const initialArgs = this.contextUtils.createNullArray(argsLength);\n      fnCanActivate && (await fnCanActivate(args));\n\n      return this.interceptorsConsumer.intercept(\n        interceptors,\n        args,\n        instance,\n        callback,\n        handler(initialArgs, args),\n        contextType,\n      ) as Promise<Observable<unknown>>;\n    }, exceptionHandler);\n  }\n\n  public reflectCallbackParamtypes(\n    instance: Controller,\n    callback: (...args: unknown[]) => unknown,\n  ): unknown[] {\n    return Reflect.getMetadata(PARAMTYPES_METADATA, instance, callback.name);\n  }\n\n  public createGuardsFn<TContext extends string = ContextType>(\n    guards: any[],\n    instance: Controller,\n    callback: (...args: unknown[]) => unknown,\n    contextType?: TContext,\n  ): Function | null {\n    const canActivateFn = async (args: any[]) => {\n      const canActivate = await this.guardsConsumer.tryActivate<TContext>(\n        guards,\n        args,\n        instance,\n        callback,\n        contextType,\n      );\n      if (!canActivate) {\n        throw new RpcException(FORBIDDEN_MESSAGE);\n      }\n    };\n    return guards.length ? canActivateFn : null;\n  }\n\n  public getMetadata<TMetadata, TContext extends ContextType = ContextType>(\n    instance: Controller,\n    methodName: string,\n    defaultCallMetadata: Record<string, any>,\n    contextType: TContext,\n  ): RpcHandlerMetadata {\n    const cacheMetadata = this.handlerMetadataStorage.get(instance, methodName);\n    if (cacheMetadata) {\n      return cacheMetadata;\n    }\n    const metadata =\n      this.contextUtils.reflectCallbackMetadata<TMetadata>(\n        instance,\n        methodName,\n        PARAM_ARGS_METADATA,\n      ) || defaultCallMetadata;\n    const keys = Object.keys(metadata);\n    const argsLength = this.contextUtils.getArgumentsLength(keys, metadata);\n    const paramtypes = this.contextUtils.reflectCallbackParamtypes(\n      instance,\n      methodName,\n    );\n    const contextFactory = this.contextUtils.getContextFactory(\n      contextType,\n      instance,\n      instance[methodName],\n    );\n    const getParamsMetadata = (moduleKey: string) =>\n      this.exchangeKeysForValues(\n        keys,\n        metadata,\n        moduleKey,\n        this.rpcParamsFactory,\n        contextFactory,\n      );\n\n    const handlerMetadata: RpcHandlerMetadata = {\n      argsLength,\n      paramtypes,\n      getParamsMetadata,\n    };\n    this.handlerMetadataStorage.set(instance, methodName, handlerMetadata);\n    return handlerMetadata;\n  }\n\n  public exchangeKeysForValues<TMetadata = any>(\n    keys: string[],\n    metadata: TMetadata,\n    moduleContext: string,\n    paramsFactory: RpcParamsFactory,\n    contextFactory: (args: unknown[]) => ExecutionContextHost,\n  ): ParamProperties[] {\n    this.pipesContextCreator.setModuleContext(moduleContext);\n\n    return keys.map(key => {\n      const { index, data, pipes: pipesCollection } = metadata[key];\n      const pipes =\n        this.pipesContextCreator.createConcreteContext(pipesCollection);\n      const type = this.contextUtils.mapParamType(key);\n\n      if (key.includes(CUSTOM_ROUTE_ARGS_METADATA)) {\n        const { factory } = metadata[key];\n        const customExtractValue = this.contextUtils.getCustomFactory(\n          factory,\n          data,\n          contextFactory,\n        );\n        return { index, extractValue: customExtractValue, type, data, pipes };\n      }\n      const numericType = Number(type);\n      const extractValue = (...args: unknown[]) =>\n        paramsFactory.exchangeKeyForValue(numericType, data, args);\n\n      return { index, extractValue, type: numericType, data, pipes };\n    });\n  }\n\n  public createPipesFn(\n    pipes: PipeTransform[],\n    paramsOptions: (ParamProperties & { metatype?: unknown })[],\n  ) {\n    const pipesFn = async (args: unknown[], ...params: unknown[]) => {\n      const resolveParamValue = async (\n        param: ParamProperties & { metatype?: unknown },\n      ) => {\n        const {\n          index,\n          extractValue,\n          type,\n          data,\n          metatype,\n          pipes: paramPipes,\n        } = param;\n        const value = extractValue(...params);\n\n        args[index] = await this.getParamValue(\n          value,\n          { metatype, type, data },\n          pipes.concat(paramPipes),\n        );\n      };\n      await Promise.all(paramsOptions.map(resolveParamValue));\n    };\n    return paramsOptions.length ? pipesFn : null;\n  }\n\n  public async getParamValue<T>(\n    value: T,\n    { metatype, type, data }: { metatype: any; type: any; data: any },\n    pipes: PipeTransform[],\n  ): Promise<any> {\n    return isEmpty(pipes)\n      ? value\n      : this.pipesConsumer.apply(value, { metatype, type, data }, pipes);\n  }\n}\n"]}