{"version":3,"file":"message-pattern.decorator.js","sourceRoot":"","sources":["message-pattern.decorator.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  isObject,\n  isNumber,\n  isNil,\n  isSymbol,\n} from '@nestjs/common/utils/shared.utils';\n/* eslint-disable @typescript-eslint/no-use-before-define */\nimport {\n  PATTERN_HANDLER_METADATA,\n  PATTERN_METADATA,\n  TRANSPORT_METADATA,\n  PATTERN_EXTRAS_METADATA,\n} from '../constants';\nimport { PatternHandler } from '../enums/pattern-handler.enum';\nimport { PatternMetadata } from '../interfaces/pattern-metadata.interface';\nimport { Transport } from '../enums';\n\nexport enum GrpcMethodStreamingType {\n  NO_STREAMING = 'no_stream',\n  RX_STREAMING = 'rx_stream',\n  PT_STREAMING = 'pt_stream',\n}\n\n/**\n * Subscribes to incoming messages which fulfils chosen pattern.\n *\n * @publicApi\n */\nexport const MessagePattern: {\n  <T = PatternMetadata | string>(metadata?: T): MethodDecorator;\n  <T = PatternMetadata | string>(\n    metadata?: T,\n    transport?: Transport | symbol,\n  ): MethodDecorator;\n  <T = PatternMetadata | string>(\n    metadata?: T,\n    extras?: Record<string, any>,\n  ): MethodDecorator;\n  <T = PatternMetadata | string>(\n    metadata?: T,\n    transport?: Transport | symbol,\n    extras?: Record<string, any>,\n  ): MethodDecorator;\n} = <T = PatternMetadata | string>(\n  metadata?: T,\n  transportOrExtras?: Transport | symbol | Record<string, any>,\n  maybeExtras?: Record<string, any>,\n): MethodDecorator => {\n  let transport: Transport | symbol;\n  let extras: Record<string, any>;\n  if (\n    (isNumber(transportOrExtras) || isSymbol(transportOrExtras)) &&\n    isNil(maybeExtras)\n  ) {\n    transport = transportOrExtras;\n  } else if (isObject(transportOrExtras) && isNil(maybeExtras)) {\n    extras = transportOrExtras;\n  } else {\n    transport = transportOrExtras as Transport | symbol;\n    extras = maybeExtras;\n  }\n  return (\n    target: object,\n    key: string | symbol,\n    descriptor: PropertyDescriptor,\n  ) => {\n    Reflect.defineMetadata(\n      PATTERN_METADATA,\n      [].concat(metadata),\n      descriptor.value,\n    );\n    Reflect.defineMetadata(\n      PATTERN_HANDLER_METADATA,\n      PatternHandler.MESSAGE,\n      descriptor.value,\n    );\n    Reflect.defineMetadata(TRANSPORT_METADATA, transport, descriptor.value);\n    Reflect.defineMetadata(\n      PATTERN_EXTRAS_METADATA,\n      {\n        ...Reflect.getMetadata(PATTERN_EXTRAS_METADATA, descriptor.value),\n        ...extras,\n      },\n      descriptor.value,\n    );\n    return descriptor;\n  };\n};\n\n/**\n * Registers gRPC method handler for specified service.\n */\nexport function GrpcMethod(service?: string): MethodDecorator;\nexport function GrpcMethod(service: string, method?: string): MethodDecorator;\nexport function GrpcMethod(service: string, method?: string): MethodDecorator {\n  return (\n    target: object,\n    key: string | symbol,\n    descriptor: PropertyDescriptor,\n  ) => {\n    const metadata = createGrpcMethodMetadata(target, key, service, method);\n    return MessagePattern(metadata, Transport.GRPC)(target, key, descriptor);\n  };\n}\n\n/**\n * Registers gRPC call through RX handler for service and method\n *\n * @param service String parameter reflecting the name of service definition from proto file\n */\nexport function GrpcStreamMethod(service?: string): MethodDecorator;\n/**\n * @param service String parameter reflecting the name of service definition from proto file\n * @param method Optional string parameter reflecting the name of method inside of a service definition coming after rpc keyword\n */\nexport function GrpcStreamMethod(\n  service: string,\n  method?: string,\n): MethodDecorator;\nexport function GrpcStreamMethod(\n  service: string,\n  method?: string,\n): MethodDecorator {\n  return (\n    target: object,\n    key: string | symbol,\n    descriptor: PropertyDescriptor,\n  ) => {\n    const metadata = createGrpcMethodMetadata(\n      target,\n      key,\n      service,\n      method,\n      GrpcMethodStreamingType.RX_STREAMING,\n    );\n    return MessagePattern(metadata, Transport.GRPC)(target, key, descriptor);\n  };\n}\n\n/**\n * Registers gRPC call pass through handler for service and method\n *\n * @param service String parameter reflecting the name of service definition from proto file\n */\nexport function GrpcStreamCall(service?: string): MethodDecorator;\n/**\n * @param service String parameter reflecting the name of service definition from proto file\n * @param method Optional string parameter reflecting the name of method inside of a service definition coming after rpc keyword\n */\nexport function GrpcStreamCall(\n  service: string,\n  method?: string,\n): MethodDecorator;\nexport function GrpcStreamCall(\n  service: string,\n  method?: string,\n): MethodDecorator {\n  return (\n    target: object,\n    key: string | symbol,\n    descriptor: PropertyDescriptor,\n  ) => {\n    const metadata = createGrpcMethodMetadata(\n      target,\n      key,\n      service,\n      method,\n      GrpcMethodStreamingType.PT_STREAMING,\n    );\n    return MessagePattern(metadata, Transport.GRPC)(target, key, descriptor);\n  };\n}\n\nexport function createGrpcMethodMetadata(\n  target: object,\n  key: string | symbol,\n  service: string | undefined,\n  method: string | undefined,\n  streaming = GrpcMethodStreamingType.NO_STREAMING,\n) {\n  const capitalizeFirstLetter = (str: string) =>\n    str.charAt(0).toUpperCase() + str.slice(1);\n\n  if (!service) {\n    const { name } = target.constructor;\n    return {\n      service: name,\n      rpc: capitalizeFirstLetter(key as string),\n      streaming,\n    };\n  }\n  if (service && !method) {\n    return { service, rpc: capitalizeFirstLetter(key as string), streaming };\n  }\n  return { service, rpc: method, streaming };\n}\n"]}