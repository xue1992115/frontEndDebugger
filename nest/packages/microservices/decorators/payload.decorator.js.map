{"version":3,"file":"payload.decorator.js","sourceRoot":"","sources":["payload.decorator.ts"],"names":[],"mappings":";;;AACA,oEAA2D;AAC3D,sDAAoE;AAmDpE,SAAgB,OAAO,CACrB,cAA+D,EAC/D,GAAG,KAA8C;IAEjD,OAAO,IAAA,0CAA4B,EAAC,iCAAY,CAAC,OAAO,CAAC,CACvD,cAAc,EACd,GAAG,KAAK,CACT,CAAC;AACJ,CAAC;AARD,0BAQC","sourcesContent":["import { PipeTransform, Type } from '@nestjs/common';\nimport { RpcParamtype } from '../enums/rpc-paramtype.enum';\nimport { createPipesRpcParamDecorator } from '../utils/param.utils';\n\n/**\n * Microservice message pattern payload parameter decorator.\n *\n * @publicApi\n */\nexport function Payload(): ParameterDecorator;\n/**\n * Microservice message pattern payload parameter decorator.\n *\n * Example:\n * ```typescript\n * create(@Payload(new ValidationPipe()) createDto: CreateCatDto)\n * ```\n * @param pipes one or more pipes - either instances or classes - to apply to\n * the bound parameter.\n *\n * @publicApi\n */\nexport function Payload(\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\n): ParameterDecorator;\n/**\n * Microservice message pattern payload parameter decorator. Extracts a property from the\n * payload object. May also apply pipes to the bound parameter.\n *\n * For example, extracting all params:\n * ```typescript\n * findMany(@Payload() ids: string[])\n * ```\n *\n * For example, extracting a single param:\n * ```typescript\n * create(@Payload('data') createDto: { data: string })\n * ```\n *\n * For example, extracting a single param with pipe:\n * ```typescript\n * create(@Payload('data', new ValidationPipe()) createDto: { data: string })\n * ```\n * @param propertyKey name of single property to extract from the message payload\n * @param pipes one or more pipes - either instances or classes - to apply to\n * the bound parameter.\n *\n * @publicApi\n */\nexport function Payload(\n  propertyKey?: string,\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\n): ParameterDecorator;\nexport function Payload(\n  propertyOrPipe?: string | (Type<PipeTransform> | PipeTransform),\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\n): ParameterDecorator {\n  return createPipesRpcParamDecorator(RpcParamtype.PAYLOAD)(\n    propertyOrPipe,\n    ...pipes,\n  );\n}\n"]}