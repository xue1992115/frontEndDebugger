{"version":3,"file":"event-pattern.decorator.js","sourceRoot":"","sources":["event-pattern.decorator.ts"],"names":[],"mappings":";;;AAAA,oEAK2C;AAC3C,4CAKsB;AACtB,wEAA+D;AAG/D;;;;GAIG;AACI,MAAM,YAAY,GASrB,CACF,QAAY,EACZ,iBAA4D,EAC5D,WAAiC,EAChB,EAAE;IACnB,IAAI,SAA6B,CAAC;IAClC,IAAI,MAA2B,CAAC;IAChC,IACE,CAAC,IAAA,uBAAQ,EAAC,iBAAiB,CAAC,IAAI,IAAA,uBAAQ,EAAC,iBAAiB,CAAC,CAAC;QAC5D,IAAA,oBAAK,EAAC,WAAW,CAAC,EAClB;QACA,SAAS,GAAG,iBAAiB,CAAC;KAC/B;SAAM,IAAI,IAAA,uBAAQ,EAAC,iBAAiB,CAAC,IAAI,IAAA,oBAAK,EAAC,WAAW,CAAC,EAAE;QAC5D,MAAM,GAAG,iBAAiB,CAAC;KAC5B;SAAM;QACL,SAAS,GAAG,iBAAuC,CAAC;QACpD,MAAM,GAAG,WAAW,CAAC;KACtB;IACD,OAAO,CACL,MAAc,EACd,GAAoB,EACpB,UAA8B,EAC9B,EAAE;QACF,OAAO,CAAC,cAAc,CACpB,4BAAgB,EAChB,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,EACnB,UAAU,CAAC,KAAK,CACjB,CAAC;QACF,OAAO,CAAC,cAAc,CACpB,oCAAwB,EACxB,qCAAc,CAAC,KAAK,EACpB,UAAU,CAAC,KAAK,CACjB,CAAC;QACF,OAAO,CAAC,cAAc,CAAC,8BAAkB,EAAE,SAAS,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC;QACxE,OAAO,CAAC,cAAc,CACpB,mCAAuB,kCAElB,OAAO,CAAC,WAAW,CAAC,mCAAuB,EAAE,UAAU,CAAC,KAAK,CAAC,GAC9D,MAAM,GAEX,UAAU,CAAC,KAAK,CACjB,CAAC;QACF,OAAO,UAAU,CAAC;IACpB,CAAC,CAAC;AACJ,CAAC,CAAC;AArDW,QAAA,YAAY,gBAqDvB","sourcesContent":["import {\n  isObject,\n  isNumber,\n  isNil,\n  isSymbol,\n} from '@nestjs/common/utils/shared.utils';\nimport {\n  PATTERN_HANDLER_METADATA,\n  PATTERN_METADATA,\n  TRANSPORT_METADATA,\n  PATTERN_EXTRAS_METADATA,\n} from '../constants';\nimport { PatternHandler } from '../enums/pattern-handler.enum';\nimport { Transport } from '../enums';\n\n/**\n * Subscribes to incoming events which fulfils chosen pattern.\n *\n * @publicApi\n */\nexport const EventPattern: {\n  <T = string>(metadata?: T): MethodDecorator;\n  <T = string>(metadata?: T, transport?: Transport | symbol): MethodDecorator;\n  <T = string>(metadata?: T, extras?: Record<string, any>): MethodDecorator;\n  <T = string>(\n    metadata?: T,\n    transport?: Transport | symbol,\n    extras?: Record<string, any>,\n  ): MethodDecorator;\n} = <T = string>(\n  metadata?: T,\n  transportOrExtras?: Transport | symbol | Record<string, any>,\n  maybeExtras?: Record<string, any>,\n): MethodDecorator => {\n  let transport: Transport | symbol;\n  let extras: Record<string, any>;\n  if (\n    (isNumber(transportOrExtras) || isSymbol(transportOrExtras)) &&\n    isNil(maybeExtras)\n  ) {\n    transport = transportOrExtras;\n  } else if (isObject(transportOrExtras) && isNil(maybeExtras)) {\n    extras = transportOrExtras;\n  } else {\n    transport = transportOrExtras as Transport | symbol;\n    extras = maybeExtras;\n  }\n  return (\n    target: object,\n    key: string | symbol,\n    descriptor: PropertyDescriptor,\n  ) => {\n    Reflect.defineMetadata(\n      PATTERN_METADATA,\n      [].concat(metadata),\n      descriptor.value,\n    );\n    Reflect.defineMetadata(\n      PATTERN_HANDLER_METADATA,\n      PatternHandler.EVENT,\n      descriptor.value,\n    );\n    Reflect.defineMetadata(TRANSPORT_METADATA, transport, descriptor.value);\n    Reflect.defineMetadata(\n      PATTERN_EXTRAS_METADATA,\n      {\n        ...Reflect.getMetadata(PATTERN_EXTRAS_METADATA, descriptor.value),\n        ...extras,\n      },\n      descriptor.value,\n    );\n    return descriptor;\n  };\n};\n"]}