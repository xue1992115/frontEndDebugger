{"version":3,"file":"microservice-configuration.interface.js","sourceRoot":"","sources":["microservice-configuration.interface.ts"],"names":[],"mappings":"","sourcesContent":["import { Type } from '@nestjs/common';\nimport { ConnectionOptions } from 'tls';\nimport { Transport } from '../enums/transport.enum';\nimport { ChannelOptions } from '../external/grpc-options.interface';\nimport {\n  ConsumerConfig,\n  ConsumerRunConfig,\n  ConsumerSubscribeTopic,\n  KafkaConfig,\n  ProducerConfig,\n  ProducerRecord,\n} from '../external/kafka.interface';\nimport { MqttClientOptions, QoS } from '../external/mqtt-options.interface';\nimport { IORedisOptions } from '../external/redis.interface';\nimport { RmqUrl } from '../external/rmq-url.interface';\nimport { TcpSocket } from '../helpers';\nimport { CustomTransportStrategy } from './custom-transport-strategy.interface';\nimport { Deserializer } from './deserializer.interface';\nimport { Serializer } from './serializer.interface';\n\nexport type MicroserviceOptions =\n  | GrpcOptions\n  | TcpOptions\n  | RedisOptions\n  | NatsOptions\n  | MqttOptions\n  | RmqOptions\n  | KafkaOptions\n  | CustomStrategy;\n\n/**\n * @publicApi\n */\nexport interface CustomStrategy {\n  strategy: CustomTransportStrategy;\n  options?: {};\n}\n\n/**\n * @publicApi\n */\nexport interface GrpcOptions {\n  transport?: Transport.GRPC;\n  options: {\n    url?: string;\n    maxSendMessageLength?: number;\n    maxReceiveMessageLength?: number;\n    maxMetadataSize?: number;\n    keepalive?: {\n      keepaliveTimeMs?: number;\n      keepaliveTimeoutMs?: number;\n      keepalivePermitWithoutCalls?: number;\n      http2MaxPingsWithoutData?: number;\n      http2MinTimeBetweenPingsMs?: number;\n      http2MinPingIntervalWithoutDataMs?: number;\n      http2MaxPingStrikes?: number;\n    };\n    channelOptions?: ChannelOptions;\n    credentials?: any;\n    protoPath: string | string[];\n    package: string | string[];\n    protoLoader?: string;\n    packageDefinition?: any;\n    loader?: {\n      keepCase?: boolean;\n      alternateCommentMode?: boolean;\n      longs?: Function;\n      enums?: Function;\n      bytes?: Function;\n      defaults?: boolean;\n      arrays?: boolean;\n      objects?: boolean;\n      oneofs?: boolean;\n      json?: boolean;\n      includeDirs?: string[];\n    };\n  };\n}\n\n/**\n * @publicApi\n */\nexport interface TcpOptions {\n  transport?: Transport.TCP;\n  options?: {\n    host?: string;\n    port?: number;\n    retryAttempts?: number;\n    retryDelay?: number;\n    serializer?: Serializer;\n    tlsOptions?: ConnectionOptions;\n    deserializer?: Deserializer;\n    socketClass?: Type<TcpSocket>;\n  };\n}\n\n/**\n * @publicApi\n */\nexport interface RedisOptions {\n  transport?: Transport.REDIS;\n  options?: {\n    host?: string;\n    port?: number;\n    retryAttempts?: number;\n    retryDelay?: number;\n    serializer?: Serializer;\n    deserializer?: Deserializer;\n  } & IORedisOptions;\n}\n\n/**\n * @publicApi\n */\nexport interface MqttOptions {\n  transport?: Transport.MQTT;\n  options?: MqttClientOptions & {\n    url?: string;\n    serializer?: Serializer;\n    deserializer?: Deserializer;\n    subscribeOptions?: {\n      /**\n       * The QoS\n       */\n      qos: QoS;\n      /*\n       * No local flag\n       * */\n      nl?: boolean;\n      /*\n       * Retain as Published flag\n       * */\n      rap?: boolean;\n      /*\n       * Retain Handling option\n       * */\n      rh?: number;\n    };\n    userProperties?: Record<string, string | string[]>;\n  };\n}\n\n/**\n * @publicApi\n */\nexport interface NatsOptions {\n  transport?: Transport.NATS;\n  options?: {\n    headers?: Record<string, string>;\n    authenticator?: any;\n    debug?: boolean;\n    ignoreClusterUpdates?: boolean;\n    inboxPrefix?: string;\n    encoding?: string;\n    name?: string;\n    user?: string;\n    pass?: string;\n    maxPingOut?: number;\n    maxReconnectAttempts?: number;\n    reconnectTimeWait?: number;\n    reconnectJitter?: number;\n    reconnectJitterTLS?: number;\n    reconnectDelayHandler?: any;\n    servers?: string[] | string;\n    nkey?: any;\n    reconnect?: boolean;\n    pedantic?: boolean;\n    tls?: any;\n    queue?: string;\n    serializer?: Serializer;\n    deserializer?: Deserializer;\n    userJWT?: string;\n    nonceSigner?: any;\n    userCreds?: any;\n    useOldRequestStyle?: boolean;\n    pingInterval?: number;\n    preserveBuffers?: boolean;\n    waitOnFirstConnect?: boolean;\n    verbose?: boolean;\n    noEcho?: boolean;\n    noRandomize?: boolean;\n    timeout?: number;\n    token?: string;\n    yieldTime?: number;\n    tokenHandler?: any;\n    [key: string]: any;\n  };\n}\n\n/**\n * @publicApi\n */\nexport interface RmqOptions {\n  transport?: Transport.RMQ;\n  options?: {\n    urls?: string[] | RmqUrl[];\n    queue?: string;\n    prefetchCount?: number;\n    isGlobalPrefetchCount?: boolean;\n    queueOptions?: any; // AmqplibQueueOptions;\n    socketOptions?: any; // AmqpConnectionManagerSocketOptions;\n    noAck?: boolean;\n    serializer?: Serializer;\n    deserializer?: Deserializer;\n    replyQueue?: string;\n    persistent?: boolean;\n    headers?: Record<string, string>;\n    noAssert?: boolean;\n    /**\n     * Maximum number of connection attempts.\n     * Applies only to the consumer configuration.\n     * -1 === infinite\n     * @default -1\n     */\n    maxConnectionAttempts?: number;\n  };\n}\n\n/**\n * @publicApi\n */\nexport interface KafkaParserConfig {\n  keepBinary?: boolean;\n}\n\n/**\n * @publicApi\n */\nexport interface KafkaOptions {\n  transport?: Transport.KAFKA;\n  options?: {\n    /**\n     * Defaults to `\"-server\"` on server side and `\"-client\"` on client side.\n     */\n    postfixId?: string;\n    client?: KafkaConfig;\n    consumer?: ConsumerConfig;\n    run?: Omit<ConsumerRunConfig, 'eachBatch' | 'eachMessage'>;\n    subscribe?: Omit<ConsumerSubscribeTopic, 'topic'>;\n    producer?: ProducerConfig;\n    send?: Omit<ProducerRecord, 'topic' | 'messages'>;\n    serializer?: Serializer;\n    deserializer?: Deserializer;\n    parser?: KafkaParserConfig;\n    producerOnlyMode?: boolean;\n  };\n}\n"]}