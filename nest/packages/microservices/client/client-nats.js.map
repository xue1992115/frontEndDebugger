{"version":3,"file":"client-nats.js","sourceRoot":"","sources":["client-nats.ts"],"names":[],"mappings":"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","sourcesContent":["import { Logger } from '@nestjs/common/services/logger.service';\nimport { loadPackage } from '@nestjs/common/utils/load-package.util';\nimport { isObject } from '@nestjs/common/utils/shared.utils';\nimport { NATS_DEFAULT_URL } from '../constants';\nimport { NatsResponseJSONDeserializer } from '../deserializers/nats-response-json.deserializer';\nimport { EmptyResponseException } from '../errors/empty-response.exception';\nimport { Client, NatsMsg } from '../external/nats-client.interface';\nimport { NatsOptions, PacketId, ReadPacket, WritePacket } from '../interfaces';\nimport { NatsRecord } from '../record-builders';\nimport { NatsRecordSerializer } from '../serializers/nats-record.serializer';\nimport { ClientProxy } from './client-proxy';\n\nlet natsPackage = {} as any;\n\n/**\n * @publicApi\n */\nexport class ClientNats extends ClientProxy {\n  protected readonly logger = new Logger(ClientNats.name);\n  protected natsClient: Client;\n\n  constructor(protected readonly options: NatsOptions['options']) {\n    super();\n    natsPackage = loadPackage('nats', ClientNats.name, () => require('nats'));\n\n    this.initializeSerializer(options);\n    this.initializeDeserializer(options);\n  }\n\n  public async close() {\n    await this.natsClient?.close();\n    this.natsClient = null;\n  }\n\n  public async connect(): Promise<any> {\n    if (this.natsClient) {\n      return this.natsClient;\n    }\n    this.natsClient = await this.createClient();\n    this.handleStatusUpdates(this.natsClient);\n    return this.natsClient;\n  }\n\n  public createClient(): Promise<Client> {\n    const options: any = this.options || ({} as NatsOptions);\n    return natsPackage.connect({\n      servers: NATS_DEFAULT_URL,\n      ...options,\n    });\n  }\n\n  public async handleStatusUpdates(client: Client) {\n    for await (const status of client.status()) {\n      const data =\n        status.data && isObject(status.data)\n          ? JSON.stringify(status.data)\n          : status.data;\n\n      switch (status.type) {\n        case 'error':\n        case 'disconnect':\n          this.logger.error(\n            `NatsError: type: \"${status.type}\", data: \"${data}\".`,\n          );\n          break;\n\n        case 'pingTimer':\n          if (this.options.debug) {\n            this.logger.debug(\n              `NatsStatus: type: \"${status.type}\", data: \"${data}\".`,\n            );\n          }\n          break;\n\n        default:\n          this.logger.log(\n            `NatsStatus: type: \"${status.type}\", data: \"${data}\".`,\n          );\n          break;\n      }\n    }\n  }\n\n  public createSubscriptionHandler(\n    packet: ReadPacket & PacketId,\n    callback: (packet: WritePacket) => any,\n  ) {\n    return async (error: unknown | undefined, natsMsg: NatsMsg) => {\n      if (error) {\n        return callback({\n          err: error,\n        });\n      }\n      const rawPacket = natsMsg.data;\n      if (rawPacket?.length === 0) {\n        return callback({\n          err: new EmptyResponseException(\n            this.normalizePattern(packet.pattern),\n          ),\n          isDisposed: true,\n        });\n      }\n      const message = await this.deserializer.deserialize(rawPacket);\n      if (message.id && message.id !== packet.id) {\n        return undefined;\n      }\n      const { err, response, isDisposed } = message;\n      if (isDisposed || err) {\n        return callback({\n          err,\n          response,\n          isDisposed: true,\n        });\n      }\n      callback({\n        err,\n        response,\n      });\n    };\n  }\n\n  protected publish(\n    partialPacket: ReadPacket,\n    callback: (packet: WritePacket) => any,\n  ): () => void {\n    try {\n      const packet = this.assignPacketId(partialPacket);\n      const channel = this.normalizePattern(partialPacket.pattern);\n      const serializedPacket: NatsRecord = this.serializer.serialize(packet);\n      const inbox = natsPackage.createInbox();\n\n      const subscriptionHandler = this.createSubscriptionHandler(\n        packet,\n        callback,\n      );\n\n      const subscription = this.natsClient.subscribe(inbox, {\n        callback: subscriptionHandler,\n      });\n\n      const headers = this.mergeHeaders(serializedPacket.headers);\n      this.natsClient.publish(channel, serializedPacket.data, {\n        reply: inbox,\n        headers,\n      });\n\n      return () => subscription.unsubscribe();\n    } catch (err) {\n      callback({ err });\n    }\n  }\n\n  protected dispatchEvent(packet: ReadPacket): Promise<any> {\n    const pattern = this.normalizePattern(packet.pattern);\n    const serializedPacket: NatsRecord = this.serializer.serialize(packet);\n    const headers = this.mergeHeaders(serializedPacket.headers);\n\n    return new Promise<void>((resolve, reject) => {\n      try {\n        this.natsClient.publish(pattern, serializedPacket.data, {\n          headers,\n        });\n        resolve();\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n\n  protected initializeSerializer(options: NatsOptions['options']) {\n    this.serializer = options?.serializer ?? new NatsRecordSerializer();\n  }\n\n  protected initializeDeserializer(options: NatsOptions['options']) {\n    this.deserializer =\n      options?.deserializer ?? new NatsResponseJSONDeserializer();\n  }\n\n  protected mergeHeaders<THeaders = any>(requestHeaders?: THeaders) {\n    if (!requestHeaders && !this.options?.headers) {\n      return undefined;\n    }\n\n    const headers = requestHeaders ?? natsPackage.headers();\n\n    for (const [key, value] of Object.entries(this.options?.headers || {})) {\n      if (!headers.has(key)) {\n        headers.set(key, value);\n      }\n    }\n\n    return headers;\n  }\n}\n"]}