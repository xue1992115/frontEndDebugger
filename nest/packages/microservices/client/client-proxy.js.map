{"version":3,"file":"client-proxy.js","sourceRoot":"","sources":["client-proxy.ts"],"names":[],"mappings":"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","sourcesContent":["import { randomStringGenerator } from '@nestjs/common/utils/random-string-generator.util';\nimport { isNil } from '@nestjs/common/utils/shared.utils';\nimport {\n  connectable,\n  defer,\n  fromEvent,\n  merge,\n  Observable,\n  Observer,\n  Subject,\n  throwError as _throw,\n} from 'rxjs';\nimport { map, mergeMap, take } from 'rxjs/operators';\nimport { CONNECT_EVENT, ERROR_EVENT } from '../constants';\nimport { IncomingResponseDeserializer } from '../deserializers/incoming-response.deserializer';\nimport { InvalidMessageException } from '../errors/invalid-message.exception';\nimport {\n  ClientOptions,\n  KafkaOptions,\n  MqttOptions,\n  MsPattern,\n  NatsOptions,\n  PacketId,\n  ReadPacket,\n  RedisOptions,\n  RmqOptions,\n  TcpClientOptions,\n  WritePacket,\n} from '../interfaces';\nimport { ProducerDeserializer } from '../interfaces/deserializer.interface';\nimport { ProducerSerializer } from '../interfaces/serializer.interface';\nimport { IdentitySerializer } from '../serializers/identity.serializer';\nimport { transformPatternToRoute } from '../utils';\n\nexport abstract class ClientProxy {\n  public abstract connect(): Promise<any>;\n  public abstract close(): any;\n\n  protected routingMap = new Map<string, Function>();\n  protected serializer: ProducerSerializer;\n  protected deserializer: ProducerDeserializer;\n\n  public send<TResult = any, TInput = any>(\n    pattern: any,\n    data: TInput,\n  ): Observable<TResult> {\n    if (isNil(pattern) || isNil(data)) {\n      return _throw(() => new InvalidMessageException());\n    }\n    return defer(async () => this.connect()).pipe(\n      mergeMap(\n        () =>\n          new Observable((observer: Observer<TResult>) => {\n            const callback = this.createObserver(observer);\n            return this.publish({ pattern, data }, callback);\n          }),\n      ),\n    );\n  }\n\n  public emit<TResult = any, TInput = any>(\n    pattern: any,\n    data: TInput,\n  ): Observable<TResult> {\n    if (isNil(pattern) || isNil(data)) {\n      return _throw(() => new InvalidMessageException());\n    }\n    const source = defer(async () => this.connect()).pipe(\n      mergeMap(() => this.dispatchEvent({ pattern, data })),\n    );\n    const connectableSource = connectable(source, {\n      connector: () => new Subject(),\n      resetOnDisconnect: false,\n    });\n    connectableSource.connect();\n    return connectableSource;\n  }\n\n  protected abstract publish(\n    packet: ReadPacket,\n    callback: (packet: WritePacket) => void,\n  ): () => void;\n\n  protected abstract dispatchEvent<T = any>(packet: ReadPacket): Promise<T>;\n\n  protected createObserver<T>(\n    observer: Observer<T>,\n  ): (packet: WritePacket) => void {\n    return ({ err, response, isDisposed }: WritePacket) => {\n      if (err) {\n        return observer.error(this.serializeError(err));\n      } else if (response !== undefined && isDisposed) {\n        observer.next(this.serializeResponse(response));\n        return observer.complete();\n      } else if (isDisposed) {\n        return observer.complete();\n      }\n      observer.next(this.serializeResponse(response));\n    };\n  }\n\n  protected serializeError(err: any): any {\n    return err;\n  }\n\n  protected serializeResponse(response: any): any {\n    return response;\n  }\n\n  protected assignPacketId(packet: ReadPacket): ReadPacket & PacketId {\n    const id = randomStringGenerator();\n    return Object.assign(packet, { id });\n  }\n\n  protected connect$(\n    instance: any,\n    errorEvent = ERROR_EVENT,\n    connectEvent = CONNECT_EVENT,\n  ): Observable<any> {\n    const error$ = fromEvent(instance, errorEvent).pipe(\n      map((err: any) => {\n        throw err;\n      }),\n    );\n    const connect$ = fromEvent(instance, connectEvent);\n    return merge(error$, connect$).pipe(take(1));\n  }\n\n  protected getOptionsProp<\n    T extends ClientOptions['options'],\n    K extends keyof T,\n  >(obj: T, prop: K, defaultValue: T[K] = undefined) {\n    return (obj && obj[prop]) || defaultValue;\n  }\n\n  protected normalizePattern(pattern: MsPattern): string {\n    return transformPatternToRoute(pattern);\n  }\n\n  protected initializeSerializer(options: ClientOptions['options']) {\n    this.serializer =\n      (options &&\n        (\n          options as\n            | RedisOptions['options']\n            | NatsOptions['options']\n            | MqttOptions['options']\n            | TcpClientOptions['options']\n            | RmqOptions['options']\n            | KafkaOptions['options']\n        ).serializer) ||\n      new IdentitySerializer();\n  }\n\n  protected initializeDeserializer(options: ClientOptions['options']) {\n    this.deserializer =\n      (options &&\n        (\n          options as\n            | RedisOptions['options']\n            | NatsOptions['options']\n            | MqttOptions['options']\n            | TcpClientOptions['options']\n            | RmqOptions['options']\n            | KafkaOptions['options']\n        ).deserializer) ||\n      new IncomingResponseDeserializer();\n  }\n}\n"]}