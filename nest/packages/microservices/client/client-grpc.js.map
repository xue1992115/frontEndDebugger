{"version":3,"file":"client-grpc.js","sourceRoot":"","sources":["client-grpc.ts"],"names":[],"mappings":"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","sourcesContent":["import { Logger } from '@nestjs/common/services/logger.service';\nimport { loadPackage } from '@nestjs/common/utils/load-package.util';\nimport { isFunction, isObject } from '@nestjs/common/utils/shared.utils';\nimport { Observable, Subscription } from 'rxjs';\nimport { GRPC_DEFAULT_PROTO_LOADER, GRPC_DEFAULT_URL } from '../constants';\nimport { InvalidGrpcPackageException } from '../errors/invalid-grpc-package.exception';\nimport { InvalidGrpcServiceException } from '../errors/invalid-grpc-service.exception';\nimport { InvalidProtoDefinitionException } from '../errors/invalid-proto-definition.exception';\nimport { ClientGrpc, GrpcOptions } from '../interfaces';\nimport { ClientProxy } from './client-proxy';\nimport { GRPC_CANCELLED } from './constants';\nimport { ChannelOptions } from '../external/grpc-options.interface';\n\nlet grpcPackage: any = {};\nlet grpcProtoLoaderPackage: any = {};\n\n/**\n * @publicApi\n */\nexport class ClientGrpcProxy extends ClientProxy implements ClientGrpc {\n  protected readonly logger = new Logger(ClientProxy.name);\n  protected readonly clients = new Map<string, any>();\n  protected readonly url: string;\n  protected grpcClients = [];\n\n  constructor(protected readonly options: GrpcOptions['options']) {\n    super();\n    this.url = this.getOptionsProp(options, 'url') || GRPC_DEFAULT_URL;\n\n    const protoLoader =\n      this.getOptionsProp(options, 'protoLoader') || GRPC_DEFAULT_PROTO_LOADER;\n\n    grpcPackage = loadPackage('@grpc/grpc-js', ClientGrpcProxy.name, () =>\n      require('@grpc/grpc-js'),\n    );\n\n    grpcProtoLoaderPackage = loadPackage(\n      protoLoader,\n      ClientGrpcProxy.name,\n      () =>\n        protoLoader === GRPC_DEFAULT_PROTO_LOADER\n          ? require('@grpc/proto-loader')\n          : require(protoLoader),\n    );\n    this.grpcClients = this.createClients();\n  }\n\n  public getService<T extends {}>(name: string): T {\n    const grpcClient = this.createClientByServiceName(name);\n    const clientRef = this.getClient(name);\n    if (!clientRef) {\n      throw new InvalidGrpcServiceException(name);\n    }\n\n    const protoMethods = Object.keys(clientRef[name].prototype);\n    const grpcService = {} as T;\n\n    protoMethods.forEach(m => {\n      grpcService[m] = this.createServiceMethod(grpcClient, m);\n    });\n    return grpcService;\n  }\n\n  public getClientByServiceName<T = unknown>(name: string): T {\n    return this.clients.get(name) || this.createClientByServiceName(name);\n  }\n\n  public createClientByServiceName(name: string) {\n    const clientRef = this.getClient(name);\n    if (!clientRef) {\n      throw new InvalidGrpcServiceException(name);\n    }\n\n    const channelOptions: ChannelOptions =\n      this.options && this.options.channelOptions\n        ? this.options.channelOptions\n        : {};\n    if (this.options && this.options.maxSendMessageLength) {\n      channelOptions['grpc.max_send_message_length'] =\n        this.options.maxSendMessageLength;\n    }\n    if (this.options && this.options.maxReceiveMessageLength) {\n      channelOptions['grpc.max_receive_message_length'] =\n        this.options.maxReceiveMessageLength;\n    }\n    if (this.options && this.options.maxMetadataSize) {\n      channelOptions['grpc.max_metadata_size'] = this.options.maxMetadataSize;\n    }\n\n    const keepaliveOptions = this.getKeepaliveOptions();\n    const options: Record<string, string | number> = {\n      ...channelOptions,\n      ...keepaliveOptions,\n    };\n\n    const credentials =\n      this.options.credentials || grpcPackage.credentials.createInsecure();\n\n    const grpcClient = new clientRef[name](this.url, credentials, options);\n    this.clients.set(name, grpcClient);\n    return grpcClient;\n  }\n\n  public getKeepaliveOptions() {\n    if (!isObject(this.options.keepalive)) {\n      return {};\n    }\n    const keepaliveKeys: Record<\n      keyof GrpcOptions['options']['keepalive'],\n      string\n    > = {\n      keepaliveTimeMs: 'grpc.keepalive_time_ms',\n      keepaliveTimeoutMs: 'grpc.keepalive_timeout_ms',\n      keepalivePermitWithoutCalls: 'grpc.keepalive_permit_without_calls',\n      http2MaxPingsWithoutData: 'grpc.http2.max_pings_without_data',\n      http2MinTimeBetweenPingsMs: 'grpc.http2.min_time_between_pings_ms',\n      http2MinPingIntervalWithoutDataMs:\n        'grpc.http2.min_ping_interval_without_data_ms',\n      http2MaxPingStrikes: 'grpc.http2.max_ping_strikes',\n    };\n\n    const keepaliveOptions = {};\n    for (const [optionKey, optionValue] of Object.entries(\n      this.options.keepalive,\n    )) {\n      const key = keepaliveKeys[optionKey];\n      if (key === undefined) {\n        continue;\n      }\n      keepaliveOptions[key] = optionValue;\n    }\n    return keepaliveOptions;\n  }\n\n  public createServiceMethod(\n    client: any,\n    methodName: string,\n  ): (...args: unknown[]) => Observable<unknown> {\n    return client[methodName].responseStream\n      ? this.createStreamServiceMethod(client, methodName)\n      : this.createUnaryServiceMethod(client, methodName);\n  }\n\n  public createStreamServiceMethod(\n    client: unknown,\n    methodName: string,\n  ): (...args: any[]) => Observable<any> {\n    return (...args: any[]) => {\n      const isRequestStream = client[methodName].requestStream;\n      const stream = new Observable(observer => {\n        let isClientCanceled = false;\n        let upstreamSubscription: Subscription;\n\n        const upstreamSubjectOrData = args[0];\n        const maybeMetadata = args[1];\n\n        const isUpstreamSubject =\n          upstreamSubjectOrData && isFunction(upstreamSubjectOrData.subscribe);\n\n        const call =\n          isRequestStream && isUpstreamSubject\n            ? client[methodName](maybeMetadata)\n            : client[methodName](...args);\n\n        if (isRequestStream && isUpstreamSubject) {\n          upstreamSubscription = upstreamSubjectOrData.subscribe(\n            (val: unknown) => call.write(val),\n            (err: unknown) => call.emit('error', err),\n            () => call.end(),\n          );\n        }\n        call.on('data', (data: any) => observer.next(data));\n        call.on('error', (error: any) => {\n          if (error.details === GRPC_CANCELLED) {\n            call.destroy();\n            if (isClientCanceled) {\n              return;\n            }\n          }\n          observer.error(this.serializeError(error));\n        });\n        call.on('end', () => {\n          if (upstreamSubscription) {\n            upstreamSubscription.unsubscribe();\n            upstreamSubscription = null;\n          }\n          call.removeAllListeners();\n          observer.complete();\n        });\n        return () => {\n          if (upstreamSubscription) {\n            upstreamSubscription.unsubscribe();\n            upstreamSubscription = null;\n          }\n\n          if (call.finished) {\n            return undefined;\n          }\n          isClientCanceled = true;\n          call.cancel();\n        };\n      });\n      return stream;\n    };\n  }\n\n  public createUnaryServiceMethod(\n    client: any,\n    methodName: string,\n  ): (...args: any[]) => Observable<any> {\n    return (...args: any[]) => {\n      const isRequestStream = client[methodName].requestStream;\n      const upstreamSubjectOrData = args[0];\n      const isUpstreamSubject =\n        upstreamSubjectOrData && isFunction(upstreamSubjectOrData.subscribe);\n\n      if (isRequestStream && isUpstreamSubject) {\n        return new Observable(observer => {\n          const callArgs = [\n            (error: unknown, data: unknown) => {\n              if (error) {\n                return observer.error(this.serializeError(error));\n              }\n              observer.next(data);\n              observer.complete();\n            },\n          ];\n          const maybeMetadata = args[1];\n          if (maybeMetadata) {\n            callArgs.unshift(maybeMetadata);\n          }\n          const call = client[methodName](...callArgs);\n\n          const upstreamSubscription: Subscription =\n            upstreamSubjectOrData.subscribe(\n              (val: unknown) => call.write(val),\n              (err: unknown) => call.emit('error', err),\n              () => call.end(),\n            );\n\n          return () => {\n            upstreamSubscription.unsubscribe();\n          };\n        });\n      }\n      return new Observable(observer => {\n        const call = client[methodName](...args, (error: any, data: any) => {\n          if (error) {\n            return observer.error(this.serializeError(error));\n          }\n          observer.next(data);\n          observer.complete();\n        });\n\n        return () => {\n          if (!call.finished) {\n            call.cancel();\n          }\n        };\n      });\n    };\n  }\n\n  public createClients(): any[] {\n    const grpcContext = this.loadProto();\n    const packageOption = this.getOptionsProp(this.options, 'package');\n    const grpcPackages = [];\n    const packageNames = Array.isArray(packageOption)\n      ? packageOption\n      : [packageOption];\n\n    for (const packageName of packageNames) {\n      const grpcPkg = this.lookupPackage(grpcContext, packageName);\n\n      if (!grpcPkg) {\n        const invalidPackageError = new InvalidGrpcPackageException(\n          packageName,\n        );\n        this.logger.error(\n          invalidPackageError.message,\n          invalidPackageError.stack,\n        );\n        throw invalidPackageError;\n      }\n      grpcPackages.push(grpcPkg);\n    }\n    return grpcPackages;\n  }\n\n  public loadProto(): any {\n    try {\n      const file = this.getOptionsProp(this.options, 'protoPath');\n      const loader = this.getOptionsProp(this.options, 'loader');\n\n      const packageDefinition =\n        this.getOptionsProp(this.options, 'packageDefinition') ||\n        grpcProtoLoaderPackage.loadSync(file, loader);\n\n      const packageObject =\n        grpcPackage.loadPackageDefinition(packageDefinition);\n      return packageObject;\n    } catch (err) {\n      const invalidProtoError = new InvalidProtoDefinitionException(err.path);\n      const message =\n        err && err.message ? err.message : invalidProtoError.message;\n\n      this.logger.error(message, invalidProtoError.stack);\n      throw invalidProtoError;\n    }\n  }\n\n  public lookupPackage(root: any, packageName: string) {\n    /** Reference: https://github.com/kondi/rxjs-grpc */\n    let pkg = root;\n\n    if (packageName) {\n      for (const name of packageName.split('.')) {\n        pkg = pkg[name];\n      }\n    }\n\n    return pkg;\n  }\n\n  public close() {\n    this.grpcClients\n      .filter(client => client && isFunction(client.close))\n      .forEach(client => client.close());\n    this.grpcClients = [];\n  }\n\n  public async connect(): Promise<any> {\n    throw new Error('The \"connect()\" method is not supported in gRPC mode.');\n  }\n\n  public send<TResult = any, TInput = any>(\n    pattern: any,\n    data: TInput,\n  ): Observable<TResult> {\n    throw new Error(\n      'Method is not supported in gRPC mode. Use ClientGrpc instead (learn more in the documentation).',\n    );\n  }\n\n  protected getClient(name: string): any {\n    return this.grpcClients.find(client => client.hasOwnProperty(name));\n  }\n\n  protected publish(packet: any, callback: (packet: any) => any): any {\n    throw new Error(\n      'Method is not supported in gRPC mode. Use ClientGrpc instead (learn more in the documentation).',\n    );\n  }\n\n  protected async dispatchEvent(packet: any): Promise<any> {\n    throw new Error(\n      'Method is not supported in gRPC mode. Use ClientGrpc instead (learn more in the documentation).',\n    );\n  }\n}\n"]}