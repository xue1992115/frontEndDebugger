{"version":3,"file":"client-rmq.js","sourceRoot":"","sources":["client-rmq.ts"],"names":[],"mappings":"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","sourcesContent":["import { Logger } from '@nestjs/common/services/logger.service';\nimport { loadPackage } from '@nestjs/common/utils/load-package.util';\nimport { randomStringGenerator } from '@nestjs/common/utils/random-string-generator.util';\nimport { isFunction } from '@nestjs/common/utils/shared.utils';\nimport { EventEmitter } from 'events';\nimport {\n  EmptyError,\n  firstValueFrom,\n  fromEvent,\n  merge,\n  Observable,\n  ReplaySubject,\n} from 'rxjs';\nimport { first, map, retryWhen, scan, skip, switchMap } from 'rxjs/operators';\nimport {\n  CONNECT_EVENT,\n  CONNECT_FAILED_EVENT,\n  DISCONNECTED_RMQ_MESSAGE,\n  DISCONNECT_EVENT,\n  ERROR_EVENT,\n  RQM_DEFAULT_IS_GLOBAL_PREFETCH_COUNT,\n  RQM_DEFAULT_NOACK,\n  RQM_DEFAULT_NO_ASSERT,\n  RQM_DEFAULT_PERSISTENT,\n  RQM_DEFAULT_PREFETCH_COUNT,\n  RQM_DEFAULT_QUEUE,\n  RQM_DEFAULT_QUEUE_OPTIONS,\n  RQM_DEFAULT_URL,\n} from '../constants';\nimport { RmqUrl } from '../external/rmq-url.interface';\nimport { ReadPacket, RmqOptions, WritePacket } from '../interfaces';\nimport { RmqRecord } from '../record-builders';\nimport { RmqRecordSerializer } from '../serializers/rmq-record.serializer';\nimport { ClientProxy } from './client-proxy';\n\n// import type {\n//   AmqpConnectionManager,\n//   ChannelWrapper,\n// } from 'amqp-connection-manager';\n// import type { Channel, ConsumeMessage } from 'amqplib';\n\ntype Channel = any;\ntype ChannelWrapper = any;\ntype ConsumeMessage = any;\ntype AmqpConnectionManager = any;\n\nlet rqmPackage: any = {};\n\nconst REPLY_QUEUE = 'amq.rabbitmq.reply-to';\n\n/**\n * @publicApi\n */\nexport class ClientRMQ extends ClientProxy {\n  protected readonly logger = new Logger(ClientProxy.name);\n  protected connection$: ReplaySubject<any>;\n  protected connection: Promise<any>;\n  protected client: AmqpConnectionManager = null;\n  protected channel: ChannelWrapper = null;\n  protected urls: string[] | RmqUrl[];\n  protected queue: string;\n  protected queueOptions: Record<string, any>;\n  protected responseEmitter: EventEmitter;\n  protected replyQueue: string;\n  protected persistent: boolean;\n  protected noAssert: boolean;\n\n  constructor(protected readonly options: RmqOptions['options']) {\n    super();\n    this.urls = this.getOptionsProp(this.options, 'urls') || [RQM_DEFAULT_URL];\n    this.queue =\n      this.getOptionsProp(this.options, 'queue') || RQM_DEFAULT_QUEUE;\n    this.queueOptions =\n      this.getOptionsProp(this.options, 'queueOptions') ||\n      RQM_DEFAULT_QUEUE_OPTIONS;\n    this.replyQueue =\n      this.getOptionsProp(this.options, 'replyQueue') || REPLY_QUEUE;\n    this.persistent =\n      this.getOptionsProp(this.options, 'persistent') || RQM_DEFAULT_PERSISTENT;\n    this.noAssert =\n      this.getOptionsProp(this.options, 'noAssert') || RQM_DEFAULT_NO_ASSERT;\n\n    loadPackage('amqplib', ClientRMQ.name, () => require('amqplib'));\n    rqmPackage = loadPackage('amqp-connection-manager', ClientRMQ.name, () =>\n      require('amqp-connection-manager'),\n    );\n\n    this.initializeSerializer(options);\n    this.initializeDeserializer(options);\n  }\n\n  public close(): void {\n    this.channel && this.channel.close();\n    this.client && this.client.close();\n    this.channel = null;\n    this.client = null;\n  }\n\n  public connect(): Promise<any> {\n    if (this.client) {\n      return this.convertConnectionToPromise();\n    }\n    this.client = this.createClient();\n    this.handleError(this.client);\n    this.handleDisconnectError(this.client);\n\n    this.responseEmitter = new EventEmitter();\n    this.responseEmitter.setMaxListeners(0);\n\n    const connect$ = this.connect$(this.client);\n    const withDisconnect$ = this.mergeDisconnectEvent(\n      this.client,\n      connect$,\n    ).pipe(switchMap(() => this.createChannel()));\n\n    const withReconnect$ = fromEvent(this.client, CONNECT_EVENT).pipe(skip(1));\n    const source$ = merge(withDisconnect$, withReconnect$);\n\n    this.connection$ = new ReplaySubject(1);\n    source$.subscribe(this.connection$);\n\n    return this.convertConnectionToPromise();\n  }\n\n  public createChannel(): Promise<void> {\n    return new Promise(resolve => {\n      this.channel = this.client.createChannel({\n        json: false,\n        setup: (channel: Channel) => this.setupChannel(channel, resolve),\n      });\n    });\n  }\n\n  public createClient(): AmqpConnectionManager {\n    const socketOptions = this.getOptionsProp(this.options, 'socketOptions');\n    return rqmPackage.connect(this.urls, {\n      connectionOptions: socketOptions,\n    });\n  }\n\n  public mergeDisconnectEvent<T = any>(\n    instance: any,\n    source$: Observable<T>,\n  ): Observable<T> {\n    const eventToError = (eventType: string) =>\n      fromEvent(instance, eventType).pipe(\n        map((err: unknown) => {\n          throw err;\n        }),\n      );\n    const disconnect$ = eventToError(DISCONNECT_EVENT);\n\n    const urls = this.getOptionsProp(this.options, 'urls', []);\n    const connectFailed$ = eventToError(CONNECT_FAILED_EVENT).pipe(\n      retryWhen(e =>\n        e.pipe(\n          scan((errorCount, error: any) => {\n            if (urls.indexOf(error.url) >= urls.length - 1) {\n              throw error;\n            }\n            return errorCount + 1;\n          }, 0),\n        ),\n      ),\n    );\n    // If we ever decide to propagate all disconnect errors & re-emit them through\n    // the \"connection\" stream then comment out \"first()\" operator.\n    return merge(source$, disconnect$, connectFailed$).pipe(first());\n  }\n\n  public async convertConnectionToPromise() {\n    try {\n      return await firstValueFrom(this.connection$);\n    } catch (err) {\n      if (err instanceof EmptyError) {\n        return;\n      }\n      throw err;\n    }\n  }\n\n  public async setupChannel(channel: Channel, resolve: Function) {\n    const prefetchCount =\n      this.getOptionsProp(this.options, 'prefetchCount') ||\n      RQM_DEFAULT_PREFETCH_COUNT;\n    const isGlobalPrefetchCount =\n      this.getOptionsProp(this.options, 'isGlobalPrefetchCount') ||\n      RQM_DEFAULT_IS_GLOBAL_PREFETCH_COUNT;\n\n    if (!this.queueOptions.noAssert) {\n      await channel.assertQueue(this.queue, this.queueOptions);\n    }\n    await channel.prefetch(prefetchCount, isGlobalPrefetchCount);\n    await this.consumeChannel(channel);\n    resolve();\n  }\n\n  public async consumeChannel(channel: Channel) {\n    const noAck = this.getOptionsProp(this.options, 'noAck', RQM_DEFAULT_NOACK);\n    await channel.consume(\n      this.replyQueue,\n      (msg: ConsumeMessage) =>\n        this.responseEmitter.emit(msg.properties.correlationId, msg),\n      {\n        noAck,\n      },\n    );\n  }\n\n  public handleError(client: AmqpConnectionManager): void {\n    client.addListener(ERROR_EVENT, (err: any) => this.logger.error(err));\n  }\n\n  public handleDisconnectError(client: AmqpConnectionManager): void {\n    client.addListener(DISCONNECT_EVENT, (err: any) => {\n      this.logger.error(DISCONNECTED_RMQ_MESSAGE);\n      this.logger.error(err);\n    });\n  }\n\n  public async handleMessage(\n    packet: unknown,\n    callback: (packet: WritePacket) => any,\n  );\n  public async handleMessage(\n    packet: unknown,\n    options: Record<string, unknown>,\n    callback: (packet: WritePacket) => any,\n  );\n  public async handleMessage(\n    packet: unknown,\n    options: Record<string, unknown> | ((packet: WritePacket) => any),\n    callback?: (packet: WritePacket) => any,\n  ) {\n    if (isFunction(options)) {\n      callback = options as (packet: WritePacket) => any;\n      options = undefined;\n    }\n\n    const { err, response, isDisposed } = await this.deserializer.deserialize(\n      packet,\n      options,\n    );\n    if (isDisposed || err) {\n      callback({\n        err,\n        response,\n        isDisposed: true,\n      });\n    }\n    callback({\n      err,\n      response,\n    });\n  }\n\n  protected publish(\n    message: ReadPacket,\n    callback: (packet: WritePacket) => any,\n  ): () => void {\n    try {\n      const correlationId = randomStringGenerator();\n      const listener = ({\n        content,\n        options,\n      }: {\n        content: Buffer;\n        options: Record<string, unknown>;\n      }) =>\n        this.handleMessage(JSON.parse(content.toString()), options, callback);\n\n      Object.assign(message, { id: correlationId });\n      const serializedPacket: ReadPacket & Partial<RmqRecord> =\n        this.serializer.serialize(message);\n\n      const options = serializedPacket.options;\n      delete serializedPacket.options;\n\n      this.responseEmitter.on(correlationId, listener);\n      this.channel\n        .sendToQueue(\n          this.queue,\n          Buffer.from(JSON.stringify(serializedPacket)),\n          {\n            replyTo: this.replyQueue,\n            persistent: this.persistent,\n            ...options,\n            headers: this.mergeHeaders(options?.headers),\n            correlationId,\n          },\n        )\n        .catch(err => callback({ err }));\n      return () => this.responseEmitter.removeListener(correlationId, listener);\n    } catch (err) {\n      callback({ err });\n    }\n  }\n\n  protected dispatchEvent(packet: ReadPacket): Promise<any> {\n    const serializedPacket: ReadPacket & Partial<RmqRecord> =\n      this.serializer.serialize(packet);\n\n    const options = serializedPacket.options;\n    delete serializedPacket.options;\n\n    return new Promise<void>((resolve, reject) =>\n      this.channel.sendToQueue(\n        this.queue,\n        Buffer.from(JSON.stringify(serializedPacket)),\n        {\n          persistent: this.persistent,\n          ...options,\n          headers: this.mergeHeaders(options?.headers),\n        },\n        (err: unknown) => (err ? reject(err) : resolve()),\n      ),\n    );\n  }\n\n  protected initializeSerializer(options: RmqOptions['options']) {\n    this.serializer = options?.serializer ?? new RmqRecordSerializer();\n  }\n\n  protected mergeHeaders(\n    requestHeaders?: Record<string, string>,\n  ): Record<string, string> | undefined {\n    if (!requestHeaders && !this.options?.headers) {\n      return undefined;\n    }\n\n    return {\n      ...this.options?.headers,\n      ...requestHeaders,\n    };\n  }\n}\n"]}