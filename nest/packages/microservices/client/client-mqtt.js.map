{"version":3,"file":"client-mqtt.js","sourceRoot":"","sources":["client-mqtt.ts"],"names":[],"mappings":"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","sourcesContent":["import { Logger } from '@nestjs/common/services/logger.service';\nimport { loadPackage } from '@nestjs/common/utils/load-package.util';\nimport { EmptyError, fromEvent, lastValueFrom, merge, Observable } from 'rxjs';\nimport { first, map, share, tap } from 'rxjs/operators';\nimport {\n  CLOSE_EVENT,\n  ECONNREFUSED,\n  ERROR_EVENT,\n  MESSAGE_EVENT,\n  MQTT_DEFAULT_URL,\n} from '../constants';\nimport { MqttClient } from '../external/mqtt-client.interface';\nimport { MqttOptions, ReadPacket, WritePacket } from '../interfaces';\nimport {\n  MqttRecord,\n  MqttRecordOptions,\n} from '../record-builders/mqtt.record-builder';\nimport { MqttRecordSerializer } from '../serializers/mqtt-record.serializer';\nimport { ClientProxy } from './client-proxy';\n\nlet mqttPackage: any = {};\n\n/**\n * @publicApi\n */\nexport class ClientMqtt extends ClientProxy {\n  protected readonly logger = new Logger(ClientProxy.name);\n  protected readonly subscriptionsCount = new Map<string, number>();\n  protected readonly url: string;\n  protected mqttClient: MqttClient;\n  protected connection: Promise<any>;\n\n  constructor(protected readonly options: MqttOptions['options']) {\n    super();\n    this.url = this.getOptionsProp(this.options, 'url') || MQTT_DEFAULT_URL;\n\n    mqttPackage = loadPackage('mqtt', ClientMqtt.name, () => require('mqtt'));\n\n    this.initializeSerializer(options);\n    this.initializeDeserializer(options);\n  }\n\n  public getRequestPattern(pattern: string): string {\n    return pattern;\n  }\n\n  public getResponsePattern(pattern: string): string {\n    return `${pattern}/reply`;\n  }\n\n  public close() {\n    this.mqttClient && this.mqttClient.end();\n    this.mqttClient = null;\n    this.connection = null;\n  }\n\n  public connect(): Promise<any> {\n    if (this.mqttClient) {\n      return this.connection;\n    }\n    this.mqttClient = this.createClient();\n    this.handleError(this.mqttClient);\n\n    const connect$ = this.connect$(this.mqttClient);\n    this.connection = lastValueFrom(\n      this.mergeCloseEvent(this.mqttClient, connect$).pipe(\n        tap(() =>\n          this.mqttClient.on(MESSAGE_EVENT, this.createResponseCallback()),\n        ),\n        share(),\n      ),\n    ).catch(err => {\n      if (err instanceof EmptyError) {\n        return;\n      }\n      throw err;\n    });\n    return this.connection;\n  }\n\n  public mergeCloseEvent<T = any>(\n    instance: MqttClient,\n    source$: Observable<T>,\n  ): Observable<T> {\n    const close$ = fromEvent(instance, CLOSE_EVENT).pipe(\n      map((err: any) => {\n        throw err;\n      }),\n    );\n    return merge(source$, close$).pipe(first());\n  }\n\n  public createClient(): MqttClient {\n    return mqttPackage.connect(this.url, this.options as MqttOptions);\n  }\n\n  public handleError(client: MqttClient) {\n    client.addListener(\n      ERROR_EVENT,\n      (err: any) => err.code !== ECONNREFUSED && this.logger.error(err),\n    );\n  }\n\n  public createResponseCallback(): (channel: string, buffer: Buffer) => any {\n    return async (channel: string, buffer: Buffer) => {\n      const packet = JSON.parse(buffer.toString());\n      const { err, response, isDisposed, id } =\n        await this.deserializer.deserialize(packet);\n\n      const callback = this.routingMap.get(id);\n      if (!callback) {\n        return undefined;\n      }\n      if (isDisposed || err) {\n        return callback({\n          err,\n          response,\n          isDisposed: true,\n        });\n      }\n      callback({\n        err,\n        response,\n      });\n    };\n  }\n\n  protected publish(\n    partialPacket: ReadPacket,\n    callback: (packet: WritePacket) => any,\n  ): () => void {\n    try {\n      const packet = this.assignPacketId(partialPacket);\n      const pattern = this.normalizePattern(partialPacket.pattern);\n      const serializedPacket: ReadPacket & Partial<MqttRecord> =\n        this.serializer.serialize(packet);\n\n      const responseChannel = this.getResponsePattern(pattern);\n      let subscriptionsCount =\n        this.subscriptionsCount.get(responseChannel) || 0;\n\n      const publishPacket = () => {\n        subscriptionsCount = this.subscriptionsCount.get(responseChannel) || 0;\n        this.subscriptionsCount.set(responseChannel, subscriptionsCount + 1);\n        this.routingMap.set(packet.id, callback);\n\n        const options = serializedPacket.options;\n        delete serializedPacket.options;\n\n        this.mqttClient.publish(\n          this.getRequestPattern(pattern),\n          JSON.stringify(serializedPacket),\n          this.mergePacketOptions(options),\n        );\n      };\n\n      if (subscriptionsCount <= 0) {\n        this.mqttClient.subscribe(\n          responseChannel,\n          (err: any) => !err && publishPacket(),\n        );\n      } else {\n        publishPacket();\n      }\n\n      return () => {\n        this.unsubscribeFromChannel(responseChannel);\n        this.routingMap.delete(packet.id);\n      };\n    } catch (err) {\n      callback({ err });\n    }\n  }\n\n  protected dispatchEvent(packet: ReadPacket): Promise<any> {\n    const pattern = this.normalizePattern(packet.pattern);\n    const serializedPacket: ReadPacket & Partial<MqttRecord> =\n      this.serializer.serialize(packet);\n\n    const options = serializedPacket.options;\n    delete serializedPacket.options;\n\n    return new Promise<void>((resolve, reject) =>\n      this.mqttClient.publish(\n        pattern,\n        JSON.stringify(serializedPacket),\n        this.mergePacketOptions(options),\n        (err: any) => (err ? reject(err) : resolve()),\n      ),\n    );\n  }\n\n  protected unsubscribeFromChannel(channel: string) {\n    const subscriptionCount = this.subscriptionsCount.get(channel);\n    this.subscriptionsCount.set(channel, subscriptionCount - 1);\n\n    if (subscriptionCount - 1 <= 0) {\n      this.mqttClient.unsubscribe(channel);\n    }\n  }\n\n  protected initializeSerializer(options: MqttOptions['options']) {\n    this.serializer = options?.serializer ?? new MqttRecordSerializer();\n  }\n\n  protected mergePacketOptions(\n    requestOptions?: MqttRecordOptions,\n  ): MqttRecordOptions | undefined {\n    if (!requestOptions && !this.options?.userProperties) {\n      return undefined;\n    }\n\n    return {\n      ...requestOptions,\n      properties: {\n        ...requestOptions?.properties,\n        userProperties: {\n          ...this.options?.userProperties,\n          ...requestOptions?.properties?.userProperties,\n        },\n      },\n    };\n  }\n}\n"]}