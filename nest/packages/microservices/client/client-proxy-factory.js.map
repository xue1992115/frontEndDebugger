{"version":3,"file":"client-proxy-factory.js","sourceRoot":"","sources":["client-proxy-factory.ts"],"names":[],"mappings":";;;AAAA,4DAAoD;AAepD,+CAAgD;AAChD,iDAA6C;AAC7C,+CAA2C;AAC3C,+CAA2C;AAE3C,iDAA6C;AAC7C,6CAAyC;AACzC,6CAAyC;AAMzC;;GAEG;AACH,MAAa,kBAAkB;IAQtB,MAAM,CAAC,MAAM,CAClB,aAAkD;QAElD,IAAI,IAAI,CAAC,qBAAqB,CAAC,aAAa,CAAC,EAAE;YAC7C,MAAM,EAAE,WAAW,EAAE,OAAO,EAAE,GAAG,aAAa,CAAC;YAC/C,OAAO,IAAI,WAAW,CAAC,OAAO,CAAC,CAAC;SACjC;QACD,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,aAAa,IAAI,EAAE,CAAC;QACnD,QAAQ,SAAS,EAAE;YACjB,KAAK,0BAAS,CAAC,KAAK;gBAClB,OAAO,IAAI,0BAAW,CAAC,OAAkC,CAAC,CAAC;YAC7D,KAAK,0BAAS,CAAC,IAAI;gBACjB,OAAO,IAAI,wBAAU,CAAC,OAAiC,CAAC,CAAC;YAC3D,KAAK,0BAAS,CAAC,IAAI;gBACjB,OAAO,IAAI,wBAAU,CAAC,OAAiC,CAAC,CAAC;YAC3D,KAAK,0BAAS,CAAC,IAAI;gBACjB,OAAO,IAAI,6BAAe,CAAC,OAAiC,CAAC,CAAC;YAChE,KAAK,0BAAS,CAAC,GAAG;gBAChB,OAAO,IAAI,sBAAS,CAAC,OAAgC,CAAC,CAAC;YACzD,KAAK,0BAAS,CAAC,KAAK;gBAClB,OAAO,IAAI,0BAAW,CAAC,OAAkC,CAAC,CAAC;YAC7D;gBACE,OAAO,IAAI,sBAAS,CAAC,OAAsC,CAAC,CAAC;SAChE;IACH,CAAC;IAEO,MAAM,CAAC,qBAAqB,CAClC,OAA4C;QAE5C,OAAO,CAAC,CAAE,OAA+B,CAAC,WAAW,CAAC;IACxD,CAAC;CACF;AAvCD,gDAuCC","sourcesContent":["import { Transport } from '../enums/transport.enum';\nimport {\n  ClientOptions,\n  CustomClientOptions,\n  TcpClientOptions,\n} from '../interfaces/client-metadata.interface';\nimport { Closeable } from '../interfaces/closeable.interface';\nimport {\n  GrpcOptions,\n  KafkaOptions,\n  MqttOptions,\n  NatsOptions,\n  RedisOptions,\n  RmqOptions,\n} from '../interfaces/microservice-configuration.interface';\nimport { ClientGrpcProxy } from './client-grpc';\nimport { ClientKafka } from './client-kafka';\nimport { ClientMqtt } from './client-mqtt';\nimport { ClientNats } from './client-nats';\nimport { ClientProxy } from './client-proxy';\nimport { ClientRedis } from './client-redis';\nimport { ClientRMQ } from './client-rmq';\nimport { ClientTCP } from './client-tcp';\n\nexport interface IClientProxyFactory {\n  create(clientOptions: ClientOptions): ClientProxy & Closeable;\n}\n\n/**\n * @publicApi\n */\nexport class ClientProxyFactory {\n  public static create(\n    clientOptions: { transport: Transport.GRPC } & ClientOptions,\n  ): ClientGrpcProxy;\n  public static create(clientOptions: ClientOptions): ClientProxy & Closeable;\n  public static create(\n    clientOptions: CustomClientOptions,\n  ): ClientProxy & Closeable;\n  public static create(\n    clientOptions: ClientOptions | CustomClientOptions,\n  ): ClientProxy & Closeable {\n    if (this.isCustomClientOptions(clientOptions)) {\n      const { customClass, options } = clientOptions;\n      return new customClass(options);\n    }\n    const { transport, options } = clientOptions || {};\n    switch (transport) {\n      case Transport.REDIS:\n        return new ClientRedis(options as RedisOptions['options']);\n      case Transport.NATS:\n        return new ClientNats(options as NatsOptions['options']);\n      case Transport.MQTT:\n        return new ClientMqtt(options as MqttOptions['options']);\n      case Transport.GRPC:\n        return new ClientGrpcProxy(options as GrpcOptions['options']);\n      case Transport.RMQ:\n        return new ClientRMQ(options as RmqOptions['options']);\n      case Transport.KAFKA:\n        return new ClientKafka(options as KafkaOptions['options']);\n      default:\n        return new ClientTCP(options as TcpClientOptions['options']);\n    }\n  }\n\n  private static isCustomClientOptions(\n    options: ClientOptions | CustomClientOptions,\n  ): options is CustomClientOptions {\n    return !!(options as CustomClientOptions).customClass;\n  }\n}\n"]}