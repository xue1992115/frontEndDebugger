{"version":3,"file":"client-redis.js","sourceRoot":"","sources":["client-redis.ts"],"names":[],"mappings":";;;AAAA,2EAAgE;AAChE,8EAAqE;AACrE,4CAKsB;AAEtB,iDAA6C;AAI7C,IAAI,YAAY,GAAG,EAAS,CAAC;AAE7B;;GAEG;AACH,MAAa,WAAY,SAAQ,0BAAW;IAQ1C,YAA+B,OAAgC;QAC7D,KAAK,EAAE,CAAC;QADqB,YAAO,GAAP,OAAO,CAAyB;QAP5C,WAAM,GAAG,IAAI,uBAAM,CAAC,0BAAW,CAAC,IAAI,CAAC,CAAC;QACtC,uBAAkB,GAAG,IAAI,GAAG,EAAkB,CAAC;QAIxD,2BAAsB,GAAG,KAAK,CAAC;QAKvC,YAAY,GAAG,IAAA,+BAAW,EAAC,SAAS,EAAE,WAAW,CAAC,IAAI,EAAE,GAAG,EAAE,CAC3D,OAAO,CAAC,SAAS,CAAC,CACnB,CAAC;QAEF,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;QACnC,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC;IACvC,CAAC;IAEM,iBAAiB,CAAC,OAAe;QACtC,OAAO,OAAO,CAAC;IACjB,CAAC;IAEM,eAAe,CAAC,OAAe;QACpC,OAAO,GAAG,OAAO,QAAQ,CAAC;IAC5B,CAAC;IAEM,KAAK;QACV,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;QACxC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;QACxC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACvC,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC;IACrC,CAAC;IAEM,KAAK,CAAC,OAAO;QAClB,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,EAAE;YACpC,OAAO,IAAI,CAAC,UAAU,CAAC;SACxB;QACD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QACrC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QACrC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACjC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAEjC,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC;YAC5B,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE;YACxB,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE;SACzB,CAAC,CAAC;QACH,MAAM,IAAI,CAAC,UAAU,CAAC;QAEtB,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,yBAAa,EAAE,IAAI,CAAC,sBAAsB,EAAE,CAAC,CAAC;QAChE,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAEM,YAAY;QACjB,OAAO,IAAI,YAAY,+BACrB,IAAI,EAAE,8BAAkB,EACxB,IAAI,EAAE,8BAAkB,IACrB,IAAI,CAAC,gBAAgB,EAAE,KAC1B,WAAW,EAAE,IAAI,IACjB,CAAC;IACL,CAAC;IAEM,WAAW,CAAC,MAAa;QAC9B,MAAM,CAAC,WAAW,CAAC,uBAAW,EAAE,CAAC,GAAQ,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;IACxE,CAAC;IAEM,gBAAgB;QACrB,MAAM,aAAa,GAAG,CAAC,KAAa,EAAE,EAAE,CAAC,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;QAEzE,uCACK,CAAC,IAAI,CAAC,OAAO,IAAI,EAAE,CAAC,KACvB,aAAa,IACb;IACJ,CAAC;IAEM,mBAAmB,CAAC,KAAa;QACtC,IAAI,IAAI,CAAC,sBAAsB,EAAE;YAC/B,OAAO,SAAS,CAAC;SAClB;QACD,IACE,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,eAAe,CAAC;YACnD,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,eAAe,CAAC,EAC1D;YACA,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAC;YAC1C,OAAO;SACR;QACD,OAAO,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,YAAY,CAAC,IAAI,CAAC,CAAC;IAC9D,CAAC;IAEM,sBAAsB;QAI3B,OAAO,KAAK,EAAE,OAAe,EAAE,MAAc,EAAE,EAAE;YAC/C,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YAClC,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,UAAU,EAAE,EAAE,EAAE,GACrC,MAAM,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;YAE9C,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;YACzC,IAAI,CAAC,QAAQ,EAAE;gBACb,OAAO;aACR;YACD,IAAI,UAAU,IAAI,GAAG,EAAE;gBACrB,OAAO,QAAQ,CAAC;oBACd,GAAG;oBACH,QAAQ;oBACR,UAAU,EAAE,IAAI;iBACjB,CAAC,CAAC;aACJ;YACD,QAAQ,CAAC;gBACP,GAAG;gBACH,QAAQ;aACT,CAAC,CAAC;QACL,CAAC,CAAC;IACJ,CAAC;IAES,OAAO,CACf,aAAyB,EACzB,QAAsC;QAEtC,IAAI;YACF,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;YAClD,MAAM,OAAO,GAAG,IAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YAC7D,MAAM,gBAAgB,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YAC3D,MAAM,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;YACtD,IAAI,kBAAkB,GACpB,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YAEpD,MAAM,aAAa,GAAG,GAAG,EAAE;gBACzB,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;gBACvE,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,eAAe,EAAE,kBAAkB,GAAG,CAAC,CAAC,CAAC;gBACrE,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;gBACzC,IAAI,CAAC,SAAS,CAAC,OAAO,CACpB,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,EAC/B,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,CACjC,CAAC;YACJ,CAAC,CAAC;YAEF,IAAI,kBAAkB,IAAI,CAAC,EAAE;gBAC3B,IAAI,CAAC,SAAS,CAAC,SAAS,CACtB,eAAe,EACf,CAAC,GAAQ,EAAE,EAAE,CAAC,CAAC,GAAG,IAAI,aAAa,EAAE,CACtC,CAAC;aACH;iBAAM;gBACL,aAAa,EAAE,CAAC;aACjB;YAED,OAAO,GAAG,EAAE;gBACV,IAAI,CAAC,sBAAsB,CAAC,eAAe,CAAC,CAAC;gBAC7C,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YACpC,CAAC,CAAC;SACH;QAAC,OAAO,GAAG,EAAE;YACZ,QAAQ,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;SACnB;IACH,CAAC;IAES,aAAa,CAAC,MAAkB;QACxC,MAAM,OAAO,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QACtD,MAAM,gBAAgB,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QAE3D,OAAO,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE,CAC3C,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,EAAE,GAAG,CAAC,EAAE,CACtE,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAC9B,CACF,CAAC;IACJ,CAAC;IAES,sBAAsB,CAAC,OAAe;QAC9C,MAAM,iBAAiB,GAAG,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAC/D,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,OAAO,EAAE,iBAAiB,GAAG,CAAC,CAAC,CAAC;QAE5D,IAAI,iBAAiB,GAAG,CAAC,IAAI,CAAC,EAAE;YAC9B,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;SACrC;IACH,CAAC;CACF;AA/KD,kCA+KC","sourcesContent":["import { Logger } from '@nestjs/common/services/logger.service';\nimport { loadPackage } from '@nestjs/common/utils/load-package.util';\nimport {\n  ERROR_EVENT,\n  MESSAGE_EVENT,\n  REDIS_DEFAULT_HOST,\n  REDIS_DEFAULT_PORT,\n} from '../constants';\nimport { ReadPacket, RedisOptions, WritePacket } from '../interfaces';\nimport { ClientProxy } from './client-proxy';\n\ntype Redis = any;\n\nlet redisPackage = {} as any;\n\n/**\n * @publicApi\n */\nexport class ClientRedis extends ClientProxy {\n  protected readonly logger = new Logger(ClientProxy.name);\n  protected readonly subscriptionsCount = new Map<string, number>();\n  protected pubClient: Redis;\n  protected subClient: Redis;\n  protected connection: Promise<any>;\n  protected isExplicitlyTerminated = false;\n\n  constructor(protected readonly options: RedisOptions['options']) {\n    super();\n\n    redisPackage = loadPackage('ioredis', ClientRedis.name, () =>\n      require('ioredis'),\n    );\n\n    this.initializeSerializer(options);\n    this.initializeDeserializer(options);\n  }\n\n  public getRequestPattern(pattern: string): string {\n    return pattern;\n  }\n\n  public getReplyPattern(pattern: string): string {\n    return `${pattern}.reply`;\n  }\n\n  public close() {\n    this.pubClient && this.pubClient.quit();\n    this.subClient && this.subClient.quit();\n    this.pubClient = this.subClient = null;\n    this.isExplicitlyTerminated = true;\n  }\n\n  public async connect(): Promise<any> {\n    if (this.pubClient && this.subClient) {\n      return this.connection;\n    }\n    this.pubClient = this.createClient();\n    this.subClient = this.createClient();\n    this.handleError(this.pubClient);\n    this.handleError(this.subClient);\n\n    this.connection = Promise.all([\n      this.subClient.connect(),\n      this.pubClient.connect(),\n    ]);\n    await this.connection;\n\n    this.subClient.on(MESSAGE_EVENT, this.createResponseCallback());\n    return this.connection;\n  }\n\n  public createClient(): Redis {\n    return new redisPackage({\n      host: REDIS_DEFAULT_HOST,\n      port: REDIS_DEFAULT_PORT,\n      ...this.getClientOptions(),\n      lazyConnect: true,\n    });\n  }\n\n  public handleError(client: Redis) {\n    client.addListener(ERROR_EVENT, (err: any) => this.logger.error(err));\n  }\n\n  public getClientOptions(): Partial<RedisOptions['options']> {\n    const retryStrategy = (times: number) => this.createRetryStrategy(times);\n\n    return {\n      ...(this.options || {}),\n      retryStrategy,\n    };\n  }\n\n  public createRetryStrategy(times: number): undefined | number {\n    if (this.isExplicitlyTerminated) {\n      return undefined;\n    }\n    if (\n      !this.getOptionsProp(this.options, 'retryAttempts') ||\n      times > this.getOptionsProp(this.options, 'retryAttempts')\n    ) {\n      this.logger.error('Retry time exhausted');\n      return;\n    }\n    return this.getOptionsProp(this.options, 'retryDelay') || 0;\n  }\n\n  public createResponseCallback(): (\n    channel: string,\n    buffer: string,\n  ) => Promise<void> {\n    return async (channel: string, buffer: string) => {\n      const packet = JSON.parse(buffer);\n      const { err, response, isDisposed, id } =\n        await this.deserializer.deserialize(packet);\n\n      const callback = this.routingMap.get(id);\n      if (!callback) {\n        return;\n      }\n      if (isDisposed || err) {\n        return callback({\n          err,\n          response,\n          isDisposed: true,\n        });\n      }\n      callback({\n        err,\n        response,\n      });\n    };\n  }\n\n  protected publish(\n    partialPacket: ReadPacket,\n    callback: (packet: WritePacket) => any,\n  ): () => void {\n    try {\n      const packet = this.assignPacketId(partialPacket);\n      const pattern = this.normalizePattern(partialPacket.pattern);\n      const serializedPacket = this.serializer.serialize(packet);\n      const responseChannel = this.getReplyPattern(pattern);\n      let subscriptionsCount =\n        this.subscriptionsCount.get(responseChannel) || 0;\n\n      const publishPacket = () => {\n        subscriptionsCount = this.subscriptionsCount.get(responseChannel) || 0;\n        this.subscriptionsCount.set(responseChannel, subscriptionsCount + 1);\n        this.routingMap.set(packet.id, callback);\n        this.pubClient.publish(\n          this.getRequestPattern(pattern),\n          JSON.stringify(serializedPacket),\n        );\n      };\n\n      if (subscriptionsCount <= 0) {\n        this.subClient.subscribe(\n          responseChannel,\n          (err: any) => !err && publishPacket(),\n        );\n      } else {\n        publishPacket();\n      }\n\n      return () => {\n        this.unsubscribeFromChannel(responseChannel);\n        this.routingMap.delete(packet.id);\n      };\n    } catch (err) {\n      callback({ err });\n    }\n  }\n\n  protected dispatchEvent(packet: ReadPacket): Promise<any> {\n    const pattern = this.normalizePattern(packet.pattern);\n    const serializedPacket = this.serializer.serialize(packet);\n\n    return new Promise<void>((resolve, reject) =>\n      this.pubClient.publish(pattern, JSON.stringify(serializedPacket), err =>\n        err ? reject(err) : resolve(),\n      ),\n    );\n  }\n\n  protected unsubscribeFromChannel(channel: string) {\n    const subscriptionCount = this.subscriptionsCount.get(channel);\n    this.subscriptionsCount.set(channel, subscriptionCount - 1);\n\n    if (subscriptionCount - 1 <= 0) {\n      this.subClient.unsubscribe(channel);\n    }\n  }\n}\n"]}