{"version":3,"file":"server-grpc.js","sourceRoot":"","sources":["server-grpc.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  isObject,\n  isString,\n  isUndefined,\n} from '@nestjs/common/utils/shared.utils';\nimport { EMPTY, fromEvent, lastValueFrom, Subject } from 'rxjs';\nimport { catchError, takeUntil } from 'rxjs/operators';\nimport {\n  CANCEL_EVENT,\n  GRPC_DEFAULT_PROTO_LOADER,\n  GRPC_DEFAULT_URL,\n} from '../constants';\nimport { GrpcMethodStreamingType } from '../decorators';\nimport { Transport } from '../enums';\nimport { InvalidGrpcPackageException } from '../errors/invalid-grpc-package.exception';\nimport { InvalidProtoDefinitionException } from '../errors/invalid-proto-definition.exception';\nimport { ChannelOptions } from '../external/grpc-options.interface';\nimport { CustomTransportStrategy, MessageHandler } from '../interfaces';\nimport { GrpcOptions } from '../interfaces/microservice-configuration.interface';\nimport { Server } from './server';\n\nlet grpcPackage: any = {};\nlet grpcProtoLoaderPackage: any = {};\n\ninterface GrpcCall<TRequest = any, TMetadata = any> {\n  request: TRequest;\n  metadata: TMetadata;\n  sendMetadata: Function;\n  end: Function;\n  write: Function;\n  on: Function;\n  emit: Function;\n}\n\nexport class ServerGrpc extends Server implements CustomTransportStrategy {\n  public readonly transportId = Transport.GRPC;\n\n  private readonly url: string;\n  private grpcClient: any;\n\n  constructor(private readonly options: GrpcOptions['options']) {\n    super();\n    this.url = this.getOptionsProp(options, 'url') || GRPC_DEFAULT_URL;\n\n    const protoLoader =\n      this.getOptionsProp(options, 'protoLoader') || GRPC_DEFAULT_PROTO_LOADER;\n\n    grpcPackage = this.loadPackage('@grpc/grpc-js', ServerGrpc.name, () =>\n      require('@grpc/grpc-js'),\n    );\n    grpcProtoLoaderPackage = this.loadPackage(\n      protoLoader,\n      ServerGrpc.name,\n      () =>\n        protoLoader === GRPC_DEFAULT_PROTO_LOADER\n          ? require('@grpc/proto-loader')\n          : require(protoLoader),\n    );\n  }\n\n  public async listen(\n    callback: (err?: unknown, ...optionalParams: unknown[]) => void,\n  ) {\n    try {\n      this.grpcClient = await this.createClient();\n      await this.start(callback);\n    } catch (err) {\n      callback(err);\n    }\n  }\n\n  public async start(callback?: () => void) {\n    await this.bindEvents();\n    this.grpcClient.start();\n    callback();\n  }\n\n  public async bindEvents() {\n    const grpcContext = this.loadProto();\n    const packageOption = this.getOptionsProp(this.options, 'package');\n    const packageNames = Array.isArray(packageOption)\n      ? packageOption\n      : [packageOption];\n\n    for (const packageName of packageNames) {\n      const grpcPkg = this.lookupPackage(grpcContext, packageName);\n      await this.createServices(grpcPkg, packageName);\n    }\n  }\n\n  /**\n   * Will return all of the services along with their fully namespaced\n   * names as an array of objects.\n   * This method initiates recursive scan of grpcPkg object\n   */\n  public getServiceNames(grpcPkg: any): { name: string; service: any }[] {\n    // Define accumulator to collect all of the services available to load\n    const services: { name: string; service: any }[] = [];\n    // Initiate recursive services collector starting with empty name\n    this.collectDeepServices('', grpcPkg, services);\n    return services;\n  }\n\n  /**\n   * Will create service mapping from gRPC generated Object to handlers\n   * defined with @GrpcMethod or @GrpcStreamMethod annotations\n   *\n   * @param grpcService\n   * @param name\n   */\n  public async createService(grpcService: any, name: string) {\n    const service = {};\n\n    for (const methodName in grpcService.prototype) {\n      let pattern = '';\n      let methodHandler = null;\n      let streamingType = GrpcMethodStreamingType.NO_STREAMING;\n\n      const methodFunction = grpcService.prototype[methodName];\n      const methodReqStreaming = methodFunction.requestStream;\n\n      if (!isUndefined(methodReqStreaming) && methodReqStreaming) {\n        // Try first pattern to be presented, RX streaming pattern would be\n        // a preferable pattern to select among a few defined\n        pattern = this.createPattern(\n          name,\n          methodName,\n          GrpcMethodStreamingType.RX_STREAMING,\n        );\n        methodHandler = this.messageHandlers.get(pattern);\n        streamingType = GrpcMethodStreamingType.RX_STREAMING;\n        // If first pattern didn't match to any of handlers then try\n        // pass-through handler to be presented\n        if (!methodHandler) {\n          pattern = this.createPattern(\n            name,\n            methodName,\n            GrpcMethodStreamingType.PT_STREAMING,\n          );\n          methodHandler = this.messageHandlers.get(pattern);\n          streamingType = GrpcMethodStreamingType.PT_STREAMING;\n        }\n      } else {\n        pattern = this.createPattern(\n          name,\n          methodName,\n          GrpcMethodStreamingType.NO_STREAMING,\n        );\n        // Select handler if any presented for No-Streaming pattern\n        methodHandler = this.messageHandlers.get(pattern);\n        streamingType = GrpcMethodStreamingType.NO_STREAMING;\n      }\n      if (!methodHandler) {\n        continue;\n      }\n      service[methodName] = await this.createServiceMethod(\n        methodHandler,\n        grpcService.prototype[methodName],\n        streamingType,\n      );\n    }\n    return service;\n  }\n\n  /**\n   * Will create a string of a JSON serialized format\n   *\n   * @param service name of the service which should be a match to gRPC service definition name\n   * @param methodName name of the method which is coming after rpc keyword\n   * @param streaming GrpcMethodStreamingType parameter which should correspond to\n   * stream keyword in gRPC service request part\n   */\n  public createPattern(\n    service: string,\n    methodName: string,\n    streaming: GrpcMethodStreamingType,\n  ): string {\n    return JSON.stringify({\n      service,\n      rpc: methodName,\n      streaming,\n    });\n  }\n\n  /**\n   * Will return async function which will handle gRPC call\n   * with Rx streams or as a direct call passthrough\n   *\n   * @param methodHandler\n   * @param protoNativeHandler\n   */\n  public createServiceMethod(\n    methodHandler: Function,\n    protoNativeHandler: any,\n    streamType: GrpcMethodStreamingType,\n  ): Function {\n    // If proto handler has request stream as \"true\" then we expect it to have\n    // streaming from the side of requester\n    if (protoNativeHandler.requestStream) {\n      // If any handlers were defined with GrpcStreamMethod annotation use RX\n      if (streamType === GrpcMethodStreamingType.RX_STREAMING) {\n        return this.createRequestStreamMethod(\n          methodHandler,\n          protoNativeHandler.responseStream,\n        );\n      }\n      // If any handlers were defined with GrpcStreamCall annotation\n      else if (streamType === GrpcMethodStreamingType.PT_STREAMING) {\n        return this.createStreamCallMethod(\n          methodHandler,\n          protoNativeHandler.responseStream,\n        );\n      }\n    }\n    return protoNativeHandler.responseStream\n      ? this.createStreamServiceMethod(methodHandler)\n      : this.createUnaryServiceMethod(methodHandler);\n  }\n\n  public createUnaryServiceMethod(methodHandler: Function): Function {\n    return async (call: GrpcCall, callback: Function) => {\n      const handler = methodHandler(call.request, call.metadata, call);\n      this.transformToObservable(await handler).subscribe({\n        next: data => callback(null, data),\n        error: (err: any) => callback(err),\n      });\n    };\n  }\n\n  public createStreamServiceMethod(methodHandler: Function): Function {\n    return async (call: GrpcCall, callback: Function) => {\n      const handler = methodHandler(call.request, call.metadata, call);\n      const result$ = this.transformToObservable(await handler);\n      await result$\n        .pipe(\n          takeUntil(fromEvent(call as any, CANCEL_EVENT)),\n          catchError(err => {\n            call.emit('error', err);\n            return EMPTY;\n          }),\n        )\n        .forEach(data => call.write(data));\n      call.end();\n    };\n  }\n\n  public createRequestStreamMethod(\n    methodHandler: Function,\n    isResponseStream: boolean,\n  ) {\n    return async (\n      call: GrpcCall,\n      callback: (err: unknown, value: unknown) => void,\n    ) => {\n      const req = new Subject<any>();\n      call.on('data', (m: any) => req.next(m));\n      call.on('error', (e: any) => {\n        // Check if error means that stream ended on other end\n        const isCancelledError = String(e).toLowerCase().indexOf('cancelled');\n\n        if (isCancelledError) {\n          call.end();\n          return;\n        }\n        // If another error then just pass it along\n        req.error(e);\n      });\n      call.on('end', () => req.complete());\n\n      const handler = methodHandler(req.asObservable(), call.metadata, call);\n      const res = this.transformToObservable(await handler);\n      if (isResponseStream) {\n        await res\n          .pipe(\n            takeUntil(fromEvent(call as any, CANCEL_EVENT)),\n            catchError(err => {\n              call.emit('error', err);\n              return EMPTY;\n            }),\n          )\n          .forEach(m => call.write(m));\n\n        call.end();\n      } else {\n        const response = await lastValueFrom(\n          res.pipe(\n            takeUntil(fromEvent(call as any, CANCEL_EVENT)),\n            catchError(err => {\n              callback(err, null);\n              return EMPTY;\n            }),\n          ),\n        );\n\n        if (!isUndefined(response)) {\n          callback(null, response);\n        }\n      }\n    };\n  }\n\n  public createStreamCallMethod(\n    methodHandler: Function,\n    isResponseStream: boolean,\n  ) {\n    return async (\n      call: GrpcCall,\n      callback: (err: unknown, value: unknown) => void,\n    ) => {\n      if (isResponseStream) {\n        methodHandler(call);\n      } else {\n        methodHandler(call, callback);\n      }\n    };\n  }\n\n  public close() {\n    this.grpcClient && this.grpcClient.forceShutdown();\n    this.grpcClient = null;\n  }\n\n  public deserialize(obj: any): any {\n    try {\n      return JSON.parse(obj);\n    } catch (e) {\n      return obj;\n    }\n  }\n\n  public addHandler(\n    pattern: unknown,\n    callback: MessageHandler,\n    isEventHandler = false,\n  ) {\n    const route = isString(pattern) ? pattern : JSON.stringify(pattern);\n    callback.isEventHandler = isEventHandler;\n    this.messageHandlers.set(route, callback);\n  }\n\n  public async createClient(): Promise<any> {\n    const channelOptions: ChannelOptions =\n      this.options && this.options.channelOptions\n        ? this.options.channelOptions\n        : {};\n    if (this.options && this.options.maxSendMessageLength) {\n      channelOptions['grpc.max_send_message_length'] =\n        this.options.maxSendMessageLength;\n    }\n    if (this.options && this.options.maxReceiveMessageLength) {\n      channelOptions['grpc.max_receive_message_length'] =\n        this.options.maxReceiveMessageLength;\n    }\n    if (this.options && this.options.maxMetadataSize) {\n      channelOptions['grpc.max_metadata_size'] = this.options.maxMetadataSize;\n    }\n    const server = new grpcPackage.Server(channelOptions);\n    const credentials = this.getOptionsProp(this.options, 'credentials');\n\n    await new Promise((resolve, reject) => {\n      server.bindAsync(\n        this.url,\n        credentials || grpcPackage.ServerCredentials.createInsecure(),\n        (error: Error | null, port: number) =>\n          error ? reject(error) : resolve(port),\n      );\n    });\n\n    return server;\n  }\n\n  public lookupPackage(root: any, packageName: string) {\n    /** Reference: https://github.com/kondi/rxjs-grpc */\n    let pkg = root;\n    for (const name of packageName.split(/\\./)) {\n      pkg = pkg[name];\n    }\n    return pkg;\n  }\n\n  public loadProto(): any {\n    try {\n      const file = this.getOptionsProp(this.options, 'protoPath');\n      const loader = this.getOptionsProp(this.options, 'loader');\n\n      const packageDefinition = grpcProtoLoaderPackage.loadSync(file, loader);\n      const packageObject =\n        grpcPackage.loadPackageDefinition(packageDefinition);\n      return packageObject;\n    } catch (err) {\n      const invalidProtoError = new InvalidProtoDefinitionException(err.path);\n      const message =\n        err && err.message ? err.message : invalidProtoError.message;\n\n      this.logger.error(message, invalidProtoError.stack);\n      throw err;\n    }\n  }\n\n  /**\n   * Recursively fetch all of the service methods available on loaded\n   * protobuf descriptor object, and collect those as an objects with\n   * dot-syntax full-path names.\n   *\n   * Example:\n   *  for proto package Bundle.FirstService with service Events { rpc...\n   *  will be resolved to object of (while loaded for Bundle package):\n   *    {\n   *      name: \"FirstService.Events\",\n   *      service: {Object}\n   *    }\n   */\n  private collectDeepServices(\n    name: string,\n    grpcDefinition: any,\n    accumulator: { name: string; service: any }[],\n  ) {\n    if (!isObject(grpcDefinition)) {\n      return;\n    }\n    const keysToTraverse = Object.keys(grpcDefinition);\n    // Traverse definitions or namespace extensions\n    for (const key of keysToTraverse) {\n      const nameExtended = this.parseDeepServiceName(name, key);\n      const deepDefinition = grpcDefinition[key];\n\n      const isServiceDefined =\n        deepDefinition && !isUndefined(deepDefinition.service);\n      const isServiceBoolean = isServiceDefined\n        ? deepDefinition.service !== false\n        : false;\n\n      if (isServiceDefined && isServiceBoolean) {\n        accumulator.push({\n          name: nameExtended,\n          service: deepDefinition,\n        });\n      }\n      // Continue recursion until objects end or service definition found\n      else {\n        this.collectDeepServices(nameExtended, deepDefinition, accumulator);\n      }\n    }\n  }\n\n  private parseDeepServiceName(name: string, key: string): string {\n    // If depth is zero then just return key\n    if (name.length === 0) {\n      return key;\n    }\n    // Otherwise add next through dot syntax\n    return name + '.' + key;\n  }\n\n  private async createServices(grpcPkg: any, packageName: string) {\n    if (!grpcPkg) {\n      const invalidPackageError = new InvalidGrpcPackageException(packageName);\n      this.logger.error(invalidPackageError.message, invalidPackageError.stack);\n      throw invalidPackageError;\n    }\n\n    // Take all of the services defined in grpcPkg and assign them to\n    // method handlers defined in Controllers\n    for (const definition of this.getServiceNames(grpcPkg)) {\n      this.grpcClient.addService(\n        // First parameter requires exact service definition from proto\n        definition.service.service,\n        // Here full proto definition required along with namespaced pattern name\n        await this.createService(definition.service, definition.name),\n      );\n    }\n  }\n}\n"]}