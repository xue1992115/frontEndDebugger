{"version":3,"file":"server-mqtt.js","sourceRoot":"","sources":["server-mqtt.ts"],"names":[],"mappings":"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","sourcesContent":["import { isUndefined } from '@nestjs/common/utils/shared.utils';\nimport {\n  CONNECT_EVENT,\n  ERROR_EVENT,\n  MESSAGE_EVENT,\n  MQTT_DEFAULT_URL,\n  MQTT_SEPARATOR,\n  MQTT_WILDCARD_ALL,\n  MQTT_WILDCARD_SINGLE,\n  NO_MESSAGE_HANDLER,\n} from '../constants';\nimport { MqttContext } from '../ctx-host/mqtt.context';\nimport { Transport } from '../enums';\nimport { MqttClient } from '../external/mqtt-client.interface';\nimport {\n  CustomTransportStrategy,\n  IncomingRequest,\n  MessageHandler,\n  PacketId,\n  ReadPacket,\n} from '../interfaces';\nimport { MqttOptions } from '../interfaces/microservice-configuration.interface';\nimport { MqttRecord } from '../record-builders/mqtt.record-builder';\nimport { MqttRecordSerializer } from '../serializers/mqtt-record.serializer';\nimport { Server } from './server';\n\nlet mqttPackage: any = {};\n\nexport class ServerMqtt extends Server implements CustomTransportStrategy {\n  public readonly transportId = Transport.MQTT;\n\n  protected mqttClient: MqttClient;\n\n  private readonly url: string;\n\n  constructor(private readonly options: MqttOptions['options']) {\n    super();\n    this.url = this.getOptionsProp(options, 'url') || MQTT_DEFAULT_URL;\n\n    mqttPackage = this.loadPackage('mqtt', ServerMqtt.name, () =>\n      require('mqtt'),\n    );\n\n    this.initializeSerializer(options);\n    this.initializeDeserializer(options);\n  }\n\n  public async listen(\n    callback: (err?: unknown, ...optionalParams: unknown[]) => void,\n  ) {\n    try {\n      this.mqttClient = this.createMqttClient();\n      this.start(callback);\n    } catch (err) {\n      callback(err);\n    }\n  }\n\n  public start(\n    callback: (err?: unknown, ...optionalParams: unknown[]) => void,\n  ) {\n    this.handleError(this.mqttClient);\n    this.bindEvents(this.mqttClient);\n\n    this.mqttClient.on(CONNECT_EVENT, () => callback());\n  }\n\n  public bindEvents(mqttClient: MqttClient) {\n    mqttClient.on(MESSAGE_EVENT, this.getMessageHandler(mqttClient).bind(this));\n    const registeredPatterns = [...this.messageHandlers.keys()];\n    registeredPatterns.forEach(pattern => {\n      const { isEventHandler } = this.messageHandlers.get(pattern);\n      mqttClient.subscribe(\n        isEventHandler ? pattern : this.getRequestPattern(pattern),\n        this.getOptionsProp(this.options, 'subscribeOptions'),\n      );\n    });\n  }\n\n  public close() {\n    this.mqttClient && this.mqttClient.end();\n  }\n\n  public createMqttClient(): MqttClient {\n    return mqttPackage.connect(this.url, this.options as MqttOptions);\n  }\n\n  public getMessageHandler(pub: MqttClient): Function {\n    return async (\n      channel: string,\n      buffer: Buffer,\n      originalPacket?: Record<string, any>,\n    ) => this.handleMessage(channel, buffer, pub, originalPacket);\n  }\n\n  public async handleMessage(\n    channel: string,\n    buffer: Buffer,\n    pub: MqttClient,\n    originalPacket?: Record<string, any>,\n  ): Promise<any> {\n    const rawPacket = this.parseMessage(buffer.toString());\n    const packet = await this.deserializer.deserialize(rawPacket, { channel });\n    const mqttContext = new MqttContext([channel, originalPacket]);\n    if (isUndefined((packet as IncomingRequest).id)) {\n      return this.handleEvent(channel, packet, mqttContext);\n    }\n    const publish = this.getPublisher(\n      pub,\n      channel,\n      (packet as IncomingRequest).id,\n    );\n    const handler = this.getHandlerByPattern(channel);\n\n    if (!handler) {\n      const status = 'error';\n      const noHandlerPacket = {\n        id: (packet as IncomingRequest).id,\n        status,\n        err: NO_MESSAGE_HANDLER,\n      };\n      return publish(noHandlerPacket);\n    }\n    const response$ = this.transformToObservable(\n      await handler(packet.data, mqttContext),\n    );\n    response$ && this.send(response$, publish);\n  }\n\n  public getPublisher(client: MqttClient, pattern: any, id: string): any {\n    return (response: any) => {\n      Object.assign(response, { id });\n      const outgoingResponse: Partial<MqttRecord> =\n        this.serializer.serialize(response);\n      const options = outgoingResponse.options;\n      delete outgoingResponse.options;\n\n      return client.publish(\n        this.getReplyPattern(pattern),\n        JSON.stringify(outgoingResponse),\n        options,\n      );\n    };\n  }\n\n  public parseMessage(content: any): ReadPacket & PacketId {\n    try {\n      return JSON.parse(content);\n    } catch (e) {\n      return content;\n    }\n  }\n\n  public matchMqttPattern(pattern: string, topic: string) {\n    const patternSegments = pattern.split(MQTT_SEPARATOR);\n    const topicSegments = topic.split(MQTT_SEPARATOR);\n\n    const patternSegmentsLength = patternSegments.length;\n    const topicSegmentsLength = topicSegments.length;\n    const lastIndex = patternSegmentsLength - 1;\n\n    for (let i = 0; i < patternSegmentsLength; i++) {\n      const currentPattern = patternSegments[i];\n      const patternChar = currentPattern[0];\n      const currentTopic = topicSegments[i];\n\n      if (!currentTopic && !currentPattern) {\n        continue;\n      }\n      if (!currentTopic && currentPattern !== MQTT_WILDCARD_ALL) {\n        return false;\n      }\n      if (patternChar === MQTT_WILDCARD_ALL) {\n        return i === lastIndex;\n      }\n      if (\n        patternChar !== MQTT_WILDCARD_SINGLE &&\n        currentPattern !== currentTopic\n      ) {\n        return false;\n      }\n    }\n    return patternSegmentsLength === topicSegmentsLength;\n  }\n\n  public getHandlerByPattern(pattern: string): MessageHandler | null {\n    const route = this.getRouteFromPattern(pattern);\n    if (this.messageHandlers.has(route)) {\n      return this.messageHandlers.get(route) || null;\n    }\n\n    for (const [key, value] of this.messageHandlers) {\n      if (\n        !key.includes(MQTT_WILDCARD_SINGLE) &&\n        !key.includes(MQTT_WILDCARD_ALL)\n      ) {\n        continue;\n      }\n      const keyWithoutSharedPrefix = this.removeHandlerKeySharedPrefix(key);\n      if (this.matchMqttPattern(keyWithoutSharedPrefix, route)) {\n        return value;\n      }\n    }\n    return null;\n  }\n\n  public removeHandlerKeySharedPrefix(handlerKey: string) {\n    return handlerKey && handlerKey.startsWith('$share')\n      ? handlerKey.split('/').slice(2).join('/')\n      : handlerKey;\n  }\n\n  public getRequestPattern(pattern: string): string {\n    return pattern;\n  }\n\n  public getReplyPattern(pattern: string): string {\n    return `${pattern}/reply`;\n  }\n\n  public handleError(stream: any) {\n    stream.on(ERROR_EVENT, (err: any) => this.logger.error(err));\n  }\n\n  protected initializeSerializer(options: MqttOptions['options']) {\n    this.serializer = options?.serializer ?? new MqttRecordSerializer();\n  }\n}\n"]}