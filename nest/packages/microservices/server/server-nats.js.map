{"version":3,"file":"server-nats.js","sourceRoot":"","sources":["server-nats.ts"],"names":[],"mappings":"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","sourcesContent":["import { isUndefined, isObject } from '@nestjs/common/utils/shared.utils';\nimport { NATS_DEFAULT_URL, NO_MESSAGE_HANDLER } from '../constants';\nimport { NatsContext } from '../ctx-host/nats.context';\nimport { NatsRequestJSONDeserializer } from '../deserializers/nats-request-json.deserializer';\nimport { Transport } from '../enums';\nimport { Client, NatsMsg } from '../external/nats-client.interface';\nimport { CustomTransportStrategy } from '../interfaces';\nimport { NatsOptions } from '../interfaces/microservice-configuration.interface';\nimport { IncomingRequest } from '../interfaces/packet.interface';\nimport { NatsRecord } from '../record-builders';\nimport { NatsRecordSerializer } from '../serializers/nats-record.serializer';\nimport { Server } from './server';\n\nlet natsPackage = {} as any;\n\nexport class ServerNats extends Server implements CustomTransportStrategy {\n  public readonly transportId = Transport.NATS;\n\n  private natsClient: Client;\n\n  constructor(private readonly options: NatsOptions['options']) {\n    super();\n\n    natsPackage = this.loadPackage('nats', ServerNats.name, () =>\n      require('nats'),\n    );\n\n    this.initializeSerializer(options);\n    this.initializeDeserializer(options);\n  }\n\n  public async listen(\n    callback: (err?: unknown, ...optionalParams: unknown[]) => void,\n  ) {\n    try {\n      this.natsClient = await this.createNatsClient();\n      this.handleStatusUpdates(this.natsClient);\n      this.start(callback);\n    } catch (err) {\n      callback(err);\n    }\n  }\n\n  public start(\n    callback: (err?: unknown, ...optionalParams: unknown[]) => void,\n  ) {\n    this.bindEvents(this.natsClient);\n    callback();\n  }\n\n  public bindEvents(client: Client) {\n    const queue = this.getOptionsProp(this.options, 'queue');\n    const subscribe = (channel: string) =>\n      client.subscribe(channel, {\n        queue,\n        callback: this.getMessageHandler(channel).bind(this),\n      });\n\n    const registeredPatterns = [...this.messageHandlers.keys()];\n    registeredPatterns.forEach(channel => subscribe(channel));\n  }\n\n  public async close() {\n    await this.natsClient?.close();\n    this.natsClient = null;\n  }\n\n  public createNatsClient(): Promise<Client> {\n    const options = this.options || ({} as NatsOptions);\n    return natsPackage.connect({\n      servers: NATS_DEFAULT_URL,\n      ...options,\n    });\n  }\n\n  public getMessageHandler(channel: string): Function {\n    return async (error: object | undefined, message: NatsMsg) => {\n      if (error) {\n        return this.logger.error(error);\n      }\n      return this.handleMessage(channel, message);\n    };\n  }\n\n  public async handleMessage(channel: string, natsMsg: NatsMsg) {\n    const callerSubject = natsMsg.subject;\n    const rawMessage = natsMsg.data;\n    const replyTo = natsMsg.reply;\n\n    const natsCtx = new NatsContext([callerSubject, natsMsg.headers]);\n    const message = await this.deserializer.deserialize(rawMessage, {\n      channel,\n      replyTo,\n    });\n    if (isUndefined((message as IncomingRequest).id)) {\n      return this.handleEvent(channel, message, natsCtx);\n    }\n    const publish = this.getPublisher(natsMsg, (message as IncomingRequest).id);\n    const handler = this.getHandlerByPattern(channel);\n    if (!handler) {\n      const status = 'error';\n      const noHandlerPacket = {\n        id: (message as IncomingRequest).id,\n        status,\n        err: NO_MESSAGE_HANDLER,\n      };\n      return publish(noHandlerPacket);\n    }\n    const response$ = this.transformToObservable(\n      await handler(message.data, natsCtx),\n    );\n    response$ && this.send(response$, publish);\n  }\n\n  public getPublisher(natsMsg: NatsMsg, id: string) {\n    if (natsMsg.reply) {\n      return (response: any) => {\n        Object.assign(response, { id });\n        const outgoingResponse: NatsRecord =\n          this.serializer.serialize(response);\n        return natsMsg.respond(outgoingResponse.data, {\n          headers: outgoingResponse.headers,\n        });\n      };\n    }\n\n    // In case the \"reply\" topic is not provided, there's no need for a reply.\n    // Method returns a noop function instead\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    return () => {};\n  }\n\n  public async handleStatusUpdates(client: Client) {\n    for await (const status of client.status()) {\n      const data =\n        status.data && isObject(status.data)\n          ? JSON.stringify(status.data)\n          : status.data;\n\n      switch (status.type) {\n        case 'error':\n        case 'disconnect':\n          this.logger.error(\n            `NatsError: type: \"${status.type}\", data: \"${data}\".`,\n          );\n          break;\n\n        case 'pingTimer':\n          if (this.options.debug) {\n            this.logger.debug(\n              `NatsStatus: type: \"${status.type}\", data: \"${data}\".`,\n            );\n          }\n          break;\n\n        default:\n          this.logger.log(\n            `NatsStatus: type: \"${status.type}\", data: \"${data}\".`,\n          );\n          break;\n      }\n    }\n  }\n\n  protected initializeSerializer(options: NatsOptions['options']) {\n    this.serializer = options?.serializer ?? new NatsRecordSerializer();\n  }\n\n  protected initializeDeserializer(options: NatsOptions['options']) {\n    this.deserializer =\n      options?.deserializer ?? new NatsRequestJSONDeserializer();\n  }\n}\n"]}