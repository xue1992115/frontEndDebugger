{"version":3,"file":"server-tcp.js","sourceRoot":"","sources":["server-tcp.ts"],"names":[],"mappings":";;;AACA,oEAA0E;AAC1E,2BAA2B;AAE3B,4CASsB;AACtB,yDAAqD;AACrD,oCAAqC;AACrC,wCAAmD;AACnD,6BAAsD;AAStD,qCAAkC;AAElC,MAAa,SAAU,SAAQ,eAAM;IAYnC,YAA6B,OAA8B;QACzD,KAAK,EAAE,CAAC;QADmB,YAAO,GAAP,OAAO,CAAuB;QAX3C,gBAAW,GAAG,iBAAS,CAAC,GAAG,CAAC;QAOpC,2BAAsB,GAAG,KAAK,CAAC;QAC/B,uBAAkB,GAAG,CAAC,CAAC;QAK7B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,MAAM,CAAC,IAAI,4BAAgB,CAAC;QACrE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,MAAM,CAAC,IAAI,4BAAgB,CAAC;QACrE,IAAI,CAAC,WAAW;YACd,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,aAAa,CAAC,IAAI,oBAAU,CAAC;QAC5D,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;QAE7D,IAAI,CAAC,IAAI,EAAE,CAAC;QACZ,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;QACnC,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC;IACvC,CAAC;IAEM,MAAM,CACX,QAA+D;QAE/D,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,uBAAW,EAAE,CAAC,GAA4B,EAAE,EAAE;YAC7D,IAAI,CAAA,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,IAAI,MAAK,sBAAU,IAAI,CAAA,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,IAAI,MAAK,wBAAY,EAAE;gBAC1D,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC;aACtB;QACH,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,QAAsB,CAAC,CAAC;IACnE,CAAC;IAEM,KAAK;QACV,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC;QAEnC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;IACtB,CAAC;IAEM,WAAW,CAAC,MAAc;QAC/B,MAAM,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;QAClD,UAAU,CAAC,EAAE,CAAC,yBAAa,EAAE,KAAK,EAAE,GAA0B,EAAE,EAAE,CAChE,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE,GAAG,CAAC,CACpC,CAAC;QACF,UAAU,CAAC,EAAE,CAAC,uBAAW,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAC1D,CAAC;IAEM,KAAK,CAAC,aAAa,CAAC,MAAiB,EAAE,UAAmB;QAC/D,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;QAC/D,MAAM,OAAO,GAAG,CAAC,IAAA,uBAAQ,EAAC,MAAM,CAAC,OAAO,CAAC;YACvC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC;YAChC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC;QAEnB,MAAM,UAAU,GAAG,IAAI,wBAAU,CAAC,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC;QACrD,IAAI,IAAA,0BAAW,EAAE,MAA0B,CAAC,EAAE,CAAC,EAAE;YAC/C,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,MAAM,EAAE,UAAU,CAAC,CAAC;SACtD;QACD,MAAM,OAAO,GAAG,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;QAClD,IAAI,CAAC,OAAO,EAAE;YACZ,MAAM,MAAM,GAAG,OAAO,CAAC;YACvB,MAAM,eAAe,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC;gBAChD,EAAE,EAAG,MAA0B,CAAC,EAAE;gBAClC,MAAM;gBACN,GAAG,EAAE,8BAAkB;aACxB,CAAC,CAAC;YACH,OAAO,MAAM,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC;SAC5C;QACD,MAAM,SAAS,GAAG,IAAI,CAAC,qBAAqB,CAC1C,MAAM,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE,UAAU,CAAC,CACvC,CAAC;QAEF,SAAS;YACP,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,EAAE;gBAC1B,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,EAAE,EAAG,MAA0B,CAAC,EAAE,EAAE,CAAC,CAAC;gBAC5D,MAAM,gBAAgB,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAChD,IAA8B,CAC/B,CAAC;gBACF,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC;YACvC,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,WAAW;QAChB,IACE,IAAI,CAAC,sBAAsB;YAC3B,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,eAAe,CAAC;YACnD,IAAI,CAAC,kBAAkB;gBACrB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,eAAe,CAAC,EACpD;YACA,OAAO,SAAS,CAAC;SAClB;QACD,EAAE,IAAI,CAAC,kBAAkB,CAAC;QAC1B,OAAO,UAAU,CACf,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,EAC9C,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,YAAY,CAAC,IAAI,CAAC,CACrD,CAAC;IACJ,CAAC;IAEO,IAAI;QACV,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,8BAA8B;YAC9B,IAAI,CAAC,MAAM,GAAG,IAAA,kBAAe,EAC3B,IAAI,CAAC,UAAU,EACf,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAC5B,CAAC;SACH;aAAM;YACL,+BAA+B;YAC/B,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;SAC7D;QACD,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,uBAAW,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACzD,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,uBAAW,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3D,CAAC;IAEO,iBAAiB,CAAC,MAAc;QACtC,OAAO,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;IACtC,CAAC;CACF;AAtHD,8BAsHC","sourcesContent":["import { Type } from '@nestjs/common';\nimport { isString, isUndefined } from '@nestjs/common/utils/shared.utils';\nimport * as net from 'net';\nimport { Server as NetSocket, Socket } from 'net';\nimport {\n  CLOSE_EVENT,\n  EADDRINUSE,\n  ECONNREFUSED,\n  ERROR_EVENT,\n  MESSAGE_EVENT,\n  NO_MESSAGE_HANDLER,\n  TCP_DEFAULT_HOST,\n  TCP_DEFAULT_PORT,\n} from '../constants';\nimport { TcpContext } from '../ctx-host/tcp.context';\nimport { Transport } from '../enums';\nimport { JsonSocket, TcpSocket } from '../helpers';\nimport { createServer as tlsCreateServer } from 'tls';\nimport {\n  CustomTransportStrategy,\n  IncomingRequest,\n  PacketId,\n  ReadPacket,\n  WritePacket,\n} from '../interfaces';\nimport { TcpOptions } from '../interfaces/microservice-configuration.interface';\nimport { Server } from './server';\n\nexport class ServerTCP extends Server implements CustomTransportStrategy {\n  public readonly transportId = Transport.TCP;\n\n  protected server: NetSocket;\n\n  private readonly port: number;\n  private readonly host: string;\n  private readonly socketClass: Type<TcpSocket>;\n  private isExplicitlyTerminated = false;\n  private retryAttemptsCount = 0;\n  private tlsOptions?;\n\n  constructor(private readonly options: TcpOptions['options']) {\n    super();\n    this.port = this.getOptionsProp(options, 'port') || TCP_DEFAULT_PORT;\n    this.host = this.getOptionsProp(options, 'host') || TCP_DEFAULT_HOST;\n    this.socketClass =\n      this.getOptionsProp(options, 'socketClass') || JsonSocket;\n    this.tlsOptions = this.getOptionsProp(options, 'tlsOptions');\n\n    this.init();\n    this.initializeSerializer(options);\n    this.initializeDeserializer(options);\n  }\n\n  public listen(\n    callback: (err?: unknown, ...optionalParams: unknown[]) => void,\n  ) {\n    this.server.once(ERROR_EVENT, (err: Record<string, unknown>) => {\n      if (err?.code === EADDRINUSE || err?.code === ECONNREFUSED) {\n        return callback(err);\n      }\n    });\n    this.server.listen(this.port, this.host, callback as () => void);\n  }\n\n  public close() {\n    this.isExplicitlyTerminated = true;\n\n    this.server.close();\n  }\n\n  public bindHandler(socket: Socket) {\n    const readSocket = this.getSocketInstance(socket);\n    readSocket.on(MESSAGE_EVENT, async (msg: ReadPacket & PacketId) =>\n      this.handleMessage(readSocket, msg),\n    );\n    readSocket.on(ERROR_EVENT, this.handleError.bind(this));\n  }\n\n  public async handleMessage(socket: TcpSocket, rawMessage: unknown) {\n    const packet = await this.deserializer.deserialize(rawMessage);\n    const pattern = !isString(packet.pattern)\n      ? JSON.stringify(packet.pattern)\n      : packet.pattern;\n\n    const tcpContext = new TcpContext([socket, pattern]);\n    if (isUndefined((packet as IncomingRequest).id)) {\n      return this.handleEvent(pattern, packet, tcpContext);\n    }\n    const handler = this.getHandlerByPattern(pattern);\n    if (!handler) {\n      const status = 'error';\n      const noHandlerPacket = this.serializer.serialize({\n        id: (packet as IncomingRequest).id,\n        status,\n        err: NO_MESSAGE_HANDLER,\n      });\n      return socket.sendMessage(noHandlerPacket);\n    }\n    const response$ = this.transformToObservable(\n      await handler(packet.data, tcpContext),\n    );\n\n    response$ &&\n      this.send(response$, data => {\n        Object.assign(data, { id: (packet as IncomingRequest).id });\n        const outgoingResponse = this.serializer.serialize(\n          data as WritePacket & PacketId,\n        );\n        socket.sendMessage(outgoingResponse);\n      });\n  }\n\n  public handleClose(): undefined | number | NodeJS.Timer {\n    if (\n      this.isExplicitlyTerminated ||\n      !this.getOptionsProp(this.options, 'retryAttempts') ||\n      this.retryAttemptsCount >=\n        this.getOptionsProp(this.options, 'retryAttempts')\n    ) {\n      return undefined;\n    }\n    ++this.retryAttemptsCount;\n    return setTimeout(\n      () => this.server.listen(this.port, this.host),\n      this.getOptionsProp(this.options, 'retryDelay') || 0,\n    );\n  }\n\n  private init() {\n    if (this.tlsOptions) {\n      // TLS enabled, use tls server\n      this.server = tlsCreateServer(\n        this.tlsOptions,\n        this.bindHandler.bind(this),\n      );\n    } else {\n      // TLS disabled, use net server\n      this.server = net.createServer(this.bindHandler.bind(this));\n    }\n    this.server.on(ERROR_EVENT, this.handleError.bind(this));\n    this.server.on(CLOSE_EVENT, this.handleClose.bind(this));\n  }\n\n  private getSocketInstance(socket: Socket): TcpSocket {\n    return new this.socketClass(socket);\n  }\n}\n"]}