{"version":3,"file":"server-kafka.js","sourceRoot":"","sources":["server-kafka.ts"],"names":[],"mappings":"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","sourcesContent":["import { Logger } from '@nestjs/common/services/logger.service';\nimport { isNil } from '@nestjs/common/utils/shared.utils';\nimport { isObservable, lastValueFrom, Observable, ReplaySubject } from 'rxjs';\nimport {\n  KAFKA_DEFAULT_BROKER,\n  KAFKA_DEFAULT_CLIENT,\n  KAFKA_DEFAULT_GROUP,\n  NO_EVENT_HANDLER,\n  NO_MESSAGE_HANDLER,\n} from '../constants';\nimport { KafkaContext } from '../ctx-host';\nimport { KafkaRequestDeserializer } from '../deserializers/kafka-request.deserializer';\nimport { KafkaHeaders, Transport } from '../enums';\nimport { KafkaRetriableException } from '../exceptions';\nimport {\n  BrokersFunction,\n  Consumer,\n  ConsumerConfig,\n  EachMessagePayload,\n  Kafka,\n  KafkaConfig,\n  KafkaMessage,\n  Message,\n  Producer,\n  RecordMetadata,\n} from '../external/kafka.interface';\nimport { KafkaLogger, KafkaParser } from '../helpers';\nimport {\n  CustomTransportStrategy,\n  KafkaOptions,\n  OutgoingResponse,\n  ReadPacket,\n} from '../interfaces';\nimport { KafkaRequestSerializer } from '../serializers/kafka-request.serializer';\nimport { Server } from './server';\n\nlet kafkaPackage: any = {};\n\nexport class ServerKafka extends Server implements CustomTransportStrategy {\n  public readonly transportId = Transport.KAFKA;\n\n  protected logger = new Logger(ServerKafka.name);\n  protected client: Kafka = null;\n  protected consumer: Consumer = null;\n  protected producer: Producer = null;\n  protected parser: KafkaParser = null;\n\n  protected brokers: string[] | BrokersFunction;\n  protected clientId: string;\n  protected groupId: string;\n\n  constructor(protected readonly options: KafkaOptions['options']) {\n    super();\n\n    const clientOptions =\n      this.getOptionsProp(this.options, 'client') || ({} as KafkaConfig);\n    const consumerOptions =\n      this.getOptionsProp(this.options, 'consumer') || ({} as ConsumerConfig);\n    const postfixId =\n      this.getOptionsProp(this.options, 'postfixId') ?? '-server';\n\n    this.brokers = clientOptions.brokers || [KAFKA_DEFAULT_BROKER];\n\n    // append a unique id to the clientId and groupId\n    // so they don't collide with a microservices client\n    this.clientId =\n      (clientOptions.clientId || KAFKA_DEFAULT_CLIENT) + postfixId;\n    this.groupId = (consumerOptions.groupId || KAFKA_DEFAULT_GROUP) + postfixId;\n\n    kafkaPackage = this.loadPackage('kafkajs', ServerKafka.name, () =>\n      require('kafkajs'),\n    );\n\n    this.parser = new KafkaParser((options && options.parser) || undefined);\n\n    this.initializeSerializer(options);\n    this.initializeDeserializer(options);\n  }\n\n  public async listen(\n    callback: (err?: unknown, ...optionalParams: unknown[]) => void,\n  ): Promise<void> {\n    try {\n      this.client = this.createClient();\n      await this.start(callback);\n    } catch (err) {\n      callback(err);\n    }\n  }\n\n  public async close(): Promise<void> {\n    this.consumer && (await this.consumer.disconnect());\n    this.producer && (await this.producer.disconnect());\n    this.consumer = null;\n    this.producer = null;\n    this.client = null;\n  }\n\n  public async start(callback: () => void): Promise<void> {\n    const consumerOptions = Object.assign(this.options.consumer || {}, {\n      groupId: this.groupId,\n    });\n    this.consumer = this.client.consumer(consumerOptions);\n    this.producer = this.client.producer(this.options.producer);\n\n    await this.consumer.connect();\n    await this.producer.connect();\n    await this.bindEvents(this.consumer);\n    callback();\n  }\n\n  public createClient<T = any>(): T {\n    return new kafkaPackage.Kafka(\n      Object.assign(\n        { logCreator: KafkaLogger.bind(null, this.logger) },\n        this.options.client,\n        { clientId: this.clientId, brokers: this.brokers },\n      ) as KafkaConfig,\n    );\n  }\n\n  public async bindEvents(consumer: Consumer) {\n    const registeredPatterns = [...this.messageHandlers.keys()];\n    const consumerSubscribeOptions = this.options.subscribe || {};\n    const subscribeToPattern = async (pattern: string) =>\n      consumer.subscribe({\n        topic: pattern,\n        ...consumerSubscribeOptions,\n      });\n    await Promise.all(registeredPatterns.map(subscribeToPattern));\n\n    const consumerRunOptions = Object.assign(this.options.run || {}, {\n      eachMessage: this.getMessageHandler(),\n    });\n    await consumer.run(consumerRunOptions);\n  }\n\n  public getMessageHandler() {\n    return async (payload: EachMessagePayload) => this.handleMessage(payload);\n  }\n\n  public getPublisher(\n    replyTopic: string,\n    replyPartition: string,\n    correlationId: string,\n  ): (data: any) => Promise<RecordMetadata[]> {\n    return (data: any) =>\n      this.sendMessage(data, replyTopic, replyPartition, correlationId);\n  }\n\n  public async handleMessage(payload: EachMessagePayload) {\n    const channel = payload.topic;\n    const rawMessage = this.parser.parse<KafkaMessage>(\n      Object.assign(payload.message, {\n        topic: payload.topic,\n        partition: payload.partition,\n      }),\n    );\n    const headers = rawMessage.headers as unknown as Record<string, any>;\n    const correlationId = headers[KafkaHeaders.CORRELATION_ID];\n    const replyTopic = headers[KafkaHeaders.REPLY_TOPIC];\n    const replyPartition = headers[KafkaHeaders.REPLY_PARTITION];\n\n    const packet = await this.deserializer.deserialize(rawMessage, { channel });\n    const kafkaContext = new KafkaContext([\n      rawMessage,\n      payload.partition,\n      payload.topic,\n      this.consumer,\n      payload.heartbeat,\n      this.producer,\n    ]);\n    const handler = this.getHandlerByPattern(packet.pattern);\n    // if the correlation id or reply topic is not set\n    // then this is an event (events could still have correlation id)\n    if (handler?.isEventHandler || !correlationId || !replyTopic) {\n      return this.handleEvent(packet.pattern, packet, kafkaContext);\n    }\n\n    const publish = this.getPublisher(\n      replyTopic,\n      replyPartition,\n      correlationId,\n    );\n\n    if (!handler) {\n      return publish({\n        id: correlationId,\n        err: NO_MESSAGE_HANDLER,\n      });\n    }\n\n    const response$ = this.transformToObservable(\n      handler(packet.data, kafkaContext),\n    );\n\n    const replayStream$ = new ReplaySubject();\n    await this.combineStreamsAndThrowIfRetriable(response$, replayStream$);\n\n    this.send(replayStream$, publish);\n  }\n\n  private combineStreamsAndThrowIfRetriable(\n    response$: Observable<any>,\n    replayStream$: ReplaySubject<unknown>,\n  ) {\n    return new Promise<void>((resolve, reject) => {\n      let isPromiseResolved = false;\n      response$.subscribe({\n        next: val => {\n          replayStream$.next(val);\n          if (!isPromiseResolved) {\n            isPromiseResolved = true;\n            resolve();\n          }\n        },\n        error: err => {\n          if (err instanceof KafkaRetriableException && !isPromiseResolved) {\n            isPromiseResolved = true;\n            reject(err);\n          } else {\n            resolve();\n          }\n          replayStream$.error(err);\n        },\n        complete: () => replayStream$.complete(),\n      });\n    });\n  }\n\n  public async sendMessage(\n    message: OutgoingResponse,\n    replyTopic: string,\n    replyPartition: string,\n    correlationId: string,\n  ): Promise<RecordMetadata[]> {\n    const outgoingMessage = await this.serializer.serialize(message.response);\n    this.assignReplyPartition(replyPartition, outgoingMessage);\n    this.assignCorrelationIdHeader(correlationId, outgoingMessage);\n    this.assignErrorHeader(message, outgoingMessage);\n    this.assignIsDisposedHeader(message, outgoingMessage);\n\n    const replyMessage = Object.assign(\n      {\n        topic: replyTopic,\n        messages: [outgoingMessage],\n      },\n      this.options.send || {},\n    );\n    return this.producer.send(replyMessage);\n  }\n\n  public assignIsDisposedHeader(\n    outgoingResponse: OutgoingResponse,\n    outgoingMessage: Message,\n  ) {\n    if (!outgoingResponse.isDisposed) {\n      return;\n    }\n    outgoingMessage.headers[KafkaHeaders.NEST_IS_DISPOSED] = Buffer.alloc(1);\n  }\n\n  public assignErrorHeader(\n    outgoingResponse: OutgoingResponse,\n    outgoingMessage: Message,\n  ) {\n    if (!outgoingResponse.err) {\n      return;\n    }\n    const stringifiedError =\n      typeof outgoingResponse.err === 'object'\n        ? JSON.stringify(outgoingResponse.err)\n        : outgoingResponse.err;\n    outgoingMessage.headers[KafkaHeaders.NEST_ERR] =\n      Buffer.from(stringifiedError);\n  }\n\n  public assignCorrelationIdHeader(\n    correlationId: string,\n    outgoingMessage: Message,\n  ) {\n    outgoingMessage.headers[KafkaHeaders.CORRELATION_ID] =\n      Buffer.from(correlationId);\n  }\n\n  public assignReplyPartition(\n    replyPartition: string,\n    outgoingMessage: Message,\n  ) {\n    if (isNil(replyPartition)) {\n      return;\n    }\n    outgoingMessage.partition = parseFloat(replyPartition);\n  }\n\n  public async handleEvent(\n    pattern: string,\n    packet: ReadPacket,\n    context: KafkaContext,\n  ): Promise<any> {\n    const handler = this.getHandlerByPattern(pattern);\n    if (!handler) {\n      return this.logger.error(NO_EVENT_HANDLER`${pattern}`);\n    }\n    const resultOrStream = await handler(packet.data, context);\n    if (isObservable(resultOrStream)) {\n      await lastValueFrom(resultOrStream);\n    }\n  }\n\n  protected initializeSerializer(options: KafkaOptions['options']) {\n    this.serializer =\n      (options && options.serializer) || new KafkaRequestSerializer();\n  }\n\n  protected initializeDeserializer(options: KafkaOptions['options']) {\n    this.deserializer = options?.deserializer ?? new KafkaRequestDeserializer();\n  }\n}\n"]}