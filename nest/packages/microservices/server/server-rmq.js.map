{"version":3,"file":"server-rmq.js","sourceRoot":"","sources":["server-rmq.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  isNil,\n  isString,\n  isUndefined,\n} from '@nestjs/common/utils/shared.utils';\nimport {\n  CONNECTION_FAILED_MESSAGE,\n  CONNECT_EVENT,\n  CONNECT_FAILED_EVENT,\n  DISCONNECTED_RMQ_MESSAGE,\n  DISCONNECT_EVENT,\n  NO_MESSAGE_HANDLER,\n  RQM_DEFAULT_IS_GLOBAL_PREFETCH_COUNT,\n  RQM_DEFAULT_NOACK,\n  RQM_DEFAULT_NO_ASSERT,\n  RQM_DEFAULT_PREFETCH_COUNT,\n  RQM_DEFAULT_QUEUE,\n  RQM_DEFAULT_QUEUE_OPTIONS,\n  RQM_DEFAULT_URL,\n} from '../constants';\nimport { RmqContext } from '../ctx-host';\nimport { Transport } from '../enums';\nimport { RmqUrl } from '../external/rmq-url.interface';\nimport { CustomTransportStrategy, RmqOptions } from '../interfaces';\nimport {\n  IncomingRequest,\n  OutgoingResponse,\n} from '../interfaces/packet.interface';\nimport { RmqRecordSerializer } from '../serializers/rmq-record.serializer';\nimport { Server } from './server';\n\nlet rqmPackage: any = {};\n\nconst INFINITE_CONNECTION_ATTEMPTS = -1;\n\nexport class ServerRMQ extends Server implements CustomTransportStrategy {\n  public readonly transportId = Transport.RMQ;\n\n  protected server: any = null;\n  protected channel: any = null;\n  protected connectionAttempts = 0;\n  protected readonly urls: string[] | RmqUrl[];\n  protected readonly queue: string;\n  protected readonly prefetchCount: number;\n  protected readonly queueOptions: any;\n  protected readonly isGlobalPrefetchCount: boolean;\n  protected readonly noAssert: boolean;\n\n  constructor(protected readonly options: RmqOptions['options']) {\n    super();\n    this.urls = this.getOptionsProp(this.options, 'urls') || [RQM_DEFAULT_URL];\n    this.queue =\n      this.getOptionsProp(this.options, 'queue') || RQM_DEFAULT_QUEUE;\n    this.prefetchCount =\n      this.getOptionsProp(this.options, 'prefetchCount') ||\n      RQM_DEFAULT_PREFETCH_COUNT;\n    this.isGlobalPrefetchCount =\n      this.getOptionsProp(this.options, 'isGlobalPrefetchCount') ||\n      RQM_DEFAULT_IS_GLOBAL_PREFETCH_COUNT;\n    this.queueOptions =\n      this.getOptionsProp(this.options, 'queueOptions') ||\n      RQM_DEFAULT_QUEUE_OPTIONS;\n    this.noAssert =\n      this.getOptionsProp(this.options, 'noAssert') || RQM_DEFAULT_NO_ASSERT;\n\n    this.loadPackage('amqplib', ServerRMQ.name, () => require('amqplib'));\n    rqmPackage = this.loadPackage(\n      'amqp-connection-manager',\n      ServerRMQ.name,\n      () => require('amqp-connection-manager'),\n    );\n\n    this.initializeSerializer(options);\n    this.initializeDeserializer(options);\n  }\n\n  public async listen(\n    callback: (err?: unknown, ...optionalParams: unknown[]) => void,\n  ): Promise<void> {\n    try {\n      await this.start(callback);\n    } catch (err) {\n      callback(err);\n    }\n  }\n\n  public close(): void {\n    this.channel && this.channel.close();\n    this.server && this.server.close();\n  }\n\n  public async start(\n    callback?: (err?: unknown, ...optionalParams: unknown[]) => void,\n  ) {\n    this.server = this.createClient();\n    this.server.on(CONNECT_EVENT, () => {\n      if (this.channel) {\n        return;\n      }\n      this.channel = this.server.createChannel({\n        json: false,\n        setup: (channel: any) => this.setupChannel(channel, callback),\n      });\n    });\n\n    const maxConnectionAttempts = this.getOptionsProp(\n      this.options,\n      'maxConnectionAttempts',\n      INFINITE_CONNECTION_ATTEMPTS,\n    );\n    this.server.on(DISCONNECT_EVENT, (err: any) => {\n      this.logger.error(DISCONNECTED_RMQ_MESSAGE);\n      this.logger.error(err);\n    });\n    this.server.on(CONNECT_FAILED_EVENT, (error: Record<string, unknown>) => {\n      this.logger.error(CONNECTION_FAILED_MESSAGE);\n      if (error?.err) {\n        this.logger.error(error.err);\n      }\n      const isReconnecting = !!this.channel;\n      if (\n        maxConnectionAttempts === INFINITE_CONNECTION_ATTEMPTS ||\n        isReconnecting\n      ) {\n        return;\n      }\n      if (++this.connectionAttempts === maxConnectionAttempts) {\n        this.close();\n        callback?.(error.err ?? new Error(CONNECTION_FAILED_MESSAGE));\n      }\n    });\n  }\n\n  public createClient<T = any>(): T {\n    const socketOptions = this.getOptionsProp(this.options, 'socketOptions');\n    return rqmPackage.connect(this.urls, {\n      connectionOptions: socketOptions,\n      heartbeatIntervalInSeconds: socketOptions?.heartbeatIntervalInSeconds,\n      reconnectTimeInSeconds: socketOptions?.reconnectTimeInSeconds,\n    });\n  }\n\n  public async setupChannel(channel: any, callback: Function) {\n    const noAck = this.getOptionsProp(this.options, 'noAck', RQM_DEFAULT_NOACK);\n\n    if (!this.queueOptions.noAssert) {\n      await channel.assertQueue(this.queue, this.queueOptions);\n    }\n    await channel.prefetch(this.prefetchCount, this.isGlobalPrefetchCount);\n    channel.consume(\n      this.queue,\n      (msg: Record<string, any>) => this.handleMessage(msg, channel),\n      {\n        noAck,\n      },\n    );\n    callback();\n  }\n\n  public async handleMessage(\n    message: Record<string, any>,\n    channel: any,\n  ): Promise<void> {\n    if (isNil(message)) {\n      return;\n    }\n    const { content, properties } = message;\n    const rawMessage = this.parseMessageContent(content);\n    const packet = await this.deserializer.deserialize(rawMessage, properties);\n    const pattern = isString(packet.pattern)\n      ? packet.pattern\n      : JSON.stringify(packet.pattern);\n\n    const rmqContext = new RmqContext([message, channel, pattern]);\n    if (isUndefined((packet as IncomingRequest).id)) {\n      return this.handleEvent(pattern, packet, rmqContext);\n    }\n    const handler = this.getHandlerByPattern(pattern);\n\n    if (!handler) {\n      const status = 'error';\n      const noHandlerPacket = {\n        id: (packet as IncomingRequest).id,\n        err: NO_MESSAGE_HANDLER,\n        status,\n      };\n      return this.sendMessage(\n        noHandlerPacket,\n        properties.replyTo,\n        properties.correlationId,\n      );\n    }\n    const response$ = this.transformToObservable(\n      await handler(packet.data, rmqContext),\n    );\n\n    const publish = <T>(data: T) =>\n      this.sendMessage(data, properties.replyTo, properties.correlationId);\n\n    response$ && this.send(response$, publish);\n  }\n\n  public sendMessage<T = any>(\n    message: T,\n    replyTo: any,\n    correlationId: string,\n  ): void {\n    const outgoingResponse = this.serializer.serialize(\n      message as unknown as OutgoingResponse,\n    );\n    const options = outgoingResponse.options;\n    delete outgoingResponse.options;\n\n    const buffer = Buffer.from(JSON.stringify(outgoingResponse));\n    this.channel.sendToQueue(replyTo, buffer, { correlationId, ...options });\n  }\n\n  protected initializeSerializer(options: RmqOptions['options']) {\n    this.serializer = options?.serializer ?? new RmqRecordSerializer();\n  }\n\n  private parseMessageContent(content: Buffer) {\n    try {\n      return JSON.parse(content.toString());\n    } catch {\n      return content.toString();\n    }\n  }\n}\n"]}