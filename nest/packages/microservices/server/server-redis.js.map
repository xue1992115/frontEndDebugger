{"version":3,"file":"server-redis.js","sourceRoot":"","sources":["server-redis.ts"],"names":[],"mappings":"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","sourcesContent":["import { isUndefined } from '@nestjs/common/utils/shared.utils';\nimport {\n  ERROR_EVENT,\n  MESSAGE_EVENT,\n  NO_MESSAGE_HANDLER,\n  REDIS_DEFAULT_HOST,\n  REDIS_DEFAULT_PORT,\n} from '../constants';\nimport { RedisContext } from '../ctx-host';\nimport { Transport } from '../enums';\nimport {\n  CustomTransportStrategy,\n  IncomingRequest,\n  RedisOptions,\n} from '../interfaces';\nimport { Server } from './server';\n\ntype Redis = any;\n\nlet redisPackage = {} as any;\n\nexport class ServerRedis extends Server implements CustomTransportStrategy {\n  public readonly transportId = Transport.REDIS;\n\n  private subClient: Redis;\n  private pubClient: Redis;\n  private isExplicitlyTerminated = false;\n\n  constructor(private readonly options: RedisOptions['options']) {\n    super();\n\n    redisPackage = this.loadPackage('ioredis', ServerRedis.name, () =>\n      require('ioredis'),\n    );\n\n    this.initializeSerializer(options);\n    this.initializeDeserializer(options);\n  }\n\n  public listen(\n    callback: (err?: unknown, ...optionalParams: unknown[]) => void,\n  ) {\n    try {\n      this.subClient = this.createRedisClient();\n      this.pubClient = this.createRedisClient();\n\n      this.handleError(this.pubClient);\n      this.handleError(this.subClient);\n\n      this.start(callback);\n    } catch (err) {\n      callback(err);\n    }\n  }\n\n  public start(callback?: () => void) {\n    Promise.all([this.subClient.connect(), this.pubClient.connect()])\n      .then(() => {\n        this.bindEvents(this.subClient, this.pubClient);\n        callback();\n      })\n      .catch(callback);\n  }\n\n  public bindEvents(subClient: Redis, pubClient: Redis) {\n    subClient.on(MESSAGE_EVENT, this.getMessageHandler(pubClient).bind(this));\n    const subscribePatterns = [...this.messageHandlers.keys()];\n    subscribePatterns.forEach(pattern => {\n      const { isEventHandler } = this.messageHandlers.get(pattern);\n      subClient.subscribe(\n        isEventHandler ? pattern : this.getRequestPattern(pattern),\n      );\n    });\n  }\n\n  public close() {\n    this.isExplicitlyTerminated = true;\n    this.pubClient && this.pubClient.quit();\n    this.subClient && this.subClient.quit();\n  }\n\n  public createRedisClient(): Redis {\n    return new redisPackage({\n      port: REDIS_DEFAULT_PORT,\n      host: REDIS_DEFAULT_HOST,\n      ...this.getClientOptions(),\n      lazyConnect: true,\n    });\n  }\n\n  public getMessageHandler(pub: Redis) {\n    return async (channel: string, buffer: string | any) =>\n      this.handleMessage(channel, buffer, pub);\n  }\n\n  public async handleMessage(\n    channel: string,\n    buffer: string | any,\n    pub: Redis,\n  ) {\n    const rawMessage = this.parseMessage(buffer);\n    const packet = await this.deserializer.deserialize(rawMessage, { channel });\n    const redisCtx = new RedisContext([channel]);\n\n    if (isUndefined((packet as IncomingRequest).id)) {\n      return this.handleEvent(channel, packet, redisCtx);\n    }\n    const publish = this.getPublisher(\n      pub,\n      channel,\n      (packet as IncomingRequest).id,\n    );\n    const handler = this.getHandlerByPattern(channel);\n\n    if (!handler) {\n      const status = 'error';\n      const noHandlerPacket = {\n        id: (packet as IncomingRequest).id,\n        status,\n        err: NO_MESSAGE_HANDLER,\n      };\n      return publish(noHandlerPacket);\n    }\n    const response$ = this.transformToObservable(\n      await handler(packet.data, redisCtx),\n    );\n    response$ && this.send(response$, publish);\n  }\n\n  public getPublisher(pub: Redis, pattern: any, id: string) {\n    return (response: any) => {\n      Object.assign(response, { id });\n      const outgoingResponse = this.serializer.serialize(response);\n\n      return pub.publish(\n        this.getReplyPattern(pattern),\n        JSON.stringify(outgoingResponse),\n      );\n    };\n  }\n\n  public parseMessage(content: any): Record<string, any> {\n    try {\n      return JSON.parse(content);\n    } catch (e) {\n      return content;\n    }\n  }\n\n  public getRequestPattern(pattern: string): string {\n    return pattern;\n  }\n\n  public getReplyPattern(pattern: string): string {\n    return `${pattern}.reply`;\n  }\n\n  public handleError(stream: any) {\n    stream.on(ERROR_EVENT, (err: any) => this.logger.error(err));\n  }\n\n  public getClientOptions(): Partial<RedisOptions['options']> {\n    const retryStrategy = (times: number) => this.createRetryStrategy(times);\n\n    return {\n      ...(this.options || {}),\n      retryStrategy,\n    };\n  }\n\n  public createRetryStrategy(times: number): undefined | number | void {\n    if (this.isExplicitlyTerminated) {\n      return undefined;\n    }\n    if (\n      !this.getOptionsProp(this.options, 'retryAttempts') ||\n      times > this.getOptionsProp(this.options, 'retryAttempts')\n    ) {\n      this.logger.error(`Retry time exhausted`);\n      return;\n    }\n    return this.getOptionsProp(this.options, 'retryDelay') || 0;\n  }\n}\n"]}