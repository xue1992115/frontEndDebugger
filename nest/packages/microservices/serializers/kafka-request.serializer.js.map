{"version":3,"file":"kafka-request.serializer.js","sourceRoot":"","sources":["kafka-request.serializer.ts"],"names":[],"mappings":";;;AAAA,oEAM2C;AAS3C;;GAEG;AACH,MAAa,sBAAsB;IAGjC,SAAS,CAAC,KAAU;QAClB,MAAM,iBAAiB,GACrB,IAAA,oBAAK,EAAC,KAAK,CAAC;YACZ,CAAC,IAAA,uBAAQ,EAAC,KAAK,CAAC;YAChB,CAAC,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,OAAO,IAAI,KAAK,CAAC,CAAC,CAAC;QAE7C,IAAI,iBAAiB,EAAE;YACrB,KAAK,GAAG,EAAE,KAAK,EAAE,CAAC;SACnB;QACD,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACvC,IAAI,CAAC,IAAA,oBAAK,EAAC,KAAK,CAAC,GAAG,CAAC,EAAE;YACrB,KAAK,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;SACpC;QACD,IAAI,IAAA,oBAAK,EAAC,KAAK,CAAC,OAAO,CAAC,EAAE;YACxB,KAAK,CAAC,OAAO,GAAG,EAAE,CAAC;SACpB;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAEM,MAAM,CAAC,KAAU;QACtB,MAAM,eAAe,GACnB,CAAC,IAAA,oBAAK,EAAC,KAAK,CAAC,IAAI,CAAC,IAAA,uBAAQ,EAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAE/D,IAAI,eAAe,EAAE;YACnB,OAAO,IAAA,4BAAa,EAAC,KAAK,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC;gBACjD,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;gBACvB,CAAC,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;SACtB;aAAM,IAAI,IAAA,0BAAW,EAAC,KAAK,CAAC,EAAE;YAC7B,OAAO,IAAI,CAAC;SACb;QACD,OAAO,KAAK,CAAC;IACf,CAAC;CACF;AAnCD,wDAmCC","sourcesContent":["import {\n  isNil,\n  isObject,\n  isPlainObject,\n  isString,\n  isUndefined,\n} from '@nestjs/common/utils/shared.utils';\nimport { Serializer } from '../interfaces/serializer.interface';\n\nexport interface KafkaRequest<T = any> {\n  key: Buffer | string | null;\n  value: T;\n  headers: Record<string, any>;\n}\n\n/**\n * @publicApi\n */\nexport class KafkaRequestSerializer\n  implements Serializer<any, KafkaRequest | Promise<KafkaRequest>>\n{\n  serialize(value: any) {\n    const isNotKafkaMessage =\n      isNil(value) ||\n      !isObject(value) ||\n      (!('key' in value) && !('value' in value));\n\n    if (isNotKafkaMessage) {\n      value = { value };\n    }\n    value.value = this.encode(value.value);\n    if (!isNil(value.key)) {\n      value.key = this.encode(value.key);\n    }\n    if (isNil(value.headers)) {\n      value.headers = {};\n    }\n    return value;\n  }\n\n  public encode(value: any): Buffer | string | null {\n    const isObjectOrArray =\n      !isNil(value) && !isString(value) && !Buffer.isBuffer(value);\n\n    if (isObjectOrArray) {\n      return isPlainObject(value) || Array.isArray(value)\n        ? JSON.stringify(value)\n        : value.toString();\n    } else if (isUndefined(value)) {\n      return null;\n    }\n    return value;\n  }\n}\n"]}