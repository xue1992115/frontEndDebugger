{"version":3,"file":"microservices-module.js","sourceRoot":"","sources":["microservices-module.ts"],"names":[],"mappings":"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","sourcesContent":["import { Controller } from '@nestjs/common/interfaces/controllers/controller.interface';\nimport { NestApplicationContextOptions } from '@nestjs/common/interfaces/nest-application-context-options.interface';\nimport { ApplicationConfig } from '@nestjs/core/application-config';\nimport { RuntimeException } from '@nestjs/core/errors/exceptions/runtime.exception';\nimport { GuardsConsumer, GuardsContextCreator } from '@nestjs/core/guards';\nimport { NestContainer } from '@nestjs/core/injector/container';\nimport { Injector } from '@nestjs/core/injector/injector';\nimport { InstanceWrapper } from '@nestjs/core/injector/instance-wrapper';\nimport { GraphInspector } from '@nestjs/core/inspector/graph-inspector';\nimport {\n  InterceptorsConsumer,\n  InterceptorsContextCreator,\n} from '@nestjs/core/interceptors';\nimport { PipesConsumer, PipesContextCreator } from '@nestjs/core/pipes';\nimport { ClientProxyFactory } from './client';\nimport { ClientsContainer } from './container';\nimport { ExceptionFiltersContext } from './context/exception-filters-context';\nimport { RpcContextCreator } from './context/rpc-context-creator';\nimport { RpcProxy } from './context/rpc-proxy';\nimport { CustomTransportStrategy } from './interfaces';\nimport { ListenersController } from './listeners-controller';\nimport { Server } from './server/server';\n\nexport class MicroservicesModule<\n  TAppOptions extends NestApplicationContextOptions = NestApplicationContextOptions,\n> {\n  private readonly clientsContainer = new ClientsContainer();\n  private listenersController: ListenersController;\n  private appOptions: TAppOptions;\n\n  public register(\n    container: NestContainer,\n    graphInspector: GraphInspector,\n    config: ApplicationConfig,\n    options: TAppOptions,\n  ) {\n    this.appOptions = options;\n    const exceptionFiltersContext = new ExceptionFiltersContext(\n      container,\n      config,\n    );\n    const contextCreator = new RpcContextCreator(\n      new RpcProxy(),\n      exceptionFiltersContext,\n      new PipesContextCreator(container, config),\n      new PipesConsumer(),\n      new GuardsContextCreator(container, config),\n      new GuardsConsumer(),\n      new InterceptorsContextCreator(container, config),\n      new InterceptorsConsumer(),\n    );\n\n    const injector = new Injector();\n    this.listenersController = new ListenersController(\n      this.clientsContainer,\n      contextCreator,\n      container,\n      injector,\n      ClientProxyFactory,\n      exceptionFiltersContext,\n      graphInspector,\n    );\n  }\n\n  public setupListeners(\n    container: NestContainer,\n    server: Server & CustomTransportStrategy,\n  ) {\n    if (!this.listenersController) {\n      throw new RuntimeException();\n    }\n    const modules = container.getModules();\n    modules.forEach(({ controllers }, moduleRef) =>\n      this.bindListeners(controllers, server, moduleRef),\n    );\n  }\n\n  public setupClients(container: NestContainer) {\n    if (!this.listenersController) {\n      throw new RuntimeException();\n    }\n    if (this.appOptions?.preview) {\n      return;\n    }\n    const modules = container.getModules();\n    modules.forEach(({ controllers, providers }) => {\n      this.bindClients(controllers);\n      this.bindClients(providers);\n    });\n  }\n\n  public bindListeners(\n    controllers: Map<string | symbol | Function, InstanceWrapper<Controller>>,\n    server: Server & CustomTransportStrategy,\n    moduleName: string,\n  ) {\n    controllers.forEach(wrapper =>\n      this.listenersController.registerPatternHandlers(\n        wrapper,\n        server,\n        moduleName,\n      ),\n    );\n  }\n\n  public bindClients(\n    items: Map<string | symbol | Function, InstanceWrapper<unknown>>,\n  ) {\n    items.forEach(({ instance, isNotMetatype }) => {\n      !isNotMetatype &&\n        this.listenersController.assignClientsToProperties(instance);\n    });\n  }\n\n  public async close() {\n    const clients = this.clientsContainer.getAllClients();\n    await Promise.all(clients.map(client => client.close()));\n    this.clientsContainer.clear();\n  }\n}\n"]}