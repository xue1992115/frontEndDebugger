{"version":3,"file":"base-rpc-exception-filter.js","sourceRoot":"","sources":["base-rpc-exception-filter.ts"],"names":[],"mappings":";;;AAAA,kCAAkC;AAClC,2CAA2E;AAC3E,oEAA6D;AAC7D,sDAAkD;AAClD,+BAAwD;AACxD,mDAA+C;AAE/C;;GAEG;AACH,MAAa,sBAAsB;IAK1B,KAAK,CAAC,SAAY,EAAE,IAAmB;QAC5C,MAAM,MAAM,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,CAAC,SAAS,YAAY,4BAAY,CAAC,EAAE;YACxC,OAAO,IAAI,CAAC,kBAAkB,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;SACnD;QACD,MAAM,GAAG,GAAG,SAAS,CAAC,QAAQ,EAAE,CAAC;QACjC,MAAM,OAAO,GAAG,IAAA,uBAAQ,EAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC;QAC/D,OAAO,IAAA,iBAAM,EAAC,GAAG,EAAE,CAAC,OAAO,CAAC,CAAC;IAC/B,CAAC;IAEM,kBAAkB,CAAC,SAAY,EAAE,MAAc;QACpD,MAAM,YAAY,GAAG,oBAAQ,CAAC,yBAAyB,CAAC;QAExD,MAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;YACxC,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,EAAE,SAAS,CAAC,KAAK,CAAC;YACtC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;QAChB,MAAM,MAAM,GAAG,sBAAsB,CAAC,MAAM,CAAC;QAC7C,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,EAAE,UAAiB,CAAC,CAAC;QAE9C,OAAO,IAAA,iBAAM,EAAC,GAAG,EAAE,CAAC,CAAC,EAAE,MAAM,EAAE,OAAO,EAAE,YAAY,EAAE,CAAC,CAAC,CAAC;IAC3D,CAAC;IAEM,OAAO,CAAC,SAAc;QAC3B,OAAO,CAAC,CAAC,CAAC,IAAA,uBAAQ,EAAC,SAAS,CAAC,IAAK,SAAmB,CAAC,OAAO,CAAC,CAAC;IACjE,CAAC;;AA1BuB,6BAAM,GAAG,IAAI,eAAM,CAAC,sBAAsB,CAAC,CAAC;AAHzD,wDAAsB","sourcesContent":["/* eslint-disable prefer-spread */\nimport { ArgumentsHost, Logger, RpcExceptionFilter } from '@nestjs/common';\nimport { isObject } from '@nestjs/common/utils/shared.utils';\nimport { MESSAGES } from '@nestjs/core/constants';\nimport { Observable, throwError as _throw } from 'rxjs';\nimport { RpcException } from './rpc-exception';\n\n/**\n * @publicApi\n */\nexport class BaseRpcExceptionFilter<T = any, R = any>\n  implements RpcExceptionFilter<T>\n{\n  private static readonly logger = new Logger('RpcExceptionsHandler');\n\n  public catch(exception: T, host: ArgumentsHost): Observable<R> {\n    const status = 'error';\n    if (!(exception instanceof RpcException)) {\n      return this.handleUnknownError(exception, status);\n    }\n    const res = exception.getError();\n    const message = isObject(res) ? res : { status, message: res };\n    return _throw(() => message);\n  }\n\n  public handleUnknownError(exception: T, status: string) {\n    const errorMessage = MESSAGES.UNKNOWN_EXCEPTION_MESSAGE;\n\n    const loggerArgs = this.isError(exception)\n      ? [exception.message, exception.stack]\n      : [exception];\n    const logger = BaseRpcExceptionFilter.logger;\n    logger.error.apply(logger, loggerArgs as any);\n\n    return _throw(() => ({ status, message: errorMessage }));\n  }\n\n  public isError(exception: any): exception is Error {\n    return !!(isObject(exception) && (exception as Error).message);\n  }\n}\n"]}