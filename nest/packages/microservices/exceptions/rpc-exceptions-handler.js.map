{"version":3,"file":"rpc-exceptions-handler.js","sourceRoot":"","sources":["rpc-exceptions-handler.ts"],"names":[],"mappings":";;;AAEA,oEAA4D;AAC5D,0HAAoH;AAEpH,2EAAqE;AAGrE;;GAEG;AACH,MAAa,oBAAqB,SAAQ,kDAAsB;IAAhE;;QACU,YAAO,GAAiC,EAAE,CAAC;IAqCrD,CAAC;IAnCQ,MAAM,CACX,SAAqC,EACrC,IAAmB;QAEnB,MAAM,aAAa,GAAG,IAAI,CAAC,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;QAChE,IAAI,aAAa,EAAE;YACjB,OAAO,aAAa,CAAC;SACtB;QACD,OAAO,KAAK,CAAC,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;IACtC,CAAC;IAEM,gBAAgB,CAAC,OAAqC;QAC3D,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YAC3B,MAAM,IAAI,oEAA+B,EAAE,CAAC;SAC7C;QACD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAEM,mBAAmB,CACxB,SAAY,EACZ,IAAmB;QAEnB,IAAI,IAAA,sBAAO,EAAC,IAAI,CAAC,OAAO,CAAC,EAAE;YACzB,OAAO,IAAI,CAAC;SACb;QACD,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,EAAE,kBAAkB,EAAE,EAAE,EAAE;YAC1D,MAAM,WAAW,GACf,CAAC,kBAAkB,CAAC,MAAM;gBAC1B,kBAAkB,CAAC,IAAI,CACrB,iBAAiB,CAAC,EAAE,CAAC,SAAS,YAAY,iBAAiB,CAC5D,CAAC;YACJ,OAAO,WAAW,CAAC;QACrB,CAAC,CAAC,CAAC;QACH,OAAO,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IACtD,CAAC;CACF;AAtCD,oDAsCC","sourcesContent":["import { RpcExceptionFilterMetadata } from '@nestjs/common/interfaces/exceptions';\nimport { ArgumentsHost } from '@nestjs/common/interfaces/features/arguments-host.interface';\nimport { isEmpty } from '@nestjs/common/utils/shared.utils';\nimport { InvalidExceptionFilterException } from '@nestjs/core/errors/exceptions/invalid-exception-filter.exception';\nimport { Observable } from 'rxjs';\nimport { BaseRpcExceptionFilter } from './base-rpc-exception-filter';\nimport { RpcException } from './rpc-exception';\n\n/**\n * @publicApi\n */\nexport class RpcExceptionsHandler extends BaseRpcExceptionFilter {\n  private filters: RpcExceptionFilterMetadata[] = [];\n\n  public handle(\n    exception: Error | RpcException | any,\n    host: ArgumentsHost,\n  ): Observable<any> {\n    const filterResult$ = this.invokeCustomFilters(exception, host);\n    if (filterResult$) {\n      return filterResult$;\n    }\n    return super.catch(exception, host);\n  }\n\n  public setCustomFilters(filters: RpcExceptionFilterMetadata[]) {\n    if (!Array.isArray(filters)) {\n      throw new InvalidExceptionFilterException();\n    }\n    this.filters = filters;\n  }\n\n  public invokeCustomFilters<T = any>(\n    exception: T,\n    host: ArgumentsHost,\n  ): Observable<any> | null {\n    if (isEmpty(this.filters)) {\n      return null;\n    }\n    const filter = this.filters.find(({ exceptionMetatypes }) => {\n      const hasMetatype =\n        !exceptionMetatypes.length ||\n        exceptionMetatypes.some(\n          ExceptionMetatype => exception instanceof ExceptionMetatype,\n        );\n      return hasMetatype;\n    });\n    return filter ? filter.func(exception, host) : null;\n  }\n}\n"]}