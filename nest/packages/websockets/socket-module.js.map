{"version":3,"file":"socket-module.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/websockets/","sources":["socket-module.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@nestjs/common/interfaces/injectable.interface';\nimport { NestApplicationContextOptions } from '@nestjs/common/interfaces/nest-application-context-options.interface';\nimport { ApplicationConfig } from '@nestjs/core/application-config';\nimport { GuardsConsumer } from '@nestjs/core/guards/guards-consumer';\nimport { GuardsContextCreator } from '@nestjs/core/guards/guards-context-creator';\nimport { loadAdapter } from '@nestjs/core/helpers/load-adapter';\nimport { NestContainer } from '@nestjs/core/injector/container';\nimport { InstanceWrapper } from '@nestjs/core/injector/instance-wrapper';\nimport { InstanceToken } from '@nestjs/core/injector/module';\nimport { GraphInspector } from '@nestjs/core/inspector/graph-inspector';\nimport { InterceptorsConsumer } from '@nestjs/core/interceptors/interceptors-consumer';\nimport { InterceptorsContextCreator } from '@nestjs/core/interceptors/interceptors-context-creator';\nimport { PipesConsumer } from '@nestjs/core/pipes/pipes-consumer';\nimport { PipesContextCreator } from '@nestjs/core/pipes/pipes-context-creator';\nimport { iterate } from 'iterare';\nimport { AbstractWsAdapter } from './adapters';\nimport { GATEWAY_METADATA } from './constants';\nimport { ExceptionFiltersContext } from './context/exception-filters-context';\nimport { WsContextCreator } from './context/ws-context-creator';\nimport { WsProxy } from './context/ws-proxy';\nimport { NestGateway } from './interfaces/nest-gateway.interface';\nimport { SocketServerProvider } from './socket-server-provider';\nimport { SocketsContainer } from './sockets-container';\nimport { WebSocketsController } from './web-sockets-controller';\n\nexport class SocketModule<\n  THttpServer = any,\n  TAppOptions extends NestApplicationContextOptions = NestApplicationContextOptions,\n> {\n  private readonly socketsContainer = new SocketsContainer();\n  private applicationConfig: ApplicationConfig;\n  private webSocketsController: WebSocketsController;\n  private isAdapterInitialized: boolean;\n  private httpServer: THttpServer | undefined;\n  private appOptions: TAppOptions;\n\n  public register(\n    container: NestContainer,\n    applicationConfig: ApplicationConfig,\n    graphInspector: GraphInspector,\n    appOptions: TAppOptions,\n    httpServer?: THttpServer,\n  ) {\n    this.applicationConfig = applicationConfig;\n    this.appOptions = appOptions;\n    this.httpServer = httpServer;\n\n    const contextCreator = this.getContextCreator(container);\n    const serverProvider = new SocketServerProvider(\n      this.socketsContainer,\n      applicationConfig,\n    );\n    this.webSocketsController = new WebSocketsController(\n      serverProvider,\n      applicationConfig,\n      contextCreator,\n      graphInspector,\n      this.appOptions,\n    );\n    const modules = container.getModules();\n    modules.forEach(({ providers }, moduleName: string) =>\n      this.connectAllGateways(providers, moduleName),\n    );\n  }\n\n  public connectAllGateways(\n    providers: Map<InstanceToken, InstanceWrapper<Injectable>>,\n    moduleName: string,\n  ) {\n    iterate(providers.values())\n      .filter(wrapper => wrapper && !wrapper.isNotMetatype)\n      .forEach(wrapper => this.connectGatewayToServer(wrapper, moduleName));\n  }\n\n  public connectGatewayToServer(\n    wrapper: InstanceWrapper<Injectable>,\n    moduleName: string,\n  ) {\n    const { instance, metatype } = wrapper;\n    const metadataKeys = Reflect.getMetadataKeys(metatype);\n    if (!metadataKeys.includes(GATEWAY_METADATA)) {\n      return;\n    }\n    if (!this.isAdapterInitialized) {\n      this.initializeAdapter();\n    }\n    this.webSocketsController.connectGatewayToServer(\n      instance as NestGateway,\n      metatype,\n      moduleName,\n      wrapper.id,\n    );\n  }\n\n  public async close(): Promise<any> {\n    if (!this.applicationConfig) {\n      return;\n    }\n    const adapter = this.applicationConfig.getIoAdapter();\n    if (!adapter) {\n      return;\n    }\n    const servers = this.socketsContainer.getAll();\n    await Promise.all(\n      iterate(servers.values())\n        .filter(({ server }) => server)\n        .map(async ({ server }) => adapter.close(server)),\n    );\n    await (adapter as AbstractWsAdapter)?.dispose();\n\n    this.socketsContainer.clear();\n  }\n\n  private initializeAdapter() {\n    const adapter = this.applicationConfig.getIoAdapter();\n    if (adapter) {\n      this.isAdapterInitialized = true;\n      return;\n    }\n    const { IoAdapter } = loadAdapter(\n      '@nestjs/platform-socket.io',\n      'WebSockets',\n      () => require('@nestjs/platform-socket.io'),\n    );\n    const ioAdapter = new IoAdapter(this.httpServer);\n    this.applicationConfig.setIoAdapter(ioAdapter);\n\n    this.isAdapterInitialized = true;\n  }\n\n  private getContextCreator(container: NestContainer): WsContextCreator {\n    return new WsContextCreator(\n      new WsProxy(),\n      new ExceptionFiltersContext(container),\n      new PipesContextCreator(container),\n      new PipesConsumer(),\n      new GuardsContextCreator(container),\n      new GuardsConsumer(),\n      new InterceptorsContextCreator(container),\n      new InterceptorsConsumer(),\n    );\n  }\n}\n"]}