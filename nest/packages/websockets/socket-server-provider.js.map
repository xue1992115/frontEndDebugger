{"version":3,"file":"socket-server-provider.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/websockets/","sources":["socket-server-provider.ts"],"names":[],"mappings":";;;;AAAA,oEAA8E;AAE9E,mGAA4F;AAK5F,MAAa,oBAAoB;IAC/B,YACmB,gBAAkC,EAClC,iBAAoC;QADpC,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,sBAAiB,GAAjB,iBAAiB,CAAmB;IACpD,CAAC;IAEG,mBAAmB,CACxB,OAAU,EACV,IAAY;QAEZ,MAAM,oBAAoB,GAAG,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC;YAChE,IAAI;YACJ,IAAI,EAAE,OAAO,CAAC,IAAI;SACnB,CAAC,CAAC;QACH,IAAI,oBAAoB,IAAI,OAAO,CAAC,SAAS,EAAE;YAC7C,OAAO,IAAI,CAAC,qBAAqB,CAC/B,OAAO,EACP,IAAI,EACJ,oBAAoB,CAAC,MAAM,CAC5B,CAAC;SACH;QACD,OAAO,oBAAoB;YACzB,CAAC,CAAC,oBAAoB;YACtB,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IAC7C,CAAC;IAEO,kBAAkB,CACxB,OAAU,EACV,IAAY;QAEZ,MAAM,OAAO,GAAG,IAAI,CAAC,iBAAiB,CAAC,YAAY,EAAE,CAAC;QACtD,MAAM,KAA2C,OAGhD,EAHK,EAAE,SAAS,EAAE,MAAM,OAGxB,EAH6B,cAAc,sBAAtC,uBAAwC,CAG7C,CAAC;QACF,MAAM,QAAQ,GAAG,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;QACtD,MAAM,yBAAyB,GAC7B,+DAA4B,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAEhD,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAC1B,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,CAAC,IAAI,EAAE,EAC5B,yBAAyB,CAC1B,CAAC;QACF,IAAI,CAAC,SAAS,EAAE;YACd,OAAO,yBAAyB,CAAC;SAClC;QACD,OAAO,IAAI,CAAC,qBAAqB,CAAC,OAAO,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;IAC7D,CAAC;IAEO,qBAAqB,CAC3B,OAAU,EACV,IAAY,EACZ,YAAqB;QAErB,MAAM,eAAe,GAAG,IAAI,CAAC,oBAAoB,CAC/C,OAAO,EACP,IAAI,EACJ,YAAY,CACb,CAAC;QACF,MAAM,yBAAyB,GAC7B,+DAA4B,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;QACvD,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAC1B,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,CAAC,IAAI,EAAE,SAAS,EAAE,OAAO,CAAC,SAAS,EAAE,EAC1D,yBAAyB,CAC1B,CAAC;QACF,OAAO,yBAAyB,CAAC;IACnC,CAAC;IAEO,oBAAoB,CAG1B,OAAiB,EAAE,IAAY,EAAE,MAAe;QAChD,MAAM,OAAO,GAAG,IAAI,CAAC,iBAAiB,CAAC,YAAY,EAAE,CAAC;QACtD,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,kCACrB,OAAO,KACV,SAAS,EAAE,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,SAAS,IAAI,EAAE,CAAC,EAC1D,MAAM,IACN,CAAC;IACL,CAAC;IAEO,iBAAiB,CAAC,SAA0B;QAClD,IAAI,CAAC,IAAA,uBAAQ,EAAC,SAAS,CAAC,EAAE;YACxB,OAAO,SAAS,CAAC;SAClB;QACD,OAAO,IAAA,8BAAe,EAAC,SAAS,CAAC,CAAC;IACpC,CAAC;CACF;AAtFD,oDAsFC","sourcesContent":["import { addLeadingSlash, isString } from '@nestjs/common/utils/shared.utils';\nimport { ApplicationConfig } from '@nestjs/core/application-config';\nimport { ServerAndEventStreamsFactory } from './factories/server-and-event-streams-factory';\nimport { GatewayMetadata } from './interfaces/gateway-metadata.interface';\nimport { ServerAndEventStreamsHost } from './interfaces/server-and-event-streams-host.interface';\nimport { SocketsContainer } from './sockets-container';\n\nexport class SocketServerProvider {\n  constructor(\n    private readonly socketsContainer: SocketsContainer,\n    private readonly applicationConfig: ApplicationConfig,\n  ) {}\n\n  public scanForSocketServer<T extends GatewayMetadata = any>(\n    options: T,\n    port: number,\n  ): ServerAndEventStreamsHost {\n    const serverAndStreamsHost = this.socketsContainer.getOneByConfig({\n      port,\n      path: options.path,\n    });\n    if (serverAndStreamsHost && options.namespace) {\n      return this.decorateWithNamespace(\n        options,\n        port,\n        serverAndStreamsHost.server,\n      );\n    }\n    return serverAndStreamsHost\n      ? serverAndStreamsHost\n      : this.createSocketServer(options, port);\n  }\n\n  private createSocketServer<T extends GatewayMetadata>(\n    options: T,\n    port: number,\n  ): ServerAndEventStreamsHost {\n    const adapter = this.applicationConfig.getIoAdapter();\n    const { namespace, server, ...partialOptions } = options as Record<\n      string,\n      unknown\n    >;\n    const ioServer = adapter.create(port, partialOptions);\n    const serverAndEventStreamsHost =\n      ServerAndEventStreamsFactory.create(ioServer);\n\n    this.socketsContainer.addOne(\n      { port, path: options.path },\n      serverAndEventStreamsHost,\n    );\n    if (!namespace) {\n      return serverAndEventStreamsHost;\n    }\n    return this.decorateWithNamespace(options, port, ioServer);\n  }\n\n  private decorateWithNamespace<T extends GatewayMetadata = any>(\n    options: T,\n    port: number,\n    targetServer: unknown,\n  ): ServerAndEventStreamsHost {\n    const namespaceServer = this.getServerOfNamespace(\n      options,\n      port,\n      targetServer,\n    );\n    const serverAndEventStreamsHost =\n      ServerAndEventStreamsFactory.create(namespaceServer);\n    this.socketsContainer.addOne(\n      { port, path: options.path, namespace: options.namespace },\n      serverAndEventStreamsHost,\n    );\n    return serverAndEventStreamsHost;\n  }\n\n  private getServerOfNamespace<\n    TOptions extends GatewayMetadata = any,\n    TServer = any,\n  >(options: TOptions, port: number, server: TServer) {\n    const adapter = this.applicationConfig.getIoAdapter();\n    return adapter.create(port, {\n      ...options,\n      namespace: this.validateNamespace(options.namespace || ''),\n      server,\n    });\n  }\n\n  private validateNamespace(namespace: string | RegExp): string | RegExp {\n    if (!isString(namespace)) {\n      return namespace;\n    }\n    return addLeadingSlash(namespace);\n  }\n}\n"]}