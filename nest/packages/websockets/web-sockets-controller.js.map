{"version":3,"file":"web-sockets-controller.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/websockets/","sources":["web-sockets-controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { NestApplicationContextOptions } from '@nestjs/common/interfaces/nest-application-context-options.interface';\nimport { Type } from '@nestjs/common/interfaces/type.interface';\nimport { Logger } from '@nestjs/common/services/logger.service';\nimport { ApplicationConfig } from '@nestjs/core/application-config';\nimport { GraphInspector } from '@nestjs/core/inspector/graph-inspector';\nimport { MetadataScanner } from '@nestjs/core/metadata-scanner';\nimport {\n  from as fromPromise,\n  isObservable,\n  Observable,\n  of,\n  Subject,\n} from 'rxjs';\nimport { distinctUntilChanged, mergeAll } from 'rxjs/operators';\nimport { GATEWAY_OPTIONS, PORT_METADATA } from './constants';\nimport { WsContextCreator } from './context/ws-context-creator';\nimport { InvalidSocketPortException } from './errors/invalid-socket-port.exception';\nimport {\n  GatewayMetadataExplorer,\n  MessageMappingProperties,\n} from './gateway-metadata-explorer';\nimport { GatewayMetadata } from './interfaces/gateway-metadata.interface';\nimport { NestGateway } from './interfaces/nest-gateway.interface';\nimport { ServerAndEventStreamsHost } from './interfaces/server-and-event-streams-host.interface';\nimport { WebsocketEntrypointMetadata } from './interfaces/websockets-entrypoint-metadata.interface';\nimport { SocketServerProvider } from './socket-server-provider';\nimport { compareElementAt } from './utils/compare-element.util';\n\nexport class WebSocketsController {\n  private readonly logger = new Logger(WebSocketsController.name, {\n    timestamp: true,\n  });\n  private readonly metadataExplorer = new GatewayMetadataExplorer(\n    new MetadataScanner(),\n  );\n\n  constructor(\n    private readonly socketServerProvider: SocketServerProvider,\n    private readonly config: ApplicationConfig,\n    private readonly contextCreator: WsContextCreator,\n    private readonly graphInspector: GraphInspector,\n    private readonly appOptions: NestApplicationContextOptions = {},\n  ) {}\n\n  public connectGatewayToServer(\n    instance: NestGateway,\n    metatype: Type<unknown> | Function,\n    moduleKey: string,\n    instanceWrapperId: string,\n  ) {\n    const options = Reflect.getMetadata(GATEWAY_OPTIONS, metatype) || {};\n    const port = Reflect.getMetadata(PORT_METADATA, metatype) || 0;\n\n    if (!Number.isInteger(port)) {\n      throw new InvalidSocketPortException(port, metatype);\n    }\n    this.subscribeToServerEvents(\n      instance,\n      options,\n      port,\n      moduleKey,\n      instanceWrapperId,\n    );\n  }\n\n  public subscribeToServerEvents<T extends GatewayMetadata>(\n    instance: NestGateway,\n    options: T,\n    port: number,\n    moduleKey: string,\n    instanceWrapperId: string,\n  ) {\n    const nativeMessageHandlers = this.metadataExplorer.explore(instance);\n    const messageHandlers = nativeMessageHandlers.map(\n      ({ callback, message, methodName }) => ({\n        message,\n        methodName,\n        callback: this.contextCreator.create(\n          instance,\n          callback,\n          moduleKey,\n          methodName,\n        ),\n      }),\n    );\n\n    this.inspectEntrypointDefinitions(\n      instance,\n      port,\n      messageHandlers,\n      instanceWrapperId,\n    );\n\n    if (this.appOptions.preview) {\n      return;\n    }\n    const observableServer = this.socketServerProvider.scanForSocketServer<T>(\n      options,\n      port,\n    );\n    this.assignServerToProperties(instance, observableServer.server);\n    this.subscribeEvents(instance, messageHandlers, observableServer);\n  }\n\n  public subscribeEvents(\n    instance: NestGateway,\n    subscribersMap: MessageMappingProperties[],\n    observableServer: ServerAndEventStreamsHost,\n  ) {\n    const { init, disconnect, connection, server } = observableServer;\n    const adapter = this.config.getIoAdapter();\n\n    this.subscribeInitEvent(instance, init);\n    this.subscribeConnectionEvent(instance, connection);\n    this.subscribeDisconnectEvent(instance, disconnect);\n\n    const handler = this.getConnectionHandler(\n      this,\n      instance,\n      subscribersMap,\n      disconnect,\n      connection,\n    );\n    adapter.bindClientConnect(server, handler);\n    this.printSubscriptionLogs(instance, subscribersMap);\n  }\n\n  public getConnectionHandler(\n    context: WebSocketsController,\n    instance: NestGateway,\n    subscribersMap: MessageMappingProperties[],\n    disconnect: Subject<any>,\n    connection: Subject<any>,\n  ) {\n    const adapter = this.config.getIoAdapter();\n    return (...args: unknown[]) => {\n      const [client] = args;\n      connection.next(args);\n      context.subscribeMessages(subscribersMap, client, instance);\n\n      const disconnectHook = adapter.bindClientDisconnect;\n      disconnectHook &&\n        disconnectHook.call(adapter, client, () => disconnect.next(client));\n    };\n  }\n\n  public subscribeInitEvent(instance: NestGateway, event: Subject<any>) {\n    if (instance.afterInit) {\n      event.subscribe(instance.afterInit.bind(instance));\n    }\n  }\n\n  public subscribeConnectionEvent(instance: NestGateway, event: Subject<any>) {\n    if (instance.handleConnection) {\n      event\n        .pipe(\n          distinctUntilChanged((prev, curr) => compareElementAt(prev, curr, 0)),\n        )\n        .subscribe((args: unknown[]) => instance.handleConnection(...args));\n    }\n  }\n\n  public subscribeDisconnectEvent(instance: NestGateway, event: Subject<any>) {\n    if (instance.handleDisconnect) {\n      event\n        .pipe(distinctUntilChanged())\n        .subscribe(instance.handleDisconnect.bind(instance));\n    }\n  }\n\n  public subscribeMessages<T = any>(\n    subscribersMap: MessageMappingProperties[],\n    client: T,\n    instance: NestGateway,\n  ) {\n    const adapter = this.config.getIoAdapter();\n    const handlers = subscribersMap.map(({ callback, message }) => ({\n      message,\n      callback: callback.bind(instance, client),\n    }));\n    adapter.bindMessageHandlers(client, handlers, data =>\n      fromPromise(this.pickResult(data)).pipe(mergeAll()),\n    );\n  }\n\n  public async pickResult(\n    deferredResult: Promise<any>,\n  ): Promise<Observable<any>> {\n    const result = await deferredResult;\n    if (isObservable(result)) {\n      return result;\n    }\n    if (result instanceof Promise) {\n      return fromPromise(result);\n    }\n    return of(result);\n  }\n\n  public inspectEntrypointDefinitions(\n    instance: NestGateway,\n    port: number,\n    messageHandlers: MessageMappingProperties[],\n    instanceWrapperId: string,\n  ) {\n    messageHandlers.forEach(handler => {\n      this.graphInspector.insertEntrypointDefinition<WebsocketEntrypointMetadata>(\n        {\n          type: 'websocket',\n          methodName: handler.methodName,\n          className: instance.constructor?.name,\n          classNodeId: instanceWrapperId,\n          metadata: {\n            port,\n            key: handler.message,\n            message: handler.message,\n          },\n        },\n        instanceWrapperId,\n      );\n    });\n  }\n\n  private assignServerToProperties<T = any>(\n    instance: NestGateway,\n    server: object,\n  ) {\n    for (const propertyKey of this.metadataExplorer.scanForServerHooks(\n      instance,\n    )) {\n      Reflect.set(instance, propertyKey, server);\n    }\n  }\n\n  private printSubscriptionLogs(\n    instance: NestGateway,\n    subscribersMap: MessageMappingProperties[],\n  ) {\n    const gatewayClassName = (instance as Object)?.constructor?.name;\n    if (!gatewayClassName) {\n      return;\n    }\n    subscribersMap.forEach(({ message }) =>\n      this.logger.log(\n        `${gatewayClassName} subscribed to the \"${message}\" message`,\n      ),\n    );\n  }\n}\n"]}