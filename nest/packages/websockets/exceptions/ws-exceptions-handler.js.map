{"version":3,"file":"ws-exceptions-handler.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/websockets/","sources":["exceptions/ws-exceptions-handler.ts"],"names":[],"mappings":";;;AAEA,oEAA4D;AAC5D,0HAAoH;AAEpH,yEAAmE;AAEnE;;GAEG;AACH,MAAa,mBAAoB,SAAQ,gDAAqB;IAA9D;;QACU,YAAO,GAA8B,EAAE,CAAC;IAkClD,CAAC;IAhCQ,MAAM,CAAC,SAAoC,EAAE,IAAmB;QACrE,MAAM,MAAM,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC,SAAS,EAAE,CAAC;QAC7C,IAAI,IAAI,CAAC,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE;YAC7D,OAAO;SACR;QACD,KAAK,CAAC,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;IAC/B,CAAC;IAEM,gBAAgB,CAAC,OAAkC;QACxD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YAC3B,MAAM,IAAI,oEAA+B,EAAE,CAAC;SAC7C;QACD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAEM,mBAAmB,CACxB,SAAY,EACZ,IAAmB;QAEnB,IAAI,IAAA,sBAAO,EAAC,IAAI,CAAC,OAAO,CAAC;YAAE,OAAO,KAAK,CAAC;QAExC,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,EAAE,kBAAkB,EAAE,EAAE,EAAE;YAC1D,MAAM,WAAW,GACf,CAAC,kBAAkB,CAAC,MAAM;gBAC1B,kBAAkB,CAAC,IAAI,CACrB,iBAAiB,CAAC,EAAE,CAAC,SAAS,YAAY,iBAAiB,CAC5D,CAAC;YACJ,OAAO,WAAW,CAAC;QACrB,CAAC,CAAC,CAAC;QACH,MAAM,IAAI,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;QACvC,OAAO,CAAC,CAAC,MAAM,CAAC;IAClB,CAAC;CACF;AAnCD,kDAmCC","sourcesContent":["import { ArgumentsHost } from '@nestjs/common';\nimport { ExceptionFilterMetadata } from '@nestjs/common/interfaces/exceptions/exception-filter-metadata.interface';\nimport { isEmpty } from '@nestjs/common/utils/shared.utils';\nimport { InvalidExceptionFilterException } from '@nestjs/core/errors/exceptions/invalid-exception-filter.exception';\nimport { WsException } from '../errors/ws-exception';\nimport { BaseWsExceptionFilter } from './base-ws-exception-filter';\n\n/**\n * @publicApi\n */\nexport class WsExceptionsHandler extends BaseWsExceptionFilter {\n  private filters: ExceptionFilterMetadata[] = [];\n\n  public handle(exception: Error | WsException | any, host: ArgumentsHost) {\n    const client = host.switchToWs().getClient();\n    if (this.invokeCustomFilters(exception, host) || !client.emit) {\n      return;\n    }\n    super.catch(exception, host);\n  }\n\n  public setCustomFilters(filters: ExceptionFilterMetadata[]) {\n    if (!Array.isArray(filters)) {\n      throw new InvalidExceptionFilterException();\n    }\n    this.filters = filters;\n  }\n\n  public invokeCustomFilters<T = any>(\n    exception: T,\n    args: ArgumentsHost,\n  ): boolean {\n    if (isEmpty(this.filters)) return false;\n\n    const filter = this.filters.find(({ exceptionMetatypes }) => {\n      const hasMetatype =\n        !exceptionMetatypes.length ||\n        exceptionMetatypes.some(\n          ExceptionMetatype => exception instanceof ExceptionMetatype,\n        );\n      return hasMetatype;\n    });\n    filter && filter.func(exception, args);\n    return !!filter;\n  }\n}\n"]}