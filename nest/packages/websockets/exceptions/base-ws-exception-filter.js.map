{"version":3,"file":"base-ws-exception-filter.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/websockets/","sources":["exceptions/base-ws-exception-filter.ts"],"names":[],"mappings":";;;AAAA,2CAA0E;AAC1E,oEAA6D;AAC7D,sDAAkD;AAClD,yDAAqD;AAErD;;GAEG;AACH,MAAa,qBAAqB;IAKzB,KAAK,CAAC,SAAiB,EAAE,IAAmB;QACjD,MAAM,MAAM,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC,SAAS,EAAE,CAAC;QAC7C,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;IACtC,CAAC;IAEM,WAAW,CAChB,MAAe,EACf,SAAiB;QAEjB,IAAI,CAAC,CAAC,SAAS,YAAY,0BAAW,CAAC,EAAE;YACvC,OAAO,IAAI,CAAC,kBAAkB,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;SACnD;QAED,MAAM,MAAM,GAAG,OAAO,CAAC;QACvB,MAAM,MAAM,GAAG,SAAS,CAAC,QAAQ,EAAE,CAAC;QACpC,MAAM,OAAO,GAAG,IAAA,uBAAQ,EAAC,MAAM,CAAC;YAC9B,CAAC,CAAC,MAAM;YACR,CAAC,CAAC;gBACE,MAAM;gBACN,OAAO,EAAE,MAAM;aAChB,CAAC;QAEN,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;IACpC,CAAC;IAEM,kBAAkB,CACvB,SAAiB,EACjB,MAAe;QAEf,MAAM,MAAM,GAAG,OAAO,CAAC;QACvB,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE;YACvB,MAAM;YACN,OAAO,EAAE,oBAAQ,CAAC,yBAAyB;SAC5C,CAAC,CAAC;QAEH,IAAI,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,EAAE;YACrC,OAAO,qBAAqB,CAAC,MAAM,CAAC,KAAK,CACvC,SAAS,CAAC,OAAO,EACjB,SAAS,CAAC,KAAK,CAChB,CAAC;SACH;QACD,OAAO,qBAAqB,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;IACvD,CAAC;IAEM,iBAAiB,CAAC,GAAQ;QAC/B,OAAO,IAAA,uBAAQ,EAAC,GAAG,CAAC,IAAI,CAAC,CAAE,GAAa,CAAC,OAAO,CAAC;IACnD,CAAC;;AAhDuB,4BAAM,GAAG,IAAI,eAAM,CAAC,qBAAqB,CAAC,CAAC;AAHxD,sDAAqB","sourcesContent":["import { ArgumentsHost, Logger, WsExceptionFilter } from '@nestjs/common';\nimport { isObject } from '@nestjs/common/utils/shared.utils';\nimport { MESSAGES } from '@nestjs/core/constants';\nimport { WsException } from '../errors/ws-exception';\n\n/**\n * @publicApi\n */\nexport class BaseWsExceptionFilter<TError = any>\n  implements WsExceptionFilter<TError>\n{\n  private static readonly logger = new Logger('WsExceptionsHandler');\n\n  public catch(exception: TError, host: ArgumentsHost) {\n    const client = host.switchToWs().getClient();\n    this.handleError(client, exception);\n  }\n\n  public handleError<TClient extends { emit: Function }>(\n    client: TClient,\n    exception: TError,\n  ) {\n    if (!(exception instanceof WsException)) {\n      return this.handleUnknownError(exception, client);\n    }\n\n    const status = 'error';\n    const result = exception.getError();\n    const message = isObject(result)\n      ? result\n      : {\n          status,\n          message: result,\n        };\n\n    client.emit('exception', message);\n  }\n\n  public handleUnknownError<TClient extends { emit: Function }>(\n    exception: TError,\n    client: TClient,\n  ) {\n    const status = 'error';\n    client.emit('exception', {\n      status,\n      message: MESSAGES.UNKNOWN_EXCEPTION_MESSAGE,\n    });\n\n    if (this.isExceptionObject(exception)) {\n      return BaseWsExceptionFilter.logger.error(\n        exception.message,\n        exception.stack,\n      );\n    }\n    return BaseWsExceptionFilter.logger.error(exception);\n  }\n\n  public isExceptionObject(err: any): err is Error {\n    return isObject(err) && !!(err as Error).message;\n  }\n}\n"]}