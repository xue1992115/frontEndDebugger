{"version":3,"file":"testing-module.builder.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/testing/","sources":["testing-module.builder.ts"],"names":[],"mappings":"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","sourcesContent":["import { Logger, LoggerService, Module, ModuleMetadata } from '@nestjs/common';\nimport { NestApplicationContextOptions } from '@nestjs/common/interfaces/nest-application-context-options.interface';\nimport { ApplicationConfig } from '@nestjs/core/application-config';\nimport { NestContainer } from '@nestjs/core/injector/container';\nimport { GraphInspector } from '@nestjs/core/inspector/graph-inspector';\nimport { NoopGraphInspector } from '@nestjs/core/inspector/noop-graph-inspector';\nimport {\n  UuidFactory,\n  UuidFactoryMode,\n} from '@nestjs/core/inspector/uuid-factory';\nimport { MetadataScanner } from '@nestjs/core/metadata-scanner';\nimport { DependenciesScanner } from '@nestjs/core/scanner';\nimport {\n  MockFactory,\n  OverrideBy,\n  OverrideByFactoryOptions,\n} from './interfaces';\nimport { TestingLogger } from './services/testing-logger.service';\nimport { TestingInjector } from './testing-injector';\nimport { TestingInstanceLoader } from './testing-instance-loader';\nimport { TestingModule } from './testing-module';\n\n/**\n * @publicApi\n */\nexport class TestingModuleBuilder {\n  private readonly applicationConfig = new ApplicationConfig();\n  private readonly container = new NestContainer(this.applicationConfig);\n  private readonly overloadsMap = new Map();\n  private readonly module: any;\n  private testingLogger: LoggerService;\n  private mocker?: MockFactory;\n\n  constructor(\n    private readonly metadataScanner: MetadataScanner,\n    metadata: ModuleMetadata,\n  ) {\n    this.module = this.createModule(metadata);\n  }\n\n  public setLogger(testingLogger: LoggerService) {\n    this.testingLogger = testingLogger;\n    return this;\n  }\n\n  public overridePipe<T = any>(typeOrToken: T): OverrideBy {\n    return this.override(typeOrToken, false);\n  }\n\n  public useMocker(mocker: MockFactory): TestingModuleBuilder {\n    this.mocker = mocker;\n    return this;\n  }\n\n  public overrideFilter<T = any>(typeOrToken: T): OverrideBy {\n    return this.override(typeOrToken, false);\n  }\n\n  public overrideGuard<T = any>(typeOrToken: T): OverrideBy {\n    return this.override(typeOrToken, false);\n  }\n\n  public overrideInterceptor<T = any>(typeOrToken: T): OverrideBy {\n    return this.override(typeOrToken, false);\n  }\n\n  public overrideProvider<T = any>(typeOrToken: T): OverrideBy {\n    return this.override(typeOrToken, true);\n  }\n\n  public async compile(\n    options: Pick<NestApplicationContextOptions, 'snapshot' | 'preview'> = {},\n  ): Promise<TestingModule> {\n    this.applyLogger();\n\n    let graphInspector: GraphInspector;\n    if (options?.snapshot) {\n      graphInspector = new GraphInspector(this.container);\n      UuidFactory.mode = UuidFactoryMode.Deterministic;\n    } else {\n      graphInspector = NoopGraphInspector;\n      UuidFactory.mode = UuidFactoryMode.Random;\n    }\n\n    const scanner = new DependenciesScanner(\n      this.container,\n      this.metadataScanner,\n      graphInspector,\n      this.applicationConfig,\n    );\n    await scanner.scan(this.module);\n\n    this.applyOverloadsMap();\n    await this.createInstancesOfDependencies(graphInspector, options);\n    scanner.applyApplicationProviders();\n\n    const root = this.getRootModule();\n    return new TestingModule(\n      this.container,\n      graphInspector,\n      root,\n      this.applicationConfig,\n    );\n  }\n\n  private override<T = any>(typeOrToken: T, isProvider: boolean): OverrideBy {\n    const addOverload = (options: any) => {\n      this.overloadsMap.set(typeOrToken, {\n        ...options,\n        isProvider,\n      });\n      return this;\n    };\n    return this.createOverrideByBuilder(addOverload);\n  }\n\n  private createOverrideByBuilder(\n    add: (provider: any) => TestingModuleBuilder,\n  ): OverrideBy {\n    return {\n      useValue: value => add({ useValue: value }),\n      useFactory: (options: OverrideByFactoryOptions) =>\n        add({ ...options, useFactory: options.factory }),\n      useClass: metatype => add({ useClass: metatype }),\n    };\n  }\n\n  private applyOverloadsMap() {\n    [...this.overloadsMap.entries()].forEach(([item, options]) => {\n      this.container.replace(item, options);\n    });\n  }\n\n  private getRootModule() {\n    const modules = this.container.getModules().values();\n    return modules.next().value;\n  }\n\n  private async createInstancesOfDependencies(\n    graphInspector: GraphInspector,\n    options: { preview?: boolean },\n  ) {\n    const injector = new TestingInjector({\n      preview: options?.preview ?? false,\n    });\n    const instanceLoader = new TestingInstanceLoader(\n      this.container,\n      injector,\n      graphInspector,\n    );\n    await instanceLoader.createInstancesOfDependencies(\n      this.container.getModules(),\n      this.mocker,\n    );\n  }\n\n  private createModule(metadata: ModuleMetadata) {\n    class RootTestModule {}\n    Module(metadata)(RootTestModule);\n    return RootTestModule;\n  }\n\n  private applyLogger() {\n    Logger.overrideLogger(this.testingLogger || new TestingLogger());\n  }\n}\n"]}