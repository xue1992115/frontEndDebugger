{"version":3,"file":"testing-module.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/testing/","sources":["testing-module.ts"],"names":[],"mappings":";;;AAAA,2CAOwB;AAGxB,8EAAqE;AACrE,oEAAgE;AAChE,uCAIsB;AAMtB;;GAEG;AACH,MAAa,aAAc,SAAQ,6BAAsB;IAGvD,YACE,SAAwB,EACxB,cAA8B,EAC9B,aAAqB,EACJ,iBAAoC,EACrD,QAAqB,EAAE;QAEvB,MAAM,OAAO,GAAG,EAAE,CAAC;QACnB,KAAK,CAAC,SAAS,EAAE,OAAO,EAAE,aAAa,EAAE,KAAK,CAAC,CAAC;QAJ/B,sBAAiB,GAAjB,iBAAiB,CAAmB;QAMrD,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;IACvC,CAAC;IAEO,YAAY,CAClB,eAIa;QAEb,OAAO,CAAC,CAAC,CAAC,eAAe,IAAK,eAA8B,CAAC,KAAK,CAAC,CAAC;IACtE,CAAC;IASM,qBAAqB,CAC1B,eAIa,EACb,OAAgC;QAEhC,MAAM,CAAC,WAAW,EAAE,UAAU,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC;YAClE,CAAC,CAAC,CAAC,eAAe,EAAE,OAAO,CAAC;YAC5B,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,EAAE,EAAE,eAAe,CAAC,CAAC;QAEhD,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;QAC7B,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;QAE3C,MAAM,QAAQ,GAAG,IAAI,sBAAe,CAClC,IAAI,CAAC,SAAS,EACd,WAAW,EACX,IAAI,CAAC,iBAAiB,EACtB,IAAI,CAAC,cAAc,EACnB,UAAU,CACX,CAAC;QACF,OAAO,IAAI,CAAC,kBAAkB,CAAI,QAAQ,EAAE,WAAW,CAAC,CAAC;IAC3D,CAAC;IAEM,sBAAsB,CAC3B,OAAoC;QAEpC,MAAM,EAAE,gBAAgB,EAAE,GAAG,IAAA,+BAAW,EACtC,uBAAuB,EACvB,eAAe,EACf,GAAG,EAAE,CAAC,OAAO,CAAC,uBAAuB,CAAC,CACvC,CAAC;QACF,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QAC1B,OAAO,IAAI,gBAAgB,CACzB,IAAI,CAAC,SAAS,EACd,OAAO,EACP,IAAI,CAAC,cAAc,EACnB,IAAI,CAAC,iBAAiB,CACvB,CAAC;IACJ,CAAC;IAEO,iBAAiB,CAAU,UAAc;QAC/C,MAAM,EAAE,cAAc,EAAE,GAAG,IAAA,+BAAW,EACpC,0BAA0B,EAC1B,aAAa,EACb,GAAG,EAAE,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAC1C,CAAC;QACF,OAAO,IAAI,cAAc,CAAC,UAAU,CAAC,CAAC;IACxC,CAAC;IAEO,WAAW,CAAC,OAAkD;QACpE,IAAI,CAAC,OAAO,IAAI,IAAA,0BAAW,EAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YAC3C,OAAO;SACR;QACD,eAAM,CAAC,cAAc,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACxC,CAAC;IAEO,kBAAkB,CAAI,GAAoB,EAAE,OAAmB;QACrE,OAAO,IAAI,KAAK,CAAC,GAAG,EAAE;YACpB,GAAG,EAAE,CAAC,QAA6B,EAAE,IAAY,EAAE,EAAE;gBACnD,IAAI,CAAC,CAAC,IAAI,IAAI,QAAQ,CAAC,IAAI,IAAI,IAAI,OAAO,EAAE;oBAC1C,OAAO,OAAO,CAAC,IAAI,CAAC,CAAC;iBACtB;gBACD,OAAO,QAAQ,CAAC,IAAI,CAAC,CAAC;YACxB,CAAC;SACF,CAAa,CAAC;IACjB,CAAC;CACF;AArGD,sCAqGC","sourcesContent":["import {\n  HttpServer,\n  INestApplication,\n  INestMicroservice,\n  Logger,\n  NestApplicationOptions,\n  Type,\n} from '@nestjs/common';\nimport { NestMicroserviceOptions } from '@nestjs/common/interfaces/microservices/nest-microservice-options.interface';\nimport { NestApplicationContextOptions } from '@nestjs/common/interfaces/nest-application-context-options.interface';\nimport { loadPackage } from '@nestjs/common/utils/load-package.util';\nimport { isUndefined } from '@nestjs/common/utils/shared.utils';\nimport {\n  AbstractHttpAdapter,\n  NestApplication,\n  NestApplicationContext,\n} from '@nestjs/core';\nimport { ApplicationConfig } from '@nestjs/core/application-config';\nimport { NestContainer } from '@nestjs/core/injector/container';\nimport { Module } from '@nestjs/core/injector/module';\nimport { GraphInspector } from '@nestjs/core/inspector/graph-inspector';\n\n/**\n * @publicApi\n */\nexport class TestingModule extends NestApplicationContext {\n  protected readonly graphInspector: GraphInspector;\n\n  constructor(\n    container: NestContainer,\n    graphInspector: GraphInspector,\n    contextModule: Module,\n    private readonly applicationConfig: ApplicationConfig,\n    scope: Type<any>[] = [],\n  ) {\n    const options = {};\n    super(container, options, contextModule, scope);\n\n    this.graphInspector = graphInspector;\n  }\n\n  private isHttpServer(\n    serverOrOptions:\n      | HttpServer\n      | AbstractHttpAdapter\n      | NestApplicationOptions\n      | undefined,\n  ): serverOrOptions is HttpServer | AbstractHttpAdapter {\n    return !!(serverOrOptions && (serverOrOptions as HttpServer).patch);\n  }\n\n  public createNestApplication<T extends INestApplication = INestApplication>(\n    httpAdapter: HttpServer | AbstractHttpAdapter,\n    options?: NestApplicationOptions,\n  ): T;\n  public createNestApplication<T extends INestApplication = INestApplication>(\n    options?: NestApplicationOptions,\n  ): T;\n  public createNestApplication<T extends INestApplication = INestApplication>(\n    serverOrOptions:\n      | HttpServer\n      | AbstractHttpAdapter\n      | NestApplicationOptions\n      | undefined,\n    options?: NestApplicationOptions,\n  ): T {\n    const [httpAdapter, appOptions] = this.isHttpServer(serverOrOptions)\n      ? [serverOrOptions, options]\n      : [this.createHttpAdapter(), serverOrOptions];\n\n    this.applyLogger(appOptions);\n    this.container.setHttpAdapter(httpAdapter);\n\n    const instance = new NestApplication(\n      this.container,\n      httpAdapter,\n      this.applicationConfig,\n      this.graphInspector,\n      appOptions,\n    );\n    return this.createAdapterProxy<T>(instance, httpAdapter);\n  }\n\n  public createNestMicroservice<T extends object>(\n    options: NestMicroserviceOptions & T,\n  ): INestMicroservice {\n    const { NestMicroservice } = loadPackage(\n      '@nestjs/microservices',\n      'TestingModule',\n      () => require('@nestjs/microservices'),\n    );\n    this.applyLogger(options);\n    return new NestMicroservice(\n      this.container,\n      options,\n      this.graphInspector,\n      this.applicationConfig,\n    );\n  }\n\n  private createHttpAdapter<T = any>(httpServer?: T): AbstractHttpAdapter {\n    const { ExpressAdapter } = loadPackage(\n      '@nestjs/platform-express',\n      'NestFactory',\n      () => require('@nestjs/platform-express'),\n    );\n    return new ExpressAdapter(httpServer);\n  }\n\n  private applyLogger(options: NestApplicationContextOptions | undefined) {\n    if (!options || isUndefined(options.logger)) {\n      return;\n    }\n    Logger.overrideLogger(options.logger);\n  }\n\n  private createAdapterProxy<T>(app: NestApplication, adapter: HttpServer): T {\n    return new Proxy(app, {\n      get: (receiver: Record<string, any>, prop: string) => {\n        if (!(prop in receiver) && prop in adapter) {\n          return adapter[prop];\n        }\n        return receiver[prop];\n      },\n    }) as any as T;\n  }\n}\n"]}