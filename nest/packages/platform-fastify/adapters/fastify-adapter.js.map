{"version":3,"file":"fastify-adapter.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/platform-fastify/","sources":["adapters/fastify-adapter.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  HttpStatus,\n  Logger,\n  RawBodyRequest,\n  RequestMethod,\n  StreamableFile,\n  VersioningOptions,\n  VersioningType,\n  VERSION_NEUTRAL,\n} from '@nestjs/common';\nimport { VersionValue } from '@nestjs/common/interfaces';\nimport {\n  CorsOptions,\n  CorsOptionsDelegate,\n} from '@nestjs/common/interfaces/external/cors-options.interface';\nimport { loadPackage } from '@nestjs/common/utils/load-package.util';\nimport { isString, isUndefined } from '@nestjs/common/utils/shared.utils';\nimport { AbstractHttpAdapter } from '@nestjs/core/adapters/http-adapter';\nimport {\n  fastify,\n  FastifyBaseLogger,\n  FastifyBodyParser,\n  FastifyInstance,\n  FastifyListenOptions,\n  FastifyPluginAsync,\n  FastifyPluginCallback,\n  FastifyRegister,\n  FastifyReply,\n  FastifyRequest,\n  FastifyServerOptions,\n  RawReplyDefaultExpression,\n  RawRequestDefaultExpression,\n  RawServerBase,\n  RawServerDefault,\n  RequestGenericInterface,\n} from 'fastify';\nimport * as Reply from 'fastify/lib/reply';\nimport { kRouteContext } from 'fastify/lib/symbols';\nimport { RouteShorthandMethod } from 'fastify/types/route';\nimport * as http2 from 'http2';\nimport * as https from 'https';\nimport {\n  Chain as LightMyRequestChain,\n  InjectOptions,\n  Response as LightMyRequestResponse,\n} from 'light-my-request';\n// `querystring` is used internally in fastify for registering urlencoded body parser.\nimport { parse as querystringParse } from 'querystring';\nimport { NestFastifyBodyParserOptions } from '../interfaces';\nimport {\n  FastifyStaticOptions,\n  FastifyViewOptions,\n} from '../interfaces/external';\n\ntype FastifyHttp2SecureOptions<\n  Server extends http2.Http2SecureServer,\n  Logger extends FastifyBaseLogger = FastifyBaseLogger,\n> = FastifyServerOptions<Server, Logger> & {\n  http2: true;\n  https: http2.SecureServerOptions;\n};\n\ntype FastifyHttp2Options<\n  Server extends http2.Http2Server,\n  Logger extends FastifyBaseLogger = FastifyBaseLogger,\n> = FastifyServerOptions<Server, Logger> & {\n  http2: true;\n  http2SessionTimeout?: number;\n};\n\ntype FastifyHttpsOptions<\n  Server extends https.Server,\n  Logger extends FastifyBaseLogger = FastifyBaseLogger,\n> = FastifyServerOptions<Server, Logger> & {\n  https: https.ServerOptions;\n};\n\ntype VersionedRoute<TRequest, TResponse> = ((\n  req: TRequest,\n  res: TResponse,\n  next: Function,\n) => Function) & {\n  version: VersionValue;\n  versioningOptions: VersioningOptions;\n};\n\n/**\n * The following type assertion is valid as we enforce \"middie\" plugin registration\n * which enhances the FastifyRequest.RawRequest with the \"originalUrl\" property.\n * ref https://github.com/fastify/middie/pull/16\n * ref https://github.com/fastify/fastify/pull/559\n */\ntype FastifyRawRequest<TServer extends RawServerBase> =\n  RawRequestDefaultExpression<TServer> & { originalUrl?: string };\n\n/**\n * @publicApi\n */\nexport class FastifyAdapter<\n  TServer extends RawServerBase = RawServerDefault,\n  TRawRequest extends FastifyRawRequest<TServer> = FastifyRawRequest<TServer>,\n  TRawResponse extends RawReplyDefaultExpression<TServer> = RawReplyDefaultExpression<TServer>,\n  TRequest extends FastifyRequest<\n    RequestGenericInterface,\n    TServer,\n    TRawRequest\n  > = FastifyRequest<RequestGenericInterface, TServer, TRawRequest>,\n  TReply extends FastifyReply<\n    TServer,\n    TRawRequest,\n    TRawResponse\n  > = FastifyReply<TServer, TRawRequest, TRawResponse>,\n  TInstance extends FastifyInstance<\n    TServer,\n    TRawRequest,\n    TRawResponse\n  > = FastifyInstance<TServer, TRawRequest, TRawResponse>,\n> extends AbstractHttpAdapter<TServer, TRequest, TReply> {\n  protected readonly instance: TInstance;\n\n  private _isParserRegistered: boolean;\n  private isMiddieRegistered: boolean;\n  private versioningOptions: VersioningOptions;\n  private readonly versionConstraint = {\n    name: 'version',\n    validate(value: unknown) {\n      if (!isString(value) && !Array.isArray(value)) {\n        throw new Error(\n          'Version constraint should be a string or an array of strings.',\n        );\n      }\n    },\n    storage() {\n      const versions = new Map<string, unknown>();\n      return {\n        get(version: string | Array<string>) {\n          if (Array.isArray(version)) {\n            return versions.get(version.find(v => versions.has(v))) || null;\n          }\n          return versions.get(version) || null;\n        },\n        set(versionOrVersions: string | Array<string>, store: unknown) {\n          const storeVersionConstraint = (version: string) =>\n            versions.set(version, store);\n          if (Array.isArray(versionOrVersions))\n            versionOrVersions.forEach(storeVersionConstraint);\n          else storeVersionConstraint(versionOrVersions);\n        },\n        del(version: string | Array<string>) {\n          if (Array.isArray(version)) {\n            version.forEach(v => versions.delete(v));\n          } else {\n            versions.delete(version);\n          }\n        },\n        empty() {\n          versions.clear();\n        },\n      };\n    },\n    deriveConstraint: (req: FastifyRequest) => {\n      // Media Type (Accept Header) Versioning Handler\n      if (this.versioningOptions.type === VersioningType.MEDIA_TYPE) {\n        const MEDIA_TYPE_HEADER = 'Accept';\n        const acceptHeaderValue: string | undefined = (req.headers?.[\n          MEDIA_TYPE_HEADER\n        ] || req.headers?.[MEDIA_TYPE_HEADER.toLowerCase()]) as string;\n\n        const acceptHeaderVersionParameter = acceptHeaderValue\n          ? acceptHeaderValue.split(';')[1]\n          : '';\n\n        return isUndefined(acceptHeaderVersionParameter)\n          ? VERSION_NEUTRAL // No version was supplied\n          : acceptHeaderVersionParameter.split(this.versioningOptions.key)[1];\n      }\n      // Header Versioning Handler\n      else if (this.versioningOptions.type === VersioningType.HEADER) {\n        const customHeaderVersionParameter: string | string[] | undefined =\n          req.headers?.[this.versioningOptions.header] ||\n          req.headers?.[this.versioningOptions.header.toLowerCase()];\n\n        return isUndefined(customHeaderVersionParameter)\n          ? VERSION_NEUTRAL // No version was supplied\n          : customHeaderVersionParameter;\n      }\n      // Custom Versioning Handler\n      else if (this.versioningOptions.type === VersioningType.CUSTOM) {\n        return this.versioningOptions.extractor(req);\n      }\n      return undefined;\n    },\n    mustMatchWhenDerived: false,\n  };\n\n  get isParserRegistered(): boolean {\n    return !!this._isParserRegistered;\n  }\n\n  constructor(\n    instanceOrOptions?:\n      | TInstance\n      | FastifyHttp2Options<any>\n      | FastifyHttp2SecureOptions<any>\n      | FastifyHttpsOptions<any>\n      | FastifyServerOptions<TServer>,\n  ) {\n    super();\n\n    const instance =\n      instanceOrOptions && (instanceOrOptions as TInstance).server\n        ? instanceOrOptions\n        : fastify({\n            constraints: {\n              version: this.versionConstraint as any,\n            },\n            ...(instanceOrOptions as FastifyServerOptions),\n          });\n    this.setInstance(instance);\n  }\n\n  public async init() {\n    if (this.isMiddieRegistered) {\n      return;\n    }\n    await this.registerMiddie();\n  }\n\n  public listen(port: string | number, callback?: () => void): void;\n  public listen(\n    port: string | number,\n    hostname: string,\n    callback?: () => void,\n  ): void;\n  public listen(\n    listenOptions: string | number | FastifyListenOptions,\n    ...args: any[]\n  ): void {\n    const isFirstArgTypeofFunction = typeof args[0] === 'function';\n    const callback = isFirstArgTypeofFunction ? args[0] : args[1];\n\n    let options: Record<string, any>;\n    if (\n      typeof listenOptions === 'object' &&\n      (listenOptions.host !== undefined ||\n        listenOptions.port !== undefined ||\n        listenOptions.path !== undefined)\n    ) {\n      // First parameter is an object with a path, port and/or host attributes\n      options = listenOptions;\n    } else {\n      options = {\n        port: +listenOptions,\n      };\n    }\n    if (!isFirstArgTypeofFunction) {\n      options.host = args[0];\n    }\n    return this.instance.listen(options, callback);\n  }\n\n  public get(...args: any[]) {\n    return this.injectConstraintsIfVersioned('get', ...args);\n  }\n\n  public post(...args: any[]) {\n    return this.injectConstraintsIfVersioned('post', ...args);\n  }\n\n  public head(...args: any[]) {\n    return this.injectConstraintsIfVersioned('head', ...args);\n  }\n\n  public delete(...args: any[]) {\n    return this.injectConstraintsIfVersioned('delete', ...args);\n  }\n\n  public put(...args: any[]) {\n    return this.injectConstraintsIfVersioned('put', ...args);\n  }\n\n  public patch(...args: any[]) {\n    return this.injectConstraintsIfVersioned('patch', ...args);\n  }\n\n  public options(...args: any[]) {\n    return this.injectConstraintsIfVersioned('options', ...args);\n  }\n\n  public applyVersionFilter(\n    handler: Function,\n    version: VersionValue,\n    versioningOptions: VersioningOptions,\n  ): VersionedRoute<TRequest, TReply> {\n    if (!this.versioningOptions) {\n      this.versioningOptions = versioningOptions;\n    }\n    const versionedRoute = handler as VersionedRoute<TRequest, TReply>;\n    versionedRoute.version = version;\n    return versionedRoute;\n  }\n\n  public reply(\n    response: TRawResponse | TReply,\n    body: any,\n    statusCode?: number,\n  ) {\n    const fastifyReply: TReply = this.isNativeResponse(response)\n      ? new Reply(\n          response,\n          {\n            [kRouteContext]: {\n              preSerialization: null,\n              preValidation: [],\n              preHandler: [],\n              onSend: [],\n              onError: [],\n            },\n          },\n          {},\n        )\n      : response;\n\n    if (statusCode) {\n      fastifyReply.status(statusCode);\n    }\n    if (body instanceof StreamableFile) {\n      const streamHeaders = body.getHeaders();\n      if (\n        fastifyReply.getHeader('Content-Type') === undefined &&\n        streamHeaders.type !== undefined\n      ) {\n        fastifyReply.header('Content-Type', streamHeaders.type);\n      }\n      if (\n        fastifyReply.getHeader('Content-Disposition') === undefined &&\n        streamHeaders.disposition !== undefined\n      ) {\n        fastifyReply.header('Content-Disposition', streamHeaders.disposition);\n      }\n      if (\n        fastifyReply.getHeader('Content-Length') === undefined &&\n        streamHeaders.length !== undefined\n      ) {\n        fastifyReply.header('Content-Length', streamHeaders.length);\n      }\n      body = body.getStream();\n    }\n    if (\n      fastifyReply.getHeader('Content-Type') !== undefined &&\n      fastifyReply.getHeader('Content-Type') !== 'application/json' &&\n      body?.statusCode >= HttpStatus.BAD_REQUEST\n    ) {\n      Logger.warn(\n        \"Content-Type doesn't match Reply body, you might need a custom ExceptionFilter for non-JSON responses\",\n        FastifyAdapter.name,\n      );\n      fastifyReply.header('Content-Type', 'application/json');\n    }\n    return fastifyReply.send(body);\n  }\n\n  public status(response: TRawResponse | TReply, statusCode: number) {\n    if (this.isNativeResponse(response)) {\n      response.statusCode = statusCode;\n      return response;\n    }\n    return (response as TReply).code(statusCode);\n  }\n\n  public end(response: TReply, message?: string) {\n    response.raw.end(message);\n  }\n\n  public render(\n    response: TReply & { view: Function },\n    view: string,\n    options: any,\n  ) {\n    return response && response.view(view, options);\n  }\n\n  public redirect(response: TReply, statusCode: number, url: string) {\n    const code = statusCode ?? HttpStatus.FOUND;\n    return response.status(code).redirect(url);\n  }\n\n  public setErrorHandler(handler: Parameters<TInstance['setErrorHandler']>[0]) {\n    return this.instance.setErrorHandler(handler);\n  }\n\n  public setNotFoundHandler(handler: Function) {\n    return this.instance.setNotFoundHandler(handler as any);\n  }\n\n  public getHttpServer<T = TServer>(): T {\n    return this.instance.server as unknown as T;\n  }\n\n  public getInstance<T = TInstance>(): T {\n    return this.instance as unknown as T;\n  }\n\n  public register<TRegister extends Parameters<FastifyRegister<TInstance>>>(\n    plugin: TRegister['0'],\n    opts?: TRegister['1'],\n  ) {\n    return this.instance.register(plugin, opts);\n  }\n\n  public inject(): LightMyRequestChain;\n  public inject(opts: InjectOptions | string): Promise<LightMyRequestResponse>;\n  public inject(\n    opts?: InjectOptions | string,\n  ): LightMyRequestChain | Promise<LightMyRequestResponse> {\n    return this.instance.inject(opts);\n  }\n\n  public async close() {\n    try {\n      return await this.instance.close();\n    } catch (err) {\n      // Check if server is still running\n      if (err.code !== 'ERR_SERVER_NOT_RUNNING') {\n        throw err;\n      }\n      return;\n    }\n  }\n\n  public initHttpServer() {\n    this.httpServer = this.instance.server;\n  }\n\n  public useStaticAssets(options: FastifyStaticOptions) {\n    return this.register(\n      loadPackage('@fastify/static', 'FastifyAdapter.useStaticAssets()', () =>\n        require('@fastify/static'),\n      ),\n      options,\n    );\n  }\n\n  public setViewEngine(options: FastifyViewOptions | string) {\n    if (isString(options)) {\n      new Logger('FastifyAdapter').error(\n        \"setViewEngine() doesn't support a string argument.\",\n      );\n      process.exit(1);\n    }\n    return this.register(\n      loadPackage('@fastify/view', 'FastifyAdapter.setViewEngine()', () =>\n        require('@fastify/view'),\n      ),\n      options,\n    );\n  }\n\n  public isHeadersSent(response: TReply): boolean {\n    return response.sent;\n  }\n\n  public setHeader(response: TReply, name: string, value: string) {\n    return response.header(name, value);\n  }\n\n  public getRequestHostname(request: TRequest): string {\n    return request.hostname;\n  }\n\n  public getRequestMethod(request: TRequest): string {\n    return request.raw ? request.raw.method : request.method;\n  }\n\n  public getRequestUrl(request: TRequest): string;\n  public getRequestUrl(request: TRawRequest): string;\n  public getRequestUrl(request: TRequest & TRawRequest): string {\n    return this.getRequestOriginalUrl(request.raw || request);\n  }\n\n  public enableCors(options: CorsOptions | CorsOptionsDelegate<TRequest>) {\n    this.register(\n      import('@fastify/cors') as Parameters<TInstance['register']>[0],\n      options,\n    );\n  }\n\n  public registerParserMiddleware(prefix?: string, rawBody?: boolean) {\n    if (this._isParserRegistered) {\n      return;\n    }\n\n    this.registerUrlencodedContentParser(rawBody);\n    this.registerJsonContentParser(rawBody);\n\n    this._isParserRegistered = true;\n  }\n\n  public useBodyParser(\n    type: string | string[] | RegExp,\n    rawBody: boolean,\n    options?: NestFastifyBodyParserOptions,\n    parser?: FastifyBodyParser<Buffer, TServer>,\n  ) {\n    const parserOptions = {\n      ...(options || {}),\n      parseAs: 'buffer' as const,\n    };\n\n    this.getInstance().addContentTypeParser<Buffer>(\n      type,\n      parserOptions,\n      (\n        req: RawBodyRequest<FastifyRequest<unknown, TServer, TRawRequest>>,\n        body: Buffer,\n        done,\n      ) => {\n        if (rawBody === true && Buffer.isBuffer(body)) {\n          req.rawBody = body;\n        }\n\n        if (parser) {\n          parser(req, body, done);\n          return;\n        }\n\n        done(null, body);\n      },\n    );\n\n    // To avoid the Nest application init to override our custom\n    // body parser, we mark the parsers as registered.\n    this._isParserRegistered = true;\n  }\n\n  public async createMiddlewareFactory(\n    requestMethod: RequestMethod,\n  ): Promise<(path: string, callback: Function) => any> {\n    if (!this.isMiddieRegistered) {\n      await this.registerMiddie();\n    }\n    return (path: string, callback: Function) => {\n      let normalizedPath = path.endsWith('/*')\n        ? `${path.slice(0, -1)}(.*)`\n        : path;\n\n      // Fallback to \"(.*)\" to support plugins like GraphQL\n      normalizedPath = normalizedPath === '/(.*)' ? '(.*)' : normalizedPath;\n\n      // The following type assertion is valid as we use import('@fastify/middie') rather than require('@fastify/middie')\n      // ref https://github.com/fastify/middie/pull/55\n      this.instance.use(\n        normalizedPath,\n        callback as Parameters<TInstance['use']>['1'],\n      );\n    };\n  }\n\n  public getType(): string {\n    return 'fastify';\n  }\n\n  protected registerWithPrefix(\n    factory:\n      | FastifyPluginCallback<any>\n      | FastifyPluginAsync<any>\n      | Promise<{ default: FastifyPluginCallback<any> }>\n      | Promise<{ default: FastifyPluginAsync<any> }>,\n    prefix = '/',\n  ) {\n    return this.instance.register(factory, { prefix });\n  }\n\n  private isNativeResponse(\n    response: TRawResponse | TReply,\n  ): response is TRawResponse {\n    return !('status' in response);\n  }\n\n  private registerJsonContentParser(rawBody?: boolean) {\n    const contentType = 'application/json';\n    const withRawBody = !!rawBody;\n    const { bodyLimit } = this.getInstance().initialConfig;\n\n    this.useBodyParser(\n      contentType,\n      withRawBody,\n      { bodyLimit },\n      (req, body, done) => {\n        const { onProtoPoisoning, onConstructorPoisoning } =\n          this.instance.initialConfig;\n        const defaultJsonParser = this.instance.getDefaultJsonParser(\n          onProtoPoisoning || 'error',\n          onConstructorPoisoning || 'error',\n        ) as FastifyBodyParser<string | Buffer, TServer>;\n        defaultJsonParser(req, body, done);\n      },\n    );\n  }\n\n  private registerUrlencodedContentParser(rawBody?: boolean) {\n    const contentType = 'application/x-www-form-urlencoded';\n    const withRawBody = !!rawBody;\n    const { bodyLimit } = this.getInstance().initialConfig;\n\n    this.useBodyParser(\n      contentType,\n      withRawBody,\n      { bodyLimit },\n      (_req, body, done) => {\n        done(null, querystringParse(body.toString()));\n      },\n    );\n  }\n\n  private async registerMiddie() {\n    this.isMiddieRegistered = true;\n    await this.register(\n      import('@fastify/middie') as Parameters<TInstance['register']>[0],\n    );\n  }\n\n  private getRequestOriginalUrl(rawRequest: TRawRequest) {\n    return rawRequest.originalUrl || rawRequest.url;\n  }\n\n  private injectConstraintsIfVersioned(\n    routerMethodKey:\n      | 'get'\n      | 'post'\n      | 'put'\n      | 'delete'\n      | 'options'\n      | 'patch'\n      | 'head',\n    ...args: any[]\n  ) {\n    const handlerRef = args[args.length - 1];\n    const isVersioned =\n      !isUndefined(handlerRef.version) &&\n      handlerRef.version !== VERSION_NEUTRAL;\n\n    if (isVersioned) {\n      const isPathAndRouteTuple = args.length === 2;\n      if (isPathAndRouteTuple) {\n        const options = {\n          constraints: {\n            version: handlerRef.version,\n          },\n        };\n        const path = args[0];\n        return this.instance[routerMethodKey](path, options, handlerRef);\n      }\n    }\n    return this.instance[routerMethodKey](\n      ...(args as Parameters<\n        RouteShorthandMethod<TServer, TRawRequest, TRawResponse>\n      >),\n    );\n  }\n}\n"]}