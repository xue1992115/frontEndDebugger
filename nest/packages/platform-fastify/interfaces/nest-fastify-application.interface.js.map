{"version":3,"file":"nest-fastify-application.interface.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/platform-fastify/","sources":["interfaces/nest-fastify-application.interface.ts"],"names":[],"mappings":"","sourcesContent":["import { INestApplication } from '@nestjs/common';\nimport {\n  FastifyBodyParser,\n  FastifyInstance,\n  FastifyPluginAsync,\n  FastifyPluginCallback,\n  FastifyPluginOptions,\n  FastifyRegisterOptions,\n  RawServerBase,\n} from 'fastify';\nimport {\n  Chain as LightMyRequestChain,\n  InjectOptions,\n  Response as LightMyRequestResponse,\n} from 'light-my-request';\nimport { FastifyStaticOptions, FastifyViewOptions } from './external';\nimport { NestFastifyBodyParserOptions } from './nest-fastify-body-parser-options.interface';\n\n/**\n * @publicApi\n */\nexport interface NestFastifyApplication extends INestApplication {\n  /**\n   * A wrapper function around native `fastify.register()` method.\n   * Example `app.register(require('@fastify/formbody'))\n   * @returns {Promise<FastifyInstance>}\n   */\n  register<Options extends FastifyPluginOptions = any>(\n    plugin:\n      | FastifyPluginCallback<Options>\n      | FastifyPluginAsync<Options>\n      | Promise<{ default: FastifyPluginCallback<Options> }>\n      | Promise<{ default: FastifyPluginAsync<Options> }>,\n    opts?: FastifyRegisterOptions<Options>,\n  ): Promise<FastifyInstance>;\n\n  /**\n   * Register Fastify body parsers on the fly. Will respect\n   * the application's `rawBody` option.\n   *\n   * @example\n   * const app = await NestFactory.create<NestFastifyApplication>(\n   *   AppModule,\n   *   new FastifyAdapter(),\n   *   { rawBody: true }\n   * );\n   * // enable the json parser with a parser limit of 50mb\n   * app.useBodyParser('application/json', { bodyLimit: 50 * 1000 * 1024 });\n   *\n   * @returns {this}\n   */\n  useBodyParser<TServer extends RawServerBase = RawServerBase>(\n    type: string | string[] | RegExp,\n    options?: NestFastifyBodyParserOptions,\n    parser?: FastifyBodyParser<Buffer, TServer>,\n  ): this;\n\n  /**\n   * Sets a base directory for public assets.\n   * Example `app.useStaticAssets({ root: 'public' })`\n   * @returns {this}\n   */\n  useStaticAssets(options: FastifyStaticOptions): this;\n\n  /**\n   * Sets a view engine for templates (views), for example: `pug`, `handlebars`, or `ejs`.\n   *\n   * Don't pass in a string. The string type in the argument is for compatibility reason and will cause an exception.\n   * @returns {this}\n   */\n  setViewEngine(options: FastifyViewOptions | string): this;\n\n  /**\n   * A wrapper function around native `fastify.inject()` method.\n   * @returns {void}\n   */\n  inject(): LightMyRequestChain;\n  inject(opts: InjectOptions | string): Promise<LightMyRequestResponse>;\n\n  /**\n   * Starts the application.\n   * @returns A Promise that, when resolved, is a reference to the underlying HttpServer.\n   */\n  listen(\n    port: number | string,\n    callback?: (err: Error, address: string) => void,\n  ): Promise<any>;\n  listen(\n    port: number | string,\n    address: string,\n    callback?: (err: Error, address: string) => void,\n  ): Promise<any>;\n  listen(\n    port: number | string,\n    address: string,\n    backlog: number,\n    callback?: (err: Error, address: string) => void,\n  ): Promise<any>;\n}\n"]}