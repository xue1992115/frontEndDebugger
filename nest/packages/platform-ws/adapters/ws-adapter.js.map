{"version":3,"file":"ws-adapter.js","sourceRoot":"/Users/hanxiaoxue/Documents/work/frontEndDebugger/nest/packages/platform-ws/","sources":["adapters/ws-adapter.ts"],"names":[],"mappings":"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","sourcesContent":["import { INestApplicationContext, Logger } from '@nestjs/common';\nimport { loadPackage } from '@nestjs/common/utils/load-package.util';\nimport { normalizePath, isNil } from '@nestjs/common/utils/shared.utils';\nimport { AbstractWsAdapter } from '@nestjs/websockets';\nimport {\n  CLOSE_EVENT,\n  CONNECTION_EVENT,\n  ERROR_EVENT,\n} from '@nestjs/websockets/constants';\nimport { MessageMappingProperties } from '@nestjs/websockets/gateway-metadata-explorer';\nimport * as http from 'http';\nimport { EMPTY, fromEvent, Observable } from 'rxjs';\nimport { filter, first, mergeMap, share, takeUntil } from 'rxjs/operators';\n\nlet wsPackage: any = {};\n\nenum READY_STATE {\n  CONNECTING_STATE = 0,\n  OPEN_STATE = 1,\n  CLOSING_STATE = 2,\n  CLOSED_STATE = 3,\n}\n\ntype HttpServerRegistryKey = number;\ntype HttpServerRegistryEntry = any;\ntype WsServerRegistryKey = number;\ntype WsServerRegistryEntry = any[];\n\nconst UNDERLYING_HTTP_SERVER_PORT = 0;\n\n/**\n * @publicApi\n */\nexport class WsAdapter extends AbstractWsAdapter {\n  protected readonly logger = new Logger(WsAdapter.name);\n  protected readonly httpServersRegistry = new Map<\n    HttpServerRegistryKey,\n    HttpServerRegistryEntry\n  >();\n  protected readonly wsServersRegistry = new Map<\n    WsServerRegistryKey,\n    WsServerRegistryEntry\n  >();\n\n  constructor(appOrHttpServer?: INestApplicationContext | any) {\n    super(appOrHttpServer);\n    wsPackage = loadPackage('ws', 'WsAdapter', () => require('ws'));\n  }\n\n  public create(\n    port: number,\n    options?: Record<string, any> & {\n      namespace?: string;\n      server?: any;\n      path?: string;\n    },\n  ) {\n    const { server, path, ...wsOptions } = options;\n    if (wsOptions?.namespace) {\n      const error = new Error(\n        '\"WsAdapter\" does not support namespaces. If you need namespaces in your project, consider using the \"@nestjs/platform-socket.io\" package instead.',\n      );\n      this.logger.error(error);\n      throw error;\n    }\n\n    if (port === UNDERLYING_HTTP_SERVER_PORT && this.httpServer) {\n      this.ensureHttpServerExists(port, this.httpServer);\n      const wsServer = this.bindErrorHandler(\n        new wsPackage.Server({\n          noServer: true,\n          ...wsOptions,\n        }),\n      );\n\n      this.addWsServerToRegistry(wsServer, port, path);\n      return wsServer;\n    }\n\n    if (server) {\n      return server;\n    }\n    if (path && port !== UNDERLYING_HTTP_SERVER_PORT) {\n      // Multiple servers with different paths\n      // sharing a single HTTP/S server running on different port\n      // than a regular HTTP application\n      const httpServer = this.ensureHttpServerExists(port);\n      httpServer?.listen(port);\n\n      const wsServer = this.bindErrorHandler(\n        new wsPackage.Server({\n          noServer: true,\n          ...wsOptions,\n        }),\n      );\n      this.addWsServerToRegistry(wsServer, port, path);\n      return wsServer;\n    }\n    const wsServer = this.bindErrorHandler(\n      new wsPackage.Server({\n        port,\n        path,\n        ...wsOptions,\n      }),\n    );\n    return wsServer;\n  }\n\n  public bindMessageHandlers(\n    client: any,\n    handlers: MessageMappingProperties[],\n    transform: (data: any) => Observable<any>,\n  ) {\n    const close$ = fromEvent(client, CLOSE_EVENT).pipe(share(), first());\n    const source$ = fromEvent(client, 'message').pipe(\n      mergeMap(data =>\n        this.bindMessageHandler(data, handlers, transform).pipe(\n          filter(result => !isNil(result)),\n        ),\n      ),\n      takeUntil(close$),\n    );\n    const onMessage = (response: any) => {\n      if (client.readyState !== READY_STATE.OPEN_STATE) {\n        return;\n      }\n      client.send(JSON.stringify(response));\n    };\n    source$.subscribe(onMessage);\n  }\n\n  public bindMessageHandler(\n    buffer: any,\n    handlers: MessageMappingProperties[],\n    transform: (data: any) => Observable<any>,\n  ): Observable<any> {\n    try {\n      const message = JSON.parse(buffer.data);\n      const messageHandler = handlers.find(\n        handler => handler.message === message.event,\n      );\n      const { callback } = messageHandler;\n      return transform(callback(message.data));\n    } catch {\n      return EMPTY;\n    }\n  }\n\n  public bindErrorHandler(server: any) {\n    server.on(CONNECTION_EVENT, (ws: any) =>\n      ws.on(ERROR_EVENT, (err: any) => this.logger.error(err)),\n    );\n    server.on(ERROR_EVENT, (err: any) => this.logger.error(err));\n    return server;\n  }\n\n  public bindClientDisconnect(client: any, callback: Function) {\n    client.on(CLOSE_EVENT, callback);\n  }\n\n  public async dispose() {\n    const closeEventSignals = Array.from(this.httpServersRegistry)\n      .filter(([port]) => port !== UNDERLYING_HTTP_SERVER_PORT)\n      .map(([_, server]) => new Promise(resolve => server.close(resolve)));\n\n    await Promise.all(closeEventSignals);\n    this.httpServersRegistry.clear();\n    this.wsServersRegistry.clear();\n  }\n\n  protected ensureHttpServerExists(\n    port: number,\n    httpServer = http.createServer(),\n  ) {\n    if (this.httpServersRegistry.has(port)) {\n      return;\n    }\n    this.httpServersRegistry.set(port, httpServer);\n\n    httpServer.on('upgrade', (request, socket, head) => {\n      const baseUrl = 'ws://' + request.headers.host + '/';\n      const pathname = new URL(request.url, baseUrl).pathname;\n      const wsServersCollection = this.wsServersRegistry.get(port);\n\n      let isRequestDelegated = false;\n      for (const wsServer of wsServersCollection) {\n        if (pathname === wsServer.path) {\n          wsServer.handleUpgrade(request, socket, head, (ws: unknown) => {\n            wsServer.emit('connection', ws, request);\n          });\n          isRequestDelegated = true;\n          break;\n        }\n      }\n      if (!isRequestDelegated) {\n        socket.destroy();\n      }\n    });\n    return httpServer;\n  }\n\n  protected addWsServerToRegistry<T extends Record<'path', string> = any>(\n    wsServer: T,\n    port: number,\n    path: string,\n  ) {\n    const entries = this.wsServersRegistry.get(port) ?? [];\n    entries.push(wsServer);\n\n    wsServer.path = normalizePath(path);\n    this.wsServersRegistry.set(port, entries);\n  }\n}\n"]}